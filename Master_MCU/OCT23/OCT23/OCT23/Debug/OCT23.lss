
OCT23.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000052a  00800060  000021ec  00002280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080058a  0080058a  000027aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000027dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00002818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000069d4  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001570  00000000  00000000  0000955c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029e5  00000000  00000000  0000aacc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000093c  00000000  00000000  0000d4b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001735  00000000  00000000  0000ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003da7  00000000  00000000  0000f525  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  000132cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__vector_1>
       8:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_2>
       c:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__vector_7>
      20:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__vector_8>
      24:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	20 03       	mulsu	r18, r16
      56:	37 03       	mulsu	r19, r23
      58:	4e 03       	fmul	r20, r22
      5a:	69 03       	fmul	r22, r17
      5c:	81 03       	fmuls	r16, r17
      5e:	99 03       	fmulsu	r17, r17
      60:	b1 03       	fmuls	r19, r17
      62:	e5 03       	fmuls	r22, r21

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	15 e0       	ldi	r17, 0x05	; 5
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ee       	ldi	r30, 0xEC	; 236
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	25 e0       	ldi	r18, 0x05	; 5
      88:	aa e8       	ldi	r26, 0x8A	; 138
      8a:	b5 e0       	ldi	r27, 0x05	; 5
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a6 39       	cpi	r26, 0x96	; 150
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 4e 0a 	call	0x149c	; 0x149c <main>
      9a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Password_Exist>:
					default:
					LCD_Clear();
					LCD_String("Wrong choice!");
					_delay_ms(500);
					Key = STD_Low;
					goto Tryagain2;
      a2:	cf 92       	push	r12
      a4:	df 92       	push	r13
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	00 d0       	rcall	.+0      	; 0xb4 <Password_Exist+0x12>
      b4:	00 d0       	rcall	.+0      	; 0xb6 <Password_Exist+0x14>
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	08 2f       	mov	r16, r24
      bc:	19 82       	std	Y+1, r1	; 0x01
      be:	1a 82       	std	Y+2, r1	; 0x02
      c0:	1b 82       	std	Y+3, r1	; 0x03
      c2:	1c 82       	std	Y+4, r1	; 0x04
      c4:	ce 01       	movw	r24, r28
      c6:	01 96       	adiw	r24, 0x01	; 1
      c8:	7c 01       	movw	r14, r24
      ca:	6c 01       	movw	r12, r24
      cc:	10 e0       	ldi	r17, 0x00	; 0
      ce:	61 2f       	mov	r22, r17
      d0:	80 2f       	mov	r24, r16
      d2:	0e 94 49 08 	call	0x1092	; 0x1092 <EEPROM_ReadByte>
      d6:	f6 01       	movw	r30, r12
      d8:	81 93       	st	Z+, r24
      da:	6f 01       	movw	r12, r30
      dc:	1f 5f       	subi	r17, 0xFF	; 255
      de:	14 30       	cpi	r17, 0x04	; 4
      e0:	b1 f7       	brne	.-20     	; 0xce <Password_Exist+0x2c>
      e2:	9e 01       	movw	r18, r28
      e4:	2b 5f       	subi	r18, 0xFB	; 251
      e6:	3f 4f       	sbci	r19, 0xFF	; 255
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	f7 01       	movw	r30, r14
      ec:	81 91       	ld	r24, Z+
      ee:	7f 01       	movw	r14, r30
      f0:	8f 3f       	cpi	r24, 0xFF	; 255
      f2:	09 f4       	brne	.+2      	; 0xf6 <Password_Exist+0x54>
      f4:	9f 5f       	subi	r25, 0xFF	; 255
      f6:	e2 16       	cp	r14, r18
      f8:	f3 06       	cpc	r15, r19
      fa:	b9 f7       	brne	.-18     	; 0xea <Password_Exist+0x48>
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	09 f4       	brne	.+2      	; 0x104 <Password_Exist+0x62>
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0f 90       	pop	r0
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	0f 90       	pop	r0
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	ff 90       	pop	r15
     116:	ef 90       	pop	r14
     118:	df 90       	pop	r13
     11a:	cf 90       	pop	r12
     11c:	08 95       	ret

0000011e <getPassword>:
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	d8 2f       	mov	r29, r24
     128:	8b 01       	movw	r16, r22
     12a:	c0 e0       	ldi	r28, 0x00	; 0
     12c:	6c 2f       	mov	r22, r28
     12e:	8d 2f       	mov	r24, r29
     130:	0e 94 49 08 	call	0x1092	; 0x1092 <EEPROM_ReadByte>
     134:	f8 01       	movw	r30, r16
     136:	81 93       	st	Z+, r24
     138:	8f 01       	movw	r16, r30
     13a:	ff ef       	ldi	r31, 0xFF	; 255
     13c:	20 e7       	ldi	r18, 0x70	; 112
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	f1 50       	subi	r31, 0x01	; 1
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	80 40       	sbci	r24, 0x00	; 0
     146:	e1 f7       	brne	.-8      	; 0x140 <getPassword+0x22>
     148:	00 c0       	rjmp	.+0      	; 0x14a <getPassword+0x2c>
     14a:	00 00       	nop
     14c:	cf 5f       	subi	r28, 0xFF	; 255
     14e:	c4 30       	cpi	r28, 0x04	; 4
     150:	69 f7       	brne	.-38     	; 0x12c <getPassword+0xe>
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <ALARM>:
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	82 ea       	ldi	r24, 0xA2	; 162
     160:	0e 94 49 08 	call	0x1092	; 0x1092 <EEPROM_ReadByte>
     164:	8f 3f       	cpi	r24, 0xFF	; 255
     166:	b1 f0       	breq	.+44     	; 0x194 <ALARM+0x38>
     168:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     16c:	80 ed       	ldi	r24, 0xD0	; 208
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     174:	2f ef       	ldi	r18, 0xFF	; 255
     176:	83 ec       	ldi	r24, 0xC3	; 195
     178:	99 e0       	ldi	r25, 0x09	; 9
     17a:	21 50       	subi	r18, 0x01	; 1
     17c:	80 40       	sbci	r24, 0x00	; 0
     17e:	90 40       	sbci	r25, 0x00	; 0
     180:	e1 f7       	brne	.-8      	; 0x17a <ALARM+0x1e>
     182:	00 c0       	rjmp	.+0      	; 0x184 <ALARM+0x28>
     184:	00 00       	nop
     186:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     18a:	61 e0       	ldi	r22, 0x01	; 1
     18c:	88 e0       	ldi	r24, 0x08	; 8
     18e:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
     192:	ea cf       	rjmp	.-44     	; 0x168 <ALARM+0xc>
     194:	08 95       	ret

00000196 <Menu2>:
     196:	8f 92       	push	r8
     198:	9f 92       	push	r9
     19a:	bf 92       	push	r11
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
     1b0:	28 97       	sbiw	r28, 0x08	; 8
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	de bf       	out	0x3e, r29	; 62
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	cd bf       	out	0x3d, r28	; 61
     1bc:	19 82       	std	Y+1, r1	; 0x01
     1be:	1a 82       	std	Y+2, r1	; 0x02
     1c0:	1b 82       	std	Y+3, r1	; 0x03
     1c2:	1c 82       	std	Y+4, r1	; 0x04
     1c4:	1d 82       	std	Y+5, r1	; 0x05
     1c6:	1e 82       	std	Y+6, r1	; 0x06
     1c8:	1f 82       	std	Y+7, r1	; 0x07
     1ca:	18 86       	std	Y+8, r1	; 0x08
     1cc:	be 01       	movw	r22, r28
     1ce:	6b 5f       	subi	r22, 0xFB	; 251
     1d0:	7f 4f       	sbci	r23, 0xFF	; 255
     1d2:	80 ea       	ldi	r24, 0xA0	; 160
     1d4:	0e 94 8f 00 	call	0x11e	; 0x11e <getPassword>
     1d8:	2f ef       	ldi	r18, 0xFF	; 255
     1da:	80 e7       	ldi	r24, 0x70	; 112
     1dc:	92 e0       	ldi	r25, 0x02	; 2
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	80 40       	sbci	r24, 0x00	; 0
     1e2:	90 40       	sbci	r25, 0x00	; 0
     1e4:	e1 f7       	brne	.-8      	; 0x1de <Menu2+0x48>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <Menu2+0x52>
     1e8:	00 00       	nop
     1ea:	0f 2e       	mov	r0, r31
     1ec:	f3 e3       	ldi	r31, 0x33	; 51
     1ee:	bf 2e       	mov	r11, r31
     1f0:	f0 2d       	mov	r31, r0
     1f2:	6e 01       	movw	r12, r28
     1f4:	a9 e0       	ldi	r26, 0x09	; 9
     1f6:	ca 0e       	add	r12, r26
     1f8:	d1 1c       	adc	r13, r1
     1fa:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     1fe:	83 e7       	ldi	r24, 0x73	; 115
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     206:	8e 01       	movw	r16, r28
     208:	0f 5f       	subi	r16, 0xFF	; 255
     20a:	1f 4f       	sbci	r17, 0xFF	; 255
     20c:	48 01       	movw	r8, r16
     20e:	e1 2c       	mov	r14, r1
     210:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     214:	f8 2e       	mov	r15, r24
     216:	88 23       	and	r24, r24
     218:	e1 f0       	breq	.+56     	; 0x252 <Menu2+0xbc>
     21a:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
     21e:	bf ef       	ldi	r27, 0xFF	; 255
     220:	ea e6       	ldi	r30, 0x6A	; 106
     222:	f3 e0       	ldi	r31, 0x03	; 3
     224:	b1 50       	subi	r27, 0x01	; 1
     226:	e0 40       	sbci	r30, 0x00	; 0
     228:	f0 40       	sbci	r31, 0x00	; 0
     22a:	e1 f7       	brne	.-8      	; 0x224 <Menu2+0x8e>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <Menu2+0x98>
     22e:	00 00       	nop
     230:	69 e0       	ldi	r22, 0x09	; 9
     232:	6e 0d       	add	r22, r14
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     23a:	8a e2       	ldi	r24, 0x2A	; 42
     23c:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
     240:	d4 01       	movw	r26, r8
     242:	fd 92       	st	X+, r15
     244:	4d 01       	movw	r8, r26
     246:	e3 94       	inc	r14
     248:	b4 e0       	ldi	r27, 0x04	; 4
     24a:	eb 16       	cp	r14, r27
     24c:	09 f4       	brne	.+2      	; 0x250 <Menu2+0xba>
     24e:	85 c0       	rjmp	.+266    	; 0x35a <Menu2+0x1c4>
     250:	df cf       	rjmp	.-66     	; 0x210 <Menu2+0x7a>
     252:	e3 e0       	ldi	r30, 0x03	; 3
     254:	ee 15       	cp	r30, r14
     256:	e0 f6       	brcc	.-72     	; 0x210 <Menu2+0x7a>
     258:	80 c0       	rjmp	.+256    	; 0x35a <Menu2+0x1c4>
     25a:	91 91       	ld	r25, Z+
     25c:	d8 01       	movw	r26, r16
     25e:	8d 91       	ld	r24, X+
     260:	8d 01       	movw	r16, r26
     262:	98 13       	cpse	r25, r24
     264:	01 c0       	rjmp	.+2      	; 0x268 <Menu2+0xd2>
     266:	2f 5f       	subi	r18, 0xFF	; 255
     268:	ce 16       	cp	r12, r30
     26a:	df 06       	cpc	r13, r31
     26c:	b1 f7       	brne	.-20     	; 0x25a <Menu2+0xc4>
     26e:	24 30       	cpi	r18, 0x04	; 4
     270:	19 f5       	brne	.+70     	; 0x2b8 <Menu2+0x122>
     272:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     276:	8a ed       	ldi	r24, 0xDA	; 218
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     27e:	bf ef       	ldi	r27, 0xFF	; 255
     280:	ef e0       	ldi	r30, 0x0F	; 15
     282:	f7 e2       	ldi	r31, 0x27	; 39
     284:	b1 50       	subi	r27, 0x01	; 1
     286:	e0 40       	sbci	r30, 0x00	; 0
     288:	f0 40       	sbci	r31, 0x00	; 0
     28a:	e1 f7       	brne	.-8      	; 0x284 <Menu2+0xee>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <Menu2+0xf8>
     28e:	00 00       	nop
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     298:	8c ee       	ldi	r24, 0xEC	; 236
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	8f e0       	ldi	r24, 0x0F	; 15
     2a4:	97 e2       	ldi	r25, 0x27	; 39
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <Menu2+0x110>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <Menu2+0x11a>
     2b0:	00 00       	nop
     2b2:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     2b6:	55 c0       	rjmp	.+170    	; 0x362 <Menu2+0x1cc>
     2b8:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     2bc:	8c ef       	ldi	r24, 0xFC	; 252
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     2c4:	a1 e3       	ldi	r26, 0x31	; 49
     2c6:	ba 12       	cpse	r11, r26
     2c8:	30 c0       	rjmp	.+96     	; 0x32a <Menu2+0x194>
     2ca:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     2ce:	8c e0       	ldi	r24, 0x0C	; 12
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	82 e0       	ldi	r24, 0x02	; 2
     2da:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     2de:	8c e1       	ldi	r24, 0x1C	; 28
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     2e6:	8c e2       	ldi	r24, 0x2C	; 44
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     2ee:	41 e3       	ldi	r20, 0x31	; 49
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	82 ea       	ldi	r24, 0xA2	; 162
     2f4:	0e 94 29 08 	call	0x1052	; 0x1052 <EEPROM_WriteByte>
     2f8:	bf ef       	ldi	r27, 0xFF	; 255
     2fa:	e0 e7       	ldi	r30, 0x70	; 112
     2fc:	f2 e0       	ldi	r31, 0x02	; 2
     2fe:	b1 50       	subi	r27, 0x01	; 1
     300:	e0 40       	sbci	r30, 0x00	; 0
     302:	f0 40       	sbci	r31, 0x00	; 0
     304:	e1 f7       	brne	.-8      	; 0x2fe <Menu2+0x168>
     306:	00 c0       	rjmp	.+0      	; 0x308 <Menu2+0x172>
     308:	00 00       	nop
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	88 e0       	ldi	r24, 0x08	; 8
     30e:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
     312:	2f ef       	ldi	r18, 0xFF	; 255
     314:	8d e2       	ldi	r24, 0x2D	; 45
     316:	92 e2       	ldi	r25, 0x22	; 34
     318:	21 50       	subi	r18, 0x01	; 1
     31a:	80 40       	sbci	r24, 0x00	; 0
     31c:	90 40       	sbci	r25, 0x00	; 0
     31e:	e1 f7       	brne	.-8      	; 0x318 <Menu2+0x182>
     320:	00 c0       	rjmp	.+0      	; 0x322 <Menu2+0x18c>
     322:	00 00       	nop
     324:	0e 94 ae 00 	call	0x15c	; 0x15c <ALARM>
     328:	1c c0       	rjmp	.+56     	; 0x362 <Menu2+0x1cc>
     32a:	ba 94       	dec	r11
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	82 e0       	ldi	r24, 0x02	; 2
     330:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     334:	8d e3       	ldi	r24, 0x3D	; 61
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     33c:	8b 2d       	mov	r24, r11
     33e:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
     342:	af ef       	ldi	r26, 0xFF	; 255
     344:	bf e0       	ldi	r27, 0x0F	; 15
     346:	e7 e2       	ldi	r30, 0x27	; 39
     348:	a1 50       	subi	r26, 0x01	; 1
     34a:	b0 40       	sbci	r27, 0x00	; 0
     34c:	e0 40       	sbci	r30, 0x00	; 0
     34e:	e1 f7       	brne	.-8      	; 0x348 <Menu2+0x1b2>
     350:	00 c0       	rjmp	.+0      	; 0x352 <Menu2+0x1bc>
     352:	00 00       	nop
     354:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     358:	50 cf       	rjmp	.-352    	; 0x1fa <Menu2+0x64>
     35a:	fe 01       	movw	r30, r28
     35c:	35 96       	adiw	r30, 0x05	; 5
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	7c cf       	rjmp	.-264    	; 0x25a <Menu2+0xc4>
     362:	28 96       	adiw	r28, 0x08	; 8
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	ff 90       	pop	r15
     378:	ef 90       	pop	r14
     37a:	df 90       	pop	r13
     37c:	cf 90       	pop	r12
     37e:	bf 90       	pop	r11
     380:	9f 90       	pop	r9
     382:	8f 90       	pop	r8
     384:	08 95       	ret

00000386 <Menu1>:
     386:	8f 92       	push	r8
     388:	9f 92       	push	r9
     38a:	af 92       	push	r10
     38c:	bf 92       	push	r11
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	cd b7       	in	r28, 0x3d	; 61
     3a0:	de b7       	in	r29, 0x3e	; 62
     3a2:	28 97       	sbiw	r28, 0x08	; 8
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	de bf       	out	0x3e, r29	; 62
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	cd bf       	out	0x3d, r28	; 61
     3ae:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     3b2:	63 e0       	ldi	r22, 0x03	; 3
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     3ba:	8b e4       	ldi	r24, 0x4B	; 75
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     3c2:	63 e0       	ldi	r22, 0x03	; 3
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     3ca:	86 e5       	ldi	r24, 0x56	; 86
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     3d2:	2f ef       	ldi	r18, 0xFF	; 255
     3d4:	8b e4       	ldi	r24, 0x4B	; 75
     3d6:	9d e1       	ldi	r25, 0x1D	; 29
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	80 40       	sbci	r24, 0x00	; 0
     3dc:	90 40       	sbci	r25, 0x00	; 0
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <Menu1+0x52>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <Menu1+0x5c>
     3e2:	00 00       	nop
     3e4:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     3e8:	80 ea       	ldi	r24, 0xA0	; 160
     3ea:	0e 94 51 00 	call	0xa2	; 0xa2 <Password_Exist>
     3ee:	81 11       	cpse	r24, r1
     3f0:	cb c0       	rjmp	.+406    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
     3f2:	1d 82       	std	Y+5, r1	; 0x05
     3f4:	1e 82       	std	Y+6, r1	; 0x06
     3f6:	1f 82       	std	Y+7, r1	; 0x07
     3f8:	18 86       	std	Y+8, r1	; 0x08
     3fa:	19 82       	std	Y+1, r1	; 0x01
     3fc:	1a 82       	std	Y+2, r1	; 0x02
     3fe:	1b 82       	std	Y+3, r1	; 0x03
     400:	1c 82       	std	Y+4, r1	; 0x04
     402:	8f e5       	ldi	r24, 0x5F	; 95
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     40a:	af ef       	ldi	r26, 0xFF	; 255
     40c:	bb e4       	ldi	r27, 0x4B	; 75
     40e:	ed e1       	ldi	r30, 0x1D	; 29
     410:	a1 50       	subi	r26, 0x01	; 1
     412:	b0 40       	sbci	r27, 0x00	; 0
     414:	e0 40       	sbci	r30, 0x00	; 0
     416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
     41c:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     420:	6e 01       	movw	r12, r28
     422:	f9 e0       	ldi	r31, 0x09	; 9
     424:	cf 0e       	add	r12, r31
     426:	d1 1c       	adc	r13, r1
     428:	80 e7       	ldi	r24, 0x70	; 112
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     430:	5e 01       	movw	r10, r28
     432:	25 e0       	ldi	r18, 0x05	; 5
     434:	a2 0e       	add	r10, r18
     436:	b1 1c       	adc	r11, r1
     438:	75 01       	movw	r14, r10
     43a:	00 e0       	ldi	r16, 0x00	; 0
     43c:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     440:	18 2f       	mov	r17, r24
     442:	88 23       	and	r24, r24
     444:	d1 f0       	breq	.+52     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     446:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	9a e6       	ldi	r25, 0x6A	; 106
     44e:	a3 e0       	ldi	r26, 0x03	; 3
     450:	81 50       	subi	r24, 0x01	; 1
     452:	90 40       	sbci	r25, 0x00	; 0
     454:	a0 40       	sbci	r26, 0x00	; 0
     456:	e1 f7       	brne	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     458:	00 c0       	rjmp	.+0      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     45a:	00 00       	nop
     45c:	6c e0       	ldi	r22, 0x0C	; 12
     45e:	60 0f       	add	r22, r16
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     466:	8a e2       	ldi	r24, 0x2A	; 42
     468:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
     46c:	f7 01       	movw	r30, r14
     46e:	11 93       	st	Z+, r17
     470:	7f 01       	movw	r14, r30
     472:	0f 5f       	subi	r16, 0xFF	; 255
     474:	04 30       	cpi	r16, 0x04	; 4
     476:	19 f0       	breq	.+6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     478:	e1 cf       	rjmp	.-62     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     47a:	04 30       	cpi	r16, 0x04	; 4
     47c:	f8 f2       	brcs	.-66     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     47e:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     482:	8d e7       	ldi	r24, 0x7D	; 125
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     48a:	8e 01       	movw	r16, r28
     48c:	0f 5f       	subi	r16, 0xFF	; 255
     48e:	1f 4f       	sbci	r17, 0xFF	; 255
     490:	48 01       	movw	r8, r16
     492:	e1 2c       	mov	r14, r1
     494:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     498:	f8 2e       	mov	r15, r24
     49a:	88 23       	and	r24, r24
     49c:	d9 f0       	breq	.+54     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     49e:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
     4a2:	ff ef       	ldi	r31, 0xFF	; 255
     4a4:	2a e6       	ldi	r18, 0x6A	; 106
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	f1 50       	subi	r31, 0x01	; 1
     4aa:	20 40       	sbci	r18, 0x00	; 0
     4ac:	80 40       	sbci	r24, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b2:	00 00       	nop
     4b4:	68 e0       	ldi	r22, 0x08	; 8
     4b6:	6e 0d       	add	r22, r14
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     4be:	8a e2       	ldi	r24, 0x2A	; 42
     4c0:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
     4c4:	d4 01       	movw	r26, r8
     4c6:	fd 92       	st	X+, r15
     4c8:	4d 01       	movw	r8, r26
     4ca:	e3 94       	inc	r14
     4cc:	b4 e0       	ldi	r27, 0x04	; 4
     4ce:	eb 16       	cp	r14, r27
     4d0:	21 f0       	breq	.+8      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d2:	e0 cf       	rjmp	.-64     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     4d4:	e3 e0       	ldi	r30, 0x03	; 3
     4d6:	ee 15       	cp	r30, r14
     4d8:	e8 f6       	brcc	.-70     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     4da:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     4de:	f5 01       	movw	r30, r10
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	91 91       	ld	r25, Z+
     4e4:	d8 01       	movw	r26, r16
     4e6:	8d 91       	ld	r24, X+
     4e8:	8d 01       	movw	r16, r26
     4ea:	98 13       	cpse	r25, r24
     4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4ee:	2f 5f       	subi	r18, 0xFF	; 255
     4f0:	ce 16       	cp	r12, r30
     4f2:	df 06       	cpc	r13, r31
     4f4:	b1 f7       	brne	.-20     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4f6:	24 30       	cpi	r18, 0x04	; 4
     4f8:	31 f5       	brne	.+76     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
     4fa:	10 e0       	ldi	r17, 0x00	; 0
     4fc:	f5 01       	movw	r30, r10
     4fe:	41 91       	ld	r20, Z+
     500:	5f 01       	movw	r10, r30
     502:	61 2f       	mov	r22, r17
     504:	80 ea       	ldi	r24, 0xA0	; 160
     506:	0e 94 29 08 	call	0x1052	; 0x1052 <EEPROM_WriteByte>
     50a:	ff ef       	ldi	r31, 0xFF	; 255
     50c:	23 ec       	ldi	r18, 0xC3	; 195
     50e:	89 e0       	ldi	r24, 0x09	; 9
     510:	f1 50       	subi	r31, 0x01	; 1
     512:	20 40       	sbci	r18, 0x00	; 0
     514:	80 40       	sbci	r24, 0x00	; 0
     516:	e1 f7       	brne	.-8      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     518:	00 c0       	rjmp	.+0      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     51a:	00 00       	nop
     51c:	1f 5f       	subi	r17, 0xFF	; 255
     51e:	14 30       	cpi	r17, 0x04	; 4
     520:	69 f7       	brne	.-38     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     522:	86 e8       	ldi	r24, 0x86	; 134
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     52a:	9f ef       	ldi	r25, 0xFF	; 255
     52c:	ab e4       	ldi	r26, 0x4B	; 75
     52e:	bd e1       	ldi	r27, 0x1D	; 29
     530:	91 50       	subi	r25, 0x01	; 1
     532:	a0 40       	sbci	r26, 0x00	; 0
     534:	b0 40       	sbci	r27, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     538:	00 c0       	rjmp	.+0      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     53a:	00 00       	nop
     53c:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     540:	0e 94 cb 00 	call	0x196	; 0x196 <Menu2>
     544:	38 c0       	rjmp	.+112    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     546:	86 e9       	ldi	r24, 0x96	; 150
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     54e:	ef ef       	ldi	r30, 0xFF	; 255
     550:	f3 ec       	ldi	r31, 0xC3	; 195
     552:	29 e0       	ldi	r18, 0x09	; 9
     554:	e1 50       	subi	r30, 0x01	; 1
     556:	f0 40       	sbci	r31, 0x00	; 0
     558:	20 40       	sbci	r18, 0x00	; 0
     55a:	e1 f7       	brne	.-8      	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     55e:	00 00       	nop
     560:	60 e0       	ldi	r22, 0x00	; 0
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     568:	85 ea       	ldi	r24, 0xA5	; 165
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	93 ec       	ldi	r25, 0xC3	; 195
     574:	a9 e0       	ldi	r26, 0x09	; 9
     576:	81 50       	subi	r24, 0x01	; 1
     578:	90 40       	sbci	r25, 0x00	; 0
     57a:	a0 40       	sbci	r26, 0x00	; 0
     57c:	e1 f7       	brne	.-8      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     580:	00 00       	nop
     582:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     586:	50 cf       	rjmp	.-352    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     588:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     58c:	62 e0       	ldi	r22, 0x02	; 2
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     594:	80 eb       	ldi	r24, 0xB0	; 176
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     59c:	bf ef       	ldi	r27, 0xFF	; 255
     59e:	ef e0       	ldi	r30, 0x0F	; 15
     5a0:	f7 e2       	ldi	r31, 0x27	; 39
     5a2:	b1 50       	subi	r27, 0x01	; 1
     5a4:	e0 40       	sbci	r30, 0x00	; 0
     5a6:	f0 40       	sbci	r31, 0x00	; 0
     5a8:	e1 f7       	brne	.-8      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5ac:	00 00       	nop
     5ae:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     5b2:	0e 94 cb 00 	call	0x196	; 0x196 <Menu2>
     5b6:	28 96       	adiw	r28, 0x08	; 8
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	df 90       	pop	r13
     5d0:	cf 90       	pop	r12
     5d2:	bf 90       	pop	r11
     5d4:	af 90       	pop	r10
     5d6:	9f 90       	pop	r9
     5d8:	8f 90       	pop	r8
     5da:	08 95       	ret

000005dc <DoorCheck>:
     5dc:	60 e0       	ldi	r22, 0x00	; 0
     5de:	84 ea       	ldi	r24, 0xA4	; 164
     5e0:	0e 94 49 08 	call	0x1092	; 0x1092 <EEPROM_ReadByte>
     5e4:	2f ef       	ldi	r18, 0xFF	; 255
     5e6:	30 e7       	ldi	r19, 0x70	; 112
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	21 50       	subi	r18, 0x01	; 1
     5ec:	30 40       	sbci	r19, 0x00	; 0
     5ee:	90 40       	sbci	r25, 0x00	; 0
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <DoorCheck+0xe>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <DoorCheck+0x18>
     5f4:	00 00       	nop
     5f6:	8f 3f       	cpi	r24, 0xFF	; 255
     5f8:	21 f0       	breq	.+8      	; 0x602 <DoorCheck+0x26>
     5fa:	8a e5       	ldi	r24, 0x5A	; 90
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 05 0a 	call	0x140a	; 0x140a <ServoMotor>
     602:	08 95       	ret

00000604 <AdminMenu>:
     604:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     608:	8d eb       	ldi	r24, 0xBD	; 189
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     610:	8b ec       	ldi	r24, 0xCB	; 203
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     618:	8c ee       	ldi	r24, 0xEC	; 236
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     620:	89 e1       	ldi	r24, 0x19	; 25
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     628:	0e 94 26 08 	call	0x104c	; 0x104c <Bluetooth_Receive>
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	fc 01       	movw	r30, r24
     630:	f1 97       	sbiw	r30, 0x31	; 49
     632:	e8 30       	cpi	r30, 0x08	; 8
     634:	f1 05       	cpc	r31, r1
     636:	c0 f7       	brcc	.-16     	; 0x628 <AdminMenu+0x24>
     638:	e6 5d       	subi	r30, 0xD6	; 214
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <__tablejump2__>
     640:	81 e3       	ldi	r24, 0x31	; 49
     642:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     646:	8f 34       	cpi	r24, 0x4F	; 79
     648:	41 f4       	brne	.+16     	; 0x65a <AdminMenu+0x56>
     64a:	83 e5       	ldi	r24, 0x53	; 83
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     652:	81 e2       	ldi	r24, 0x21	; 33
     654:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     658:	e7 cf       	rjmp	.-50     	; 0x628 <AdminMenu+0x24>
     65a:	86 34       	cpi	r24, 0x46	; 70
     65c:	29 f7       	brne	.-54     	; 0x628 <AdminMenu+0x24>
     65e:	86 e6       	ldi	r24, 0x66	; 102
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     666:	81 e1       	ldi	r24, 0x11	; 17
     668:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     66c:	dd cf       	rjmp	.-70     	; 0x628 <AdminMenu+0x24>
     66e:	82 e3       	ldi	r24, 0x32	; 50
     670:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     674:	8f 34       	cpi	r24, 0x4F	; 79
     676:	41 f4       	brne	.+16     	; 0x688 <AdminMenu+0x84>
     678:	82 e2       	ldi	r24, 0x22	; 34
     67a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     67e:	83 e5       	ldi	r24, 0x53	; 83
     680:	92 e0       	ldi	r25, 0x02	; 2
     682:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     686:	d0 cf       	rjmp	.-96     	; 0x628 <AdminMenu+0x24>
     688:	86 34       	cpi	r24, 0x46	; 70
     68a:	71 f6       	brne	.-100    	; 0x628 <AdminMenu+0x24>
     68c:	82 e1       	ldi	r24, 0x12	; 18
     68e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     692:	86 e6       	ldi	r24, 0x66	; 102
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     69a:	c6 cf       	rjmp	.-116    	; 0x628 <AdminMenu+0x24>
     69c:	86 e3       	ldi	r24, 0x36	; 54
     69e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     6a2:	8f 34       	cpi	r24, 0x4F	; 79
     6a4:	41 f4       	brne	.+16     	; 0x6b6 <AdminMenu+0xb2>
     6a6:	86 e2       	ldi	r24, 0x26	; 38
     6a8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     6ac:	88 e7       	ldi	r24, 0x78	; 120
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     6b4:	b9 cf       	rjmp	.-142    	; 0x628 <AdminMenu+0x24>
     6b6:	86 34       	cpi	r24, 0x46	; 70
     6b8:	09 f0       	breq	.+2      	; 0x6bc <AdminMenu+0xb8>
     6ba:	b6 cf       	rjmp	.-148    	; 0x628 <AdminMenu+0x24>
     6bc:	86 e1       	ldi	r24, 0x16	; 22
     6be:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     6c2:	88 e1       	ldi	r24, 0x18	; 24
     6c4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     6c8:	86 e9       	ldi	r24, 0x96	; 150
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     6d0:	ab cf       	rjmp	.-170    	; 0x628 <AdminMenu+0x24>
     6d2:	83 e3       	ldi	r24, 0x33	; 51
     6d4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     6d8:	8f 34       	cpi	r24, 0x4F	; 79
     6da:	41 f4       	brne	.+16     	; 0x6ec <AdminMenu+0xe8>
     6dc:	83 e2       	ldi	r24, 0x23	; 35
     6de:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     6e2:	83 e5       	ldi	r24, 0x53	; 83
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     6ea:	9e cf       	rjmp	.-196    	; 0x628 <AdminMenu+0x24>
     6ec:	86 34       	cpi	r24, 0x46	; 70
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <AdminMenu+0xee>
     6f0:	9b cf       	rjmp	.-202    	; 0x628 <AdminMenu+0x24>
     6f2:	83 e1       	ldi	r24, 0x13	; 19
     6f4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     6f8:	86 e6       	ldi	r24, 0x66	; 102
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     700:	93 cf       	rjmp	.-218    	; 0x628 <AdminMenu+0x24>
     702:	84 e3       	ldi	r24, 0x34	; 52
     704:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     708:	8f 34       	cpi	r24, 0x4F	; 79
     70a:	41 f4       	brne	.+16     	; 0x71c <AdminMenu+0x118>
     70c:	84 e2       	ldi	r24, 0x24	; 36
     70e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     712:	83 e5       	ldi	r24, 0x53	; 83
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     71a:	86 cf       	rjmp	.-244    	; 0x628 <AdminMenu+0x24>
     71c:	86 34       	cpi	r24, 0x46	; 70
     71e:	09 f0       	breq	.+2      	; 0x722 <AdminMenu+0x11e>
     720:	83 cf       	rjmp	.-250    	; 0x628 <AdminMenu+0x24>
     722:	84 e1       	ldi	r24, 0x14	; 20
     724:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     728:	86 e6       	ldi	r24, 0x66	; 102
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     730:	7b cf       	rjmp	.-266    	; 0x628 <AdminMenu+0x24>
     732:	85 e3       	ldi	r24, 0x35	; 53
     734:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     738:	8f 34       	cpi	r24, 0x4F	; 79
     73a:	41 f4       	brne	.+16     	; 0x74c <AdminMenu+0x148>
     73c:	85 e2       	ldi	r24, 0x25	; 37
     73e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     742:	83 e5       	ldi	r24, 0x53	; 83
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     74a:	6e cf       	rjmp	.-292    	; 0x628 <AdminMenu+0x24>
     74c:	86 34       	cpi	r24, 0x46	; 70
     74e:	09 f0       	breq	.+2      	; 0x752 <AdminMenu+0x14e>
     750:	6b cf       	rjmp	.-298    	; 0x628 <AdminMenu+0x24>
     752:	85 e1       	ldi	r24, 0x15	; 21
     754:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     758:	86 e6       	ldi	r24, 0x66	; 102
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     760:	63 cf       	rjmp	.-314    	; 0x628 <AdminMenu+0x24>
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	84 ea       	ldi	r24, 0xA4	; 164
     766:	0e 94 49 08 	call	0x1092	; 0x1092 <EEPROM_ReadByte>
     76a:	8f 3f       	cpi	r24, 0xFF	; 255
     76c:	b9 f4       	brne	.+46     	; 0x79c <AdminMenu+0x198>
     76e:	83 eb       	ldi	r24, 0xB3	; 179
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <UART_TransmaitString>
     776:	8a e5       	ldi	r24, 0x5A	; 90
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 05 0a 	call	0x140a	; 0x140a <ServoMotor>
     77e:	41 e3       	ldi	r20, 0x31	; 49
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	84 ea       	ldi	r24, 0xA4	; 164
     784:	0e 94 29 08 	call	0x1052	; 0x1052 <EEPROM_WriteByte>
     788:	2f ef       	ldi	r18, 0xFF	; 255
     78a:	83 ec       	ldi	r24, 0xC3	; 195
     78c:	99 e0       	ldi	r25, 0x09	; 9
     78e:	21 50       	subi	r18, 0x01	; 1
     790:	80 40       	sbci	r24, 0x00	; 0
     792:	90 40       	sbci	r25, 0x00	; 0
     794:	e1 f7       	brne	.-8      	; 0x78e <AdminMenu+0x18a>
     796:	00 c0       	rjmp	.+0      	; 0x798 <AdminMenu+0x194>
     798:	00 00       	nop
     79a:	46 cf       	rjmp	.-372    	; 0x628 <AdminMenu+0x24>
     79c:	88 ec       	ldi	r24, 0xC8	; 200
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <UART_TransmaitString>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 05 0a 	call	0x140a	; 0x140a <ServoMotor>
     7ac:	4f ef       	ldi	r20, 0xFF	; 255
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	84 ea       	ldi	r24, 0xA4	; 164
     7b2:	0e 94 29 08 	call	0x1052	; 0x1052 <EEPROM_WriteByte>
     7b6:	2f ef       	ldi	r18, 0xFF	; 255
     7b8:	83 ec       	ldi	r24, 0xC3	; 195
     7ba:	99 e0       	ldi	r25, 0x09	; 9
     7bc:	21 50       	subi	r18, 0x01	; 1
     7be:	80 40       	sbci	r24, 0x00	; 0
     7c0:	90 40       	sbci	r25, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <AdminMenu+0x1b8>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <AdminMenu+0x1c2>
     7c6:	00 00       	nop
     7c8:	2f cf       	rjmp	.-418    	; 0x628 <AdminMenu+0x24>
     7ca:	8d ed       	ldi	r24, 0xDD	; 221
     7cc:	92 e0       	ldi	r25, 0x02	; 2
     7ce:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
     7d2:	0e 94 c3 01 	call	0x386	; 0x386 <Menu1>
     7d6:	08 95       	ret

000007d8 <MainMenu>:
     7d8:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     7dc:	83 ef       	ldi	r24, 0xF3	; 243
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
     7ec:	84 e0       	ldi	r24, 0x04	; 4
     7ee:	93 e0       	ldi	r25, 0x03	; 3
     7f0:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     7f4:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     7f8:	88 23       	and	r24, r24
     7fa:	e1 f3       	breq	.-8      	; 0x7f4 <MainMenu+0x1c>
     7fc:	82 33       	cpi	r24, 0x32	; 50
     7fe:	49 f0       	breq	.+18     	; 0x812 <MainMenu+0x3a>
     800:	83 33       	cpi	r24, 0x33	; 51
     802:	61 f0       	breq	.+24     	; 0x81c <MainMenu+0x44>
     804:	81 33       	cpi	r24, 0x31	; 49
     806:	99 f4       	brne	.+38     	; 0x82e <MainMenu+0x56>
     808:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     80c:	0e 94 2b 04 	call	0x856	; 0x856 <ROOM1>
     810:	f1 cf       	rjmp	.-30     	; 0x7f4 <MainMenu+0x1c>
     812:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     816:	0e 94 57 06 	call	0xcae	; 0xcae <ROOM2>
     81a:	ec cf       	rjmp	.-40     	; 0x7f4 <MainMenu+0x1c>
     81c:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     820:	8d eb       	ldi	r24, 0xBD	; 189
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     828:	0e 94 02 03 	call	0x604	; 0x604 <AdminMenu>
     82c:	e3 cf       	rjmp	.-58     	; 0x7f4 <MainMenu+0x1c>
     82e:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     832:	8c e0       	ldi	r24, 0x0C	; 12
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     83a:	2f ef       	ldi	r18, 0xFF	; 255
     83c:	89 e6       	ldi	r24, 0x69	; 105
     83e:	98 e1       	ldi	r25, 0x18	; 24
     840:	21 50       	subi	r18, 0x01	; 1
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	90 40       	sbci	r25, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <MainMenu+0x68>
     848:	00 c0       	rjmp	.+0      	; 0x84a <MainMenu+0x72>
     84a:	00 00       	nop
     84c:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     850:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     854:	08 95       	ret

00000856 <ROOM1>:
		//Do nothing
	}
}

void ROOM1(void)
{
     856:	bf 92       	push	r11
     858:	cf 92       	push	r12
     85a:	df 92       	push	r13
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
     868:	d0 e0       	ldi	r29, 0x00	; 0
     86a:	12 e0       	ldi	r17, 0x02	; 2
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     86c:	f1 2e       	mov	r15, r17
							_delay_ms(100);
							switch(Key)
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
     86e:	0d 2f       	mov	r16, r29
     870:	ed 2e       	mov	r14, r29
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     872:	d1 2e       	mov	r13, r17

void ROOM1(void)
{
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
     874:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
	LCD_String("1:Lamp1 2:Lamp2");
     878:	82 ec       	ldi	r24, 0xC2	; 194
     87a:	93 e0       	ldi	r25, 0x03	; 3
     87c:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
	LCD_SetPos(2,0);
     880:	6d 2f       	mov	r22, r29
     882:	81 2f       	mov	r24, r17
     884:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
	LCD_String("3:AirConditioner");
     888:	82 ed       	ldi	r24, 0xD2	; 210
     88a:	93 e0       	ldi	r25, 0x03	; 3
     88c:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
	
	while(Key == STD_Low)
	{
		Key = GetKey();
     890:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
		if (Key != STD_Low)
     894:	88 23       	and	r24, r24
     896:	e1 f3       	breq	.-8      	; 0x890 <__stack+0x31>
		{
			switch(Key)
     898:	82 33       	cpi	r24, 0x32	; 50
     89a:	09 f4       	brne	.+2      	; 0x89e <__stack+0x3f>
     89c:	8c c0       	rjmp	.+280    	; 0x9b6 <__stack+0x157>
     89e:	83 33       	cpi	r24, 0x33	; 51
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <__stack+0x45>
     8a2:	0f c1       	rjmp	.+542    	; 0xac2 <__stack+0x263>
     8a4:	81 33       	cpi	r24, 0x31	; 49
     8a6:	09 f0       	breq	.+2      	; 0x8aa <__stack+0x4b>
     8a8:	e5 c1       	rjmp	.+970    	; 0xc74 <__stack+0x415>
			{
				case '1':
				LCD_Clear();
     8aa:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ae:	2f ef       	ldi	r18, 0xFF	; 255
     8b0:	80 e7       	ldi	r24, 0x70	; 112
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	21 50       	subi	r18, 0x01	; 1
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <__stack+0x55>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <__stack+0x5f>
     8be:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led1);
     8c0:	81 e3       	ldi	r24, 0x31	; 49
     8c2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	80 e7       	ldi	r24, 0x70	; 112
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	80 40       	sbci	r24, 0x00	; 0
     8d0:	90 40       	sbci	r25, 0x00	; 0
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <__stack+0x6d>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <__stack+0x77>
     8d6:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
				if(Slave_Status == On)
     8de:	8f 34       	cpi	r24, 0x4F	; 79
     8e0:	89 f5       	brne	.+98     	; 0x944 <__stack+0xe5>
				{
					LCD_Clear();
     8e2:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Led is On!");
     8e6:	83 ee       	ldi	r24, 0xE3	; 227
     8e8:	93 e0       	ldi	r25, 0x03	; 3
     8ea:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     8ee:	60 2f       	mov	r22, r16
     8f0:	8f 2d       	mov	r24, r15
     8f2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     8f6:	8e ee       	ldi	r24, 0xEE	; 238
     8f8:	93 e0       	ldi	r25, 0x03	; 3
     8fa:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     8fe:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     902:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     904:	88 23       	and	r24, r24
     906:	d9 f3       	breq	.-10     	; 0x8fe <__stack+0x9f>
     908:	2f ef       	ldi	r18, 0xFF	; 255
     90a:	81 ee       	ldi	r24, 0xE1	; 225
     90c:	94 e0       	ldi	r25, 0x04	; 4
     90e:	21 50       	subi	r18, 0x01	; 1
     910:	80 40       	sbci	r24, 0x00	; 0
     912:	90 40       	sbci	r25, 0x00	; 0
     914:	e1 f7       	brne	.-8      	; 0x90e <__stack+0xaf>
     916:	00 c0       	rjmp	.+0      	; 0x918 <__stack+0xb9>
     918:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     91a:	c1 33       	cpi	r28, 0x31	; 49
     91c:	19 f0       	breq	.+6      	; 0x924 <__stack+0xc5>
     91e:	c2 33       	cpi	r28, 0x32	; 50
     920:	59 f0       	breq	.+22     	; 0x938 <__stack+0xd9>
     922:	44 c0       	rjmp	.+136    	; 0x9ac <__stack+0x14d>
							{
								case '1':
								SPI_TxRx(Led1_TurnOff);
     924:	81 e2       	ldi	r24, 0x21	; 33
     926:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room1 is Off now!");
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	93 e0       	ldi	r25, 0x03	; 3
     92e:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     932:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     936:	e3 cf       	rjmp	.-58     	; 0x8fe <__stack+0x9f>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     938:	89 e9       	ldi	r24, 0x99	; 153
     93a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								MainMenu();
     93e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     942:	34 c0       	rjmp	.+104    	; 0x9ac <__stack+0x14d>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     944:	86 34       	cpi	r24, 0x46	; 70
     946:	89 f5       	brne	.+98     	; 0x9aa <__stack+0x14b>
				{
					LCD_Clear();
     948:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Led is Off!");
     94c:	88 e1       	ldi	r24, 0x18	; 24
     94e:	94 e0       	ldi	r25, 0x04	; 4
     950:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     954:	60 2f       	mov	r22, r16
     956:	8f 2d       	mov	r24, r15
     958:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     95c:	84 e2       	ldi	r24, 0x24	; 36
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     964:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     968:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     96a:	88 23       	and	r24, r24
     96c:	d9 f3       	breq	.-10     	; 0x964 <__stack+0x105>
     96e:	2f ef       	ldi	r18, 0xFF	; 255
     970:	81 ee       	ldi	r24, 0xE1	; 225
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	21 50       	subi	r18, 0x01	; 1
     976:	80 40       	sbci	r24, 0x00	; 0
     978:	90 40       	sbci	r25, 0x00	; 0
     97a:	e1 f7       	brne	.-8      	; 0x974 <__stack+0x115>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <__stack+0x11f>
     97e:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     980:	c1 33       	cpi	r28, 0x31	; 49
     982:	19 f0       	breq	.+6      	; 0x98a <__stack+0x12b>
     984:	c2 33       	cpi	r28, 0x32	; 50
     986:	59 f0       	breq	.+22     	; 0x99e <__stack+0x13f>
     988:	11 c0       	rjmp	.+34     	; 0x9ac <__stack+0x14d>
							{
								case '1':
								SPI_TxRx(Led1_TurnOn);
     98a:	81 e1       	ldi	r24, 0x11	; 17
     98c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room1 is on now!");
     990:	84 e3       	ldi	r24, 0x34	; 52
     992:	94 e0       	ldi	r25, 0x04	; 4
     994:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     998:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     99c:	e3 cf       	rjmp	.-58     	; 0x964 <__stack+0x105>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     99e:	89 e9       	ldi	r24, 0x99	; 153
     9a0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								MainMenu();
     9a4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <__stack+0x14d>
		{
			switch(Key)
			{
				case '1':
				LCD_Clear();
				Key = STD_Low;
     9aa:	c0 2f       	mov	r28, r16
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     9ac:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
				MainMenu();
     9b0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
				break;
     9b4:	6f c1       	rjmp	.+734    	; 0xc94 <__stack+0x435>
				
				
				case '2':
				LCD_Clear();
     9b6:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     9ba:	2f ef       	ldi	r18, 0xFF	; 255
     9bc:	80 e7       	ldi	r24, 0x70	; 112
     9be:	92 e0       	ldi	r25, 0x02	; 2
     9c0:	21 50       	subi	r18, 0x01	; 1
     9c2:	80 40       	sbci	r24, 0x00	; 0
     9c4:	90 40       	sbci	r25, 0x00	; 0
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <__stack+0x161>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <__stack+0x16b>
     9ca:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led2);
     9cc:	82 e3       	ldi	r24, 0x32	; 50
     9ce:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     9d2:	2f ef       	ldi	r18, 0xFF	; 255
     9d4:	80 e7       	ldi	r24, 0x70	; 112
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	21 50       	subi	r18, 0x01	; 1
     9da:	80 40       	sbci	r24, 0x00	; 0
     9dc:	90 40       	sbci	r25, 0x00	; 0
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <__stack+0x179>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <__stack+0x183>
     9e2:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
				if(Slave_Status == On)
     9ea:	8f 34       	cpi	r24, 0x4F	; 79
     9ec:	89 f5       	brne	.+98     	; 0xa50 <__stack+0x1f1>
				{
					LCD_Clear();
     9ee:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Led is On!");
     9f2:	83 ee       	ldi	r24, 0xE3	; 227
     9f4:	93 e0       	ldi	r25, 0x03	; 3
     9f6:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     9fa:	60 2f       	mov	r22, r16
     9fc:	8f 2d       	mov	r24, r15
     9fe:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     a02:	8e ee       	ldi	r24, 0xEE	; 238
     a04:	93 e0       	ldi	r25, 0x03	; 3
     a06:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     a0a:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     a0e:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     a10:	88 23       	and	r24, r24
     a12:	d9 f3       	breq	.-10     	; 0xa0a <__stack+0x1ab>
     a14:	2f ef       	ldi	r18, 0xFF	; 255
     a16:	81 ee       	ldi	r24, 0xE1	; 225
     a18:	94 e0       	ldi	r25, 0x04	; 4
     a1a:	21 50       	subi	r18, 0x01	; 1
     a1c:	80 40       	sbci	r24, 0x00	; 0
     a1e:	90 40       	sbci	r25, 0x00	; 0
     a20:	e1 f7       	brne	.-8      	; 0xa1a <__stack+0x1bb>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <__stack+0x1c5>
     a24:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     a26:	c1 33       	cpi	r28, 0x31	; 49
     a28:	19 f0       	breq	.+6      	; 0xa30 <__stack+0x1d1>
     a2a:	c2 33       	cpi	r28, 0x32	; 50
     a2c:	59 f0       	breq	.+22     	; 0xa44 <__stack+0x1e5>
     a2e:	44 c0       	rjmp	.+136    	; 0xab8 <__stack+0x259>
							{
								case '1':
								SPI_TxRx(Led2_TurnOff);
     a30:	82 e2       	ldi	r24, 0x22	; 34
     a32:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room1 is Off now!");
     a36:	8c e4       	ldi	r24, 0x4C	; 76
     a38:	94 e0       	ldi	r25, 0x04	; 4
     a3a:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     a3e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     a42:	e3 cf       	rjmp	.-58     	; 0xa0a <__stack+0x1ab>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     a44:	89 e9       	ldi	r24, 0x99	; 153
     a46:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								MainMenu();
     a4a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     a4e:	34 c0       	rjmp	.+104    	; 0xab8 <__stack+0x259>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     a50:	86 34       	cpi	r24, 0x46	; 70
     a52:	89 f5       	brne	.+98     	; 0xab6 <__stack+0x257>
				{
					LCD_Clear();
     a54:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Led is Off!");
     a58:	88 e1       	ldi	r24, 0x18	; 24
     a5a:	94 e0       	ldi	r25, 0x04	; 4
     a5c:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     a60:	60 2f       	mov	r22, r16
     a62:	8f 2d       	mov	r24, r15
     a64:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     a68:	84 e2       	ldi	r24, 0x24	; 36
     a6a:	94 e0       	ldi	r25, 0x04	; 4
     a6c:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     a70:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     a74:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     a76:	88 23       	and	r24, r24
     a78:	d9 f3       	breq	.-10     	; 0xa70 <__stack+0x211>
     a7a:	2f ef       	ldi	r18, 0xFF	; 255
     a7c:	81 ee       	ldi	r24, 0xE1	; 225
     a7e:	94 e0       	ldi	r25, 0x04	; 4
     a80:	21 50       	subi	r18, 0x01	; 1
     a82:	80 40       	sbci	r24, 0x00	; 0
     a84:	90 40       	sbci	r25, 0x00	; 0
     a86:	e1 f7       	brne	.-8      	; 0xa80 <__stack+0x221>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <__stack+0x22b>
     a8a:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     a8c:	c1 33       	cpi	r28, 0x31	; 49
     a8e:	19 f0       	breq	.+6      	; 0xa96 <__stack+0x237>
     a90:	c2 33       	cpi	r28, 0x32	; 50
     a92:	59 f0       	breq	.+22     	; 0xaaa <__stack+0x24b>
     a94:	11 c0       	rjmp	.+34     	; 0xab8 <__stack+0x259>
							{
								case '1':
								SPI_TxRx(Led2_TurnOn);
     a96:	82 e1       	ldi	r24, 0x12	; 18
     a98:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room1 is on now!");
     a9c:	85 e6       	ldi	r24, 0x65	; 101
     a9e:	94 e0       	ldi	r25, 0x04	; 4
     aa0:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     aa4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
								break;
     aa8:	e3 cf       	rjmp	.-58     	; 0xa70 <__stack+0x211>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     aaa:	89 e9       	ldi	r24, 0x99	; 153
     aac:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Key = STD_Low;
								MainMenu();
     ab0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
								break;
     ab4:	dd cf       	rjmp	.-70     	; 0xa70 <__stack+0x211>
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     ab6:	c0 2f       	mov	r28, r16
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     ab8:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
				MainMenu();
     abc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
				break;
     ac0:	e9 c0       	rjmp	.+466    	; 0xc94 <__stack+0x435>
				
				case '3':
				LCD_Clear();
     ac2:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     ac6:	2f ef       	ldi	r18, 0xFF	; 255
     ac8:	80 e7       	ldi	r24, 0x70	; 112
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	21 50       	subi	r18, 0x01	; 1
     ace:	80 40       	sbci	r24, 0x00	; 0
     ad0:	90 40       	sbci	r25, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <__stack+0x26d>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <__stack+0x277>
     ad6:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Air_Cond);
     ad8:	86 e3       	ldi	r24, 0x36	; 54
     ada:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     ade:	2f ef       	ldi	r18, 0xFF	; 255
     ae0:	80 e7       	ldi	r24, 0x70	; 112
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	21 50       	subi	r18, 0x01	; 1
     ae6:	80 40       	sbci	r24, 0x00	; 0
     ae8:	90 40       	sbci	r25, 0x00	; 0
     aea:	e1 f7       	brne	.-8      	; 0xae4 <__stack+0x285>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <__stack+0x28f>
     aee:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
				if(Slave_Status == On)
     af6:	8f 34       	cpi	r24, 0x4F	; 79
     af8:	89 f5       	brne	.+98     	; 0xb5c <__stack+0x2fd>
				{
					LCD_Clear();
     afa:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Air-Cond is On!");
     afe:	8d e7       	ldi	r24, 0x7D	; 125
     b00:	94 e0       	ldi	r25, 0x04	; 4
     b02:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     b06:	60 2f       	mov	r22, r16
     b08:	8f 2d       	mov	r24, r15
     b0a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     b0e:	8e ee       	ldi	r24, 0xEE	; 238
     b10:	93 e0       	ldi	r25, 0x03	; 3
     b12:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     b16:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     b1a:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     b1c:	88 23       	and	r24, r24
     b1e:	d9 f3       	breq	.-10     	; 0xb16 <__stack+0x2b7>
     b20:	2f ef       	ldi	r18, 0xFF	; 255
     b22:	81 ee       	ldi	r24, 0xE1	; 225
     b24:	94 e0       	ldi	r25, 0x04	; 4
     b26:	21 50       	subi	r18, 0x01	; 1
     b28:	80 40       	sbci	r24, 0x00	; 0
     b2a:	90 40       	sbci	r25, 0x00	; 0
     b2c:	e1 f7       	brne	.-8      	; 0xb26 <__stack+0x2c7>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <__stack+0x2d1>
     b30:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     b32:	c1 33       	cpi	r28, 0x31	; 49
     b34:	19 f0       	breq	.+6      	; 0xb3c <__stack+0x2dd>
     b36:	c2 33       	cpi	r28, 0x32	; 50
     b38:	59 f0       	breq	.+22     	; 0xb50 <__stack+0x2f1>
     b3a:	97 c0       	rjmp	.+302    	; 0xc6a <__stack+0x40b>
							{
								case '1':
								SPI_TxRx(Air_Cond_TurnOff);
     b3c:	86 e2       	ldi	r24, 0x26	; 38
     b3e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nAir conditioner,Room1 is Off now!");
     b42:	8d e8       	ldi	r24, 0x8D	; 141
     b44:	94 e0       	ldi	r25, 0x04	; 4
     b46:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     b4a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     b4e:	e3 cf       	rjmp	.-58     	; 0xb16 <__stack+0x2b7>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     b50:	89 e9       	ldi	r24, 0x99	; 153
     b52:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								MainMenu();
     b56:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     b5a:	87 c0       	rjmp	.+270    	; 0xc6a <__stack+0x40b>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     b5c:	86 34       	cpi	r24, 0x46	; 70
     b5e:	09 f0       	breq	.+2      	; 0xb62 <__stack+0x303>
     b60:	83 c0       	rjmp	.+262    	; 0xc68 <__stack+0x409>
				{
					LCD_Clear();
     b62:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Air-Cond is Off!");
     b66:	80 eb       	ldi	r24, 0xB0	; 176
     b68:	94 e0       	ldi	r25, 0x04	; 4
     b6a:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     b6e:	60 2f       	mov	r22, r16
     b70:	8f 2d       	mov	r24, r15
     b72:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     b76:	84 e2       	ldi	r24, 0x24	; 36
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     b7e:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     b82:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     b84:	88 23       	and	r24, r24
     b86:	d9 f3       	breq	.-10     	; 0xb7e <__stack+0x31f>
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	81 ee       	ldi	r24, 0xE1	; 225
     b8c:	94 e0       	ldi	r25, 0x04	; 4
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <__stack+0x32f>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <__stack+0x339>
     b98:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     b9a:	c1 33       	cpi	r28, 0x31	; 49
     b9c:	21 f0       	breq	.+8      	; 0xba6 <__stack+0x347>
     b9e:	c2 33       	cpi	r28, 0x32	; 50
     ba0:	09 f4       	brne	.+2      	; 0xba4 <__stack+0x345>
     ba2:	58 c0       	rjmp	.+176    	; 0xc54 <__stack+0x3f5>
     ba4:	5d c0       	rjmp	.+186    	; 0xc60 <__stack+0x401>
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
								LCD_Clear();
     ba6:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
								LCD_String("Set Temp:__");
     baa:	81 ec       	ldi	r24, 0xC1	; 193
     bac:	94 e0       	ldi	r25, 0x04	; 4
     bae:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
								LCD_Custome_Char(1,customChar); //Degree symbol
     bb2:	60 e6       	ldi	r22, 0x60	; 96
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <LCD_Custome_Char>
								LCD_SetPos(1,11);
     bbc:	6b e0       	ldi	r22, 0x0B	; 11
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
								LCD_Char(1);
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
								LCD_Char('C');
     bca:	83 e4       	ldi	r24, 0x43	; 67
     bcc:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
								LCD_SetPos(1,9);
     bd0:	69 e0       	ldi	r22, 0x09	; 9
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
							_delay_ms(100);
							switch(Key)
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
     bd8:	bb 24       	eor	r11, r11
     bda:	b3 94       	inc	r11
     bdc:	ce 2c       	mov	r12, r14
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     bde:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     be2:	c8 2f       	mov	r28, r24
									if((Key != STD_Low) && (Counter == 1))
     be4:	88 23       	and	r24, r24
     be6:	89 f0       	breq	.+34     	; 0xc0a <__stack+0x3ab>
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	b2 12       	cpse	r11, r18
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <__stack+0x399>
									{
										Tenth = Key;
										LCD_Char(Tenth);
     bee:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     bf2:	cc 2e       	mov	r12, r28
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     bf4:	bd 2c       	mov	r11, r13
     bf6:	f3 cf       	rjmp	.-26     	; 0xbde <__stack+0x37f>
									}
									else if((Key != STD_Low) && (Counter == 2))
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	b8 12       	cpse	r11, r24
     bfc:	0a c0       	rjmp	.+20     	; 0xc12 <__stack+0x3b3>
									{
										Ones = Key;
										LCD_Char(Ones);
     bfe:	8c 2f       	mov	r24, r28
     c00:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     c04:	8c 2f       	mov	r24, r28
										Counter++;
									}
									else if((Key != STD_Low) && (Counter == 2))
									{
										Ones = Key;
										LCD_Char(Ones);
     c06:	ce 2d       	mov	r28, r14
     c08:	05 c0       	rjmp	.+10     	; 0xc14 <__stack+0x3b5>
								LCD_Custome_Char(1,customChar); //Degree symbol
								LCD_SetPos(1,11);
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	9b 15       	cp	r25, r11
     c0e:	38 f7       	brcc	.-50     	; 0xbde <__stack+0x37f>
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <__stack+0x3b5>
     c12:	8e 2d       	mov	r24, r14
									else
									{
										//Do Nothing
									}
								}
								Temperature = (unsigned char)((((unsigned char)Tenth - '0') * 10) + (Ones - '0'));
     c14:	9c 2d       	mov	r25, r12
     c16:	99 0f       	add	r25, r25
     c18:	90 56       	subi	r25, 0x60	; 96
     c1a:	c9 2e       	mov	r12, r25
     c1c:	cc 0c       	add	r12, r12
     c1e:	cc 0c       	add	r12, r12
     c20:	9c 0d       	add	r25, r12
     c22:	80 53       	subi	r24, 0x30	; 48
     c24:	c9 2e       	mov	r12, r25
     c26:	c8 0e       	add	r12, r24
     c28:	2f ef       	ldi	r18, 0xFF	; 255
     c2a:	81 ee       	ldi	r24, 0xE1	; 225
     c2c:	94 e0       	ldi	r25, 0x04	; 4
     c2e:	21 50       	subi	r18, 0x01	; 1
     c30:	80 40       	sbci	r24, 0x00	; 0
     c32:	90 40       	sbci	r25, 0x00	; 0
     c34:	e1 f7       	brne	.-8      	; 0xc2e <__stack+0x3cf>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <__stack+0x3d9>
     c38:	00 00       	nop
								_delay_ms(100);
								SPI_TxRx(Air_Cond_TurnOn);
     c3a:	86 e1       	ldi	r24, 0x16	; 22
     c3c:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nAir conditioner,Room1 is on now!");
     c40:	8d ec       	ldi	r24, 0xCD	; 205
     c42:	94 e0       	ldi	r25, 0x04	; 4
     c44:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								SPI_TxRx(Temperature);
     c48:	8c 2d       	mov	r24, r12
     c4a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								MainMenu();
     c4e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
								break;
     c52:	06 c0       	rjmp	.+12     	; 0xc60 <__stack+0x401>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     c54:	89 e9       	ldi	r24, 0x99	; 153
     c56:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Key = STD_Low;
								MainMenu();
     c5a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     c5e:	8f cf       	rjmp	.-226    	; 0xb7e <__stack+0x31f>
					LCD_Clear();
					LCD_String("Air-Cond is Off!");
					LCD_SetPos(2,0);
					LCD_String("1:TurnOn 2:back");
					
					while(Key == STD_Low)
     c60:	cc 23       	and	r28, r28
     c62:	09 f4       	brne	.+2      	; 0xc66 <__stack+0x407>
     c64:	8c cf       	rjmp	.-232    	; 0xb7e <__stack+0x31f>
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <__stack+0x40b>
				MainMenu();
				break;
				
				case '3':
				LCD_Clear();
				Key = STD_Low;
     c68:	c0 2f       	mov	r28, r16
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     c6a:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
				MainMenu();
     c6e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
				break;
     c72:	10 c0       	rjmp	.+32     	; 0xc94 <__stack+0x435>
				
				default:
				LCD_Clear();
     c74:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
				LCD_String("Wrong choice!");
     c78:	86 e7       	ldi	r24, 0x76	; 118
     c7a:	93 e0       	ldi	r25, 0x03	; 3
     c7c:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
     c80:	2f ef       	ldi	r18, 0xFF	; 255
     c82:	89 e6       	ldi	r24, 0x69	; 105
     c84:	98 e1       	ldi	r25, 0x18	; 24
     c86:	21 50       	subi	r18, 0x01	; 1
     c88:	80 40       	sbci	r24, 0x00	; 0
     c8a:	90 40       	sbci	r25, 0x00	; 0
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <__stack+0x427>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <__stack+0x431>
     c90:	00 00       	nop
				_delay_ms(500);
				Key = STD_Low;
				goto Trylamp;
     c92:	f0 cd       	rjmp	.-1056   	; 0x874 <__stack+0x15>
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
	LCD_String("3:AirConditioner");
	
	while(Key == STD_Low)
     c94:	cc 23       	and	r28, r28
     c96:	09 f4       	brne	.+2      	; 0xc9a <__stack+0x43b>
     c98:	fb cd       	rjmp	.-1034   	; 0x890 <__stack+0x31>
				goto Trylamp;
				break;
			}
		}
	}
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	08 95       	ret

00000cae <ROOM2>:

void ROOM2(void)
{
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
     cb4:	d0 e0       	ldi	r29, 0x00	; 0
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     cb6:	1d 2f       	mov	r17, r29

void ROOM2(void)
{
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
     cb8:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
	LCD_String("1:Lamp1 2:Lamp2");
     cbc:	82 ec       	ldi	r24, 0xC2	; 194
     cbe:	93 e0       	ldi	r25, 0x03	; 3
     cc0:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
	LCD_SetPos(2,0);
     cc4:	6d 2f       	mov	r22, r29
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
	LCD_String("3:Lamp3");
     ccc:	8f ee       	ldi	r24, 0xEF	; 239
     cce:	94 e0       	ldi	r25, 0x04	; 4
     cd0:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
	
	while(Key == STD_Low)
	{
		Key = GetKey();
     cd4:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
		if (Key != STD_Low)
     cd8:	88 23       	and	r24, r24
     cda:	e1 f3       	breq	.-8      	; 0xcd4 <ROOM2+0x26>
		{
			switch(Key)
     cdc:	82 33       	cpi	r24, 0x32	; 50
     cde:	09 f4       	brne	.+2      	; 0xce2 <ROOM2+0x34>
     ce0:	8c c0       	rjmp	.+280    	; 0xdfa <ROOM2+0x14c>
     ce2:	83 33       	cpi	r24, 0x33	; 51
     ce4:	09 f4       	brne	.+2      	; 0xce8 <ROOM2+0x3a>
     ce6:	0f c1       	rjmp	.+542    	; 0xf06 <ROOM2+0x258>
     ce8:	81 33       	cpi	r24, 0x31	; 49
     cea:	09 f0       	breq	.+2      	; 0xcee <ROOM2+0x40>
     cec:	92 c1       	rjmp	.+804    	; 0x1012 <ROOM2+0x364>
			{
				case '1':
				LCD_Clear();
     cee:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     cf2:	2f ef       	ldi	r18, 0xFF	; 255
     cf4:	80 e7       	ldi	r24, 0x70	; 112
     cf6:	92 e0       	ldi	r25, 0x02	; 2
     cf8:	21 50       	subi	r18, 0x01	; 1
     cfa:	80 40       	sbci	r24, 0x00	; 0
     cfc:	90 40       	sbci	r25, 0x00	; 0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <ROOM2+0x4a>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <ROOM2+0x54>
     d02:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led3);
     d04:	83 e3       	ldi	r24, 0x33	; 51
     d06:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     d0a:	2f ef       	ldi	r18, 0xFF	; 255
     d0c:	80 e7       	ldi	r24, 0x70	; 112
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	21 50       	subi	r18, 0x01	; 1
     d12:	80 40       	sbci	r24, 0x00	; 0
     d14:	90 40       	sbci	r25, 0x00	; 0
     d16:	e1 f7       	brne	.-8      	; 0xd10 <ROOM2+0x62>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <ROOM2+0x6c>
     d1a:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
				if(Slave_Status == On)
     d22:	8f 34       	cpi	r24, 0x4F	; 79
     d24:	89 f5       	brne	.+98     	; 0xd88 <ROOM2+0xda>
				{
					LCD_Clear();
     d26:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Led is On!");
     d2a:	83 ee       	ldi	r24, 0xE3	; 227
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     d32:	61 2f       	mov	r22, r17
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     d3a:	8e ee       	ldi	r24, 0xEE	; 238
     d3c:	93 e0       	ldi	r25, 0x03	; 3
     d3e:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     d42:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     d46:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     d48:	88 23       	and	r24, r24
     d4a:	d9 f3       	breq	.-10     	; 0xd42 <ROOM2+0x94>
     d4c:	2f ef       	ldi	r18, 0xFF	; 255
     d4e:	81 ee       	ldi	r24, 0xE1	; 225
     d50:	94 e0       	ldi	r25, 0x04	; 4
     d52:	21 50       	subi	r18, 0x01	; 1
     d54:	80 40       	sbci	r24, 0x00	; 0
     d56:	90 40       	sbci	r25, 0x00	; 0
     d58:	e1 f7       	brne	.-8      	; 0xd52 <ROOM2+0xa4>
     d5a:	00 c0       	rjmp	.+0      	; 0xd5c <ROOM2+0xae>
     d5c:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     d5e:	c1 33       	cpi	r28, 0x31	; 49
     d60:	19 f0       	breq	.+6      	; 0xd68 <ROOM2+0xba>
     d62:	c2 33       	cpi	r28, 0x32	; 50
     d64:	59 f0       	breq	.+22     	; 0xd7c <ROOM2+0xce>
     d66:	44 c0       	rjmp	.+136    	; 0xdf0 <ROOM2+0x142>
							{
								case '1':
								SPI_TxRx(Led3_TurnOff);
     d68:	83 e2       	ldi	r24, 0x23	; 35
     d6a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room2 is Off now!");
     d6e:	87 ef       	ldi	r24, 0xF7	; 247
     d70:	94 e0       	ldi	r25, 0x04	; 4
     d72:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     d76:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     d7a:	e3 cf       	rjmp	.-58     	; 0xd42 <ROOM2+0x94>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     d7c:	89 e9       	ldi	r24, 0x99	; 153
     d7e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								MainMenu();
     d82:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     d86:	34 c0       	rjmp	.+104    	; 0xdf0 <ROOM2+0x142>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     d88:	86 34       	cpi	r24, 0x46	; 70
     d8a:	89 f5       	brne	.+98     	; 0xdee <ROOM2+0x140>
				{
					LCD_Clear();
     d8c:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Led is Off!");
     d90:	88 e1       	ldi	r24, 0x18	; 24
     d92:	94 e0       	ldi	r25, 0x04	; 4
     d94:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     d98:	61 2f       	mov	r22, r17
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     da0:	84 e2       	ldi	r24, 0x24	; 36
     da2:	94 e0       	ldi	r25, 0x04	; 4
     da4:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     da8:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     dac:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     dae:	88 23       	and	r24, r24
     db0:	d9 f3       	breq	.-10     	; 0xda8 <ROOM2+0xfa>
     db2:	2f ef       	ldi	r18, 0xFF	; 255
     db4:	81 ee       	ldi	r24, 0xE1	; 225
     db6:	94 e0       	ldi	r25, 0x04	; 4
     db8:	21 50       	subi	r18, 0x01	; 1
     dba:	80 40       	sbci	r24, 0x00	; 0
     dbc:	90 40       	sbci	r25, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <ROOM2+0x10a>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <ROOM2+0x114>
     dc2:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     dc4:	c1 33       	cpi	r28, 0x31	; 49
     dc6:	19 f0       	breq	.+6      	; 0xdce <ROOM2+0x120>
     dc8:	c2 33       	cpi	r28, 0x32	; 50
     dca:	59 f0       	breq	.+22     	; 0xde2 <ROOM2+0x134>
     dcc:	11 c0       	rjmp	.+34     	; 0xdf0 <ROOM2+0x142>
							{
								case '1':
								SPI_TxRx(Led3_TurnOn);
     dce:	83 e1       	ldi	r24, 0x13	; 19
     dd0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room2 is on now!");
     dd4:	80 e1       	ldi	r24, 0x10	; 16
     dd6:	95 e0       	ldi	r25, 0x05	; 5
     dd8:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     ddc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     de0:	e3 cf       	rjmp	.-58     	; 0xda8 <ROOM2+0xfa>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     de2:	89 e9       	ldi	r24, 0x99	; 153
     de4:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								MainMenu();
     de8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <ROOM2+0x142>
		{
			switch(Key)
			{
				case '1':
				LCD_Clear();
				Key = STD_Low;
     dee:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     df0:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
				MainMenu();
     df4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
				break;
     df8:	1c c1       	rjmp	.+568    	; 0x1032 <ROOM2+0x384>
				
				
				case '2':
				LCD_Clear();
     dfa:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     dfe:	2f ef       	ldi	r18, 0xFF	; 255
     e00:	80 e7       	ldi	r24, 0x70	; 112
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	21 50       	subi	r18, 0x01	; 1
     e06:	80 40       	sbci	r24, 0x00	; 0
     e08:	90 40       	sbci	r25, 0x00	; 0
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <ROOM2+0x156>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <ROOM2+0x160>
     e0e:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led4);
     e10:	84 e3       	ldi	r24, 0x34	; 52
     e12:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     e16:	2f ef       	ldi	r18, 0xFF	; 255
     e18:	80 e7       	ldi	r24, 0x70	; 112
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	21 50       	subi	r18, 0x01	; 1
     e1e:	80 40       	sbci	r24, 0x00	; 0
     e20:	90 40       	sbci	r25, 0x00	; 0
     e22:	e1 f7       	brne	.-8      	; 0xe1c <ROOM2+0x16e>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <ROOM2+0x178>
     e26:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
				if(Slave_Status == On)
     e2e:	8f 34       	cpi	r24, 0x4F	; 79
     e30:	89 f5       	brne	.+98     	; 0xe94 <ROOM2+0x1e6>
				{
					LCD_Clear();
     e32:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Led is On!");
     e36:	83 ee       	ldi	r24, 0xE3	; 227
     e38:	93 e0       	ldi	r25, 0x03	; 3
     e3a:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     e3e:	61 2f       	mov	r22, r17
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     e46:	8e ee       	ldi	r24, 0xEE	; 238
     e48:	93 e0       	ldi	r25, 0x03	; 3
     e4a:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     e4e:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     e52:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     e54:	88 23       	and	r24, r24
     e56:	d9 f3       	breq	.-10     	; 0xe4e <ROOM2+0x1a0>
     e58:	2f ef       	ldi	r18, 0xFF	; 255
     e5a:	81 ee       	ldi	r24, 0xE1	; 225
     e5c:	94 e0       	ldi	r25, 0x04	; 4
     e5e:	21 50       	subi	r18, 0x01	; 1
     e60:	80 40       	sbci	r24, 0x00	; 0
     e62:	90 40       	sbci	r25, 0x00	; 0
     e64:	e1 f7       	brne	.-8      	; 0xe5e <ROOM2+0x1b0>
     e66:	00 c0       	rjmp	.+0      	; 0xe68 <ROOM2+0x1ba>
     e68:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     e6a:	c1 33       	cpi	r28, 0x31	; 49
     e6c:	19 f0       	breq	.+6      	; 0xe74 <ROOM2+0x1c6>
     e6e:	c2 33       	cpi	r28, 0x32	; 50
     e70:	59 f0       	breq	.+22     	; 0xe88 <ROOM2+0x1da>
     e72:	44 c0       	rjmp	.+136    	; 0xefc <ROOM2+0x24e>
							{
								case '1':
								SPI_TxRx(Led4_TurnOff);
     e74:	84 e2       	ldi	r24, 0x24	; 36
     e76:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room2 is Off now!");
     e7a:	88 e2       	ldi	r24, 0x28	; 40
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     e82:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     e86:	e3 cf       	rjmp	.-58     	; 0xe4e <ROOM2+0x1a0>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     e88:	89 e9       	ldi	r24, 0x99	; 153
     e8a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								MainMenu();
     e8e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     e92:	34 c0       	rjmp	.+104    	; 0xefc <ROOM2+0x24e>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     e94:	86 34       	cpi	r24, 0x46	; 70
     e96:	89 f5       	brne	.+98     	; 0xefa <ROOM2+0x24c>
				{
					LCD_Clear();
     e98:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Led is Off!");
     e9c:	88 e1       	ldi	r24, 0x18	; 24
     e9e:	94 e0       	ldi	r25, 0x04	; 4
     ea0:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     ea4:	61 2f       	mov	r22, r17
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     eac:	84 e2       	ldi	r24, 0x24	; 36
     eae:	94 e0       	ldi	r25, 0x04	; 4
     eb0:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     eb4:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     eb8:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     eba:	88 23       	and	r24, r24
     ebc:	d9 f3       	breq	.-10     	; 0xeb4 <ROOM2+0x206>
     ebe:	2f ef       	ldi	r18, 0xFF	; 255
     ec0:	81 ee       	ldi	r24, 0xE1	; 225
     ec2:	94 e0       	ldi	r25, 0x04	; 4
     ec4:	21 50       	subi	r18, 0x01	; 1
     ec6:	80 40       	sbci	r24, 0x00	; 0
     ec8:	90 40       	sbci	r25, 0x00	; 0
     eca:	e1 f7       	brne	.-8      	; 0xec4 <ROOM2+0x216>
     ecc:	00 c0       	rjmp	.+0      	; 0xece <ROOM2+0x220>
     ece:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     ed0:	c1 33       	cpi	r28, 0x31	; 49
     ed2:	19 f0       	breq	.+6      	; 0xeda <ROOM2+0x22c>
     ed4:	c2 33       	cpi	r28, 0x32	; 50
     ed6:	59 f0       	breq	.+22     	; 0xeee <ROOM2+0x240>
     ed8:	11 c0       	rjmp	.+34     	; 0xefc <ROOM2+0x24e>
							{
								case '1':
								SPI_TxRx(Led4_TurnOn);
     eda:	84 e1       	ldi	r24, 0x14	; 20
     edc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room2 is on now!");
     ee0:	81 e4       	ldi	r24, 0x41	; 65
     ee2:	95 e0       	ldi	r25, 0x05	; 5
     ee4:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     ee8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
								break;
     eec:	e3 cf       	rjmp	.-58     	; 0xeb4 <ROOM2+0x206>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     eee:	89 e9       	ldi	r24, 0x99	; 153
     ef0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Key = STD_Low;
								MainMenu();
     ef4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
								break;
     ef8:	dd cf       	rjmp	.-70     	; 0xeb4 <ROOM2+0x206>
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     efa:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     efc:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
				MainMenu();
     f00:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
				break;
     f04:	96 c0       	rjmp	.+300    	; 0x1032 <ROOM2+0x384>
				
				case '3':
				LCD_Clear();
     f06:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
     f0a:	2f ef       	ldi	r18, 0xFF	; 255
     f0c:	80 e7       	ldi	r24, 0x70	; 112
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	21 50       	subi	r18, 0x01	; 1
     f12:	80 40       	sbci	r24, 0x00	; 0
     f14:	90 40       	sbci	r25, 0x00	; 0
     f16:	e1 f7       	brne	.-8      	; 0xf10 <ROOM2+0x262>
     f18:	00 c0       	rjmp	.+0      	; 0xf1a <ROOM2+0x26c>
     f1a:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led5);
     f1c:	85 e3       	ldi	r24, 0x35	; 53
     f1e:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
     f22:	2f ef       	ldi	r18, 0xFF	; 255
     f24:	80 e7       	ldi	r24, 0x70	; 112
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	80 40       	sbci	r24, 0x00	; 0
     f2c:	90 40       	sbci	r25, 0x00	; 0
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <ROOM2+0x27a>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <ROOM2+0x284>
     f32:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
				if(Slave_Status == On)
     f3a:	8f 34       	cpi	r24, 0x4F	; 79
     f3c:	89 f5       	brne	.+98     	; 0xfa0 <ROOM2+0x2f2>
				{
					LCD_Clear();
     f3e:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Led is On!");
     f42:	83 ee       	ldi	r24, 0xE3	; 227
     f44:	93 e0       	ldi	r25, 0x03	; 3
     f46:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     f4a:	61 2f       	mov	r22, r17
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     f52:	8e ee       	ldi	r24, 0xEE	; 238
     f54:	93 e0       	ldi	r25, 0x03	; 3
     f56:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     f5a:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     f5e:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     f60:	88 23       	and	r24, r24
     f62:	d9 f3       	breq	.-10     	; 0xf5a <ROOM2+0x2ac>
     f64:	2f ef       	ldi	r18, 0xFF	; 255
     f66:	81 ee       	ldi	r24, 0xE1	; 225
     f68:	94 e0       	ldi	r25, 0x04	; 4
     f6a:	21 50       	subi	r18, 0x01	; 1
     f6c:	80 40       	sbci	r24, 0x00	; 0
     f6e:	90 40       	sbci	r25, 0x00	; 0
     f70:	e1 f7       	brne	.-8      	; 0xf6a <ROOM2+0x2bc>
     f72:	00 c0       	rjmp	.+0      	; 0xf74 <ROOM2+0x2c6>
     f74:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     f76:	c1 33       	cpi	r28, 0x31	; 49
     f78:	19 f0       	breq	.+6      	; 0xf80 <ROOM2+0x2d2>
     f7a:	c2 33       	cpi	r28, 0x32	; 50
     f7c:	59 f0       	breq	.+22     	; 0xf94 <ROOM2+0x2e6>
     f7e:	44 c0       	rjmp	.+136    	; 0x1008 <ROOM2+0x35a>
							{
								case '1':
								SPI_TxRx(Led5_TurnOff);
     f80:	85 e2       	ldi	r24, 0x25	; 37
     f82:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp3,Room2 is Off now!");
     f86:	89 e5       	ldi	r24, 0x59	; 89
     f88:	95 e0       	ldi	r25, 0x05	; 5
     f8a:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     f8e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     f92:	e3 cf       	rjmp	.-58     	; 0xf5a <ROOM2+0x2ac>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     f94:	89 e9       	ldi	r24, 0x99	; 153
     f96:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								MainMenu();
     f9a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
     f9e:	34 c0       	rjmp	.+104    	; 0x1008 <ROOM2+0x35a>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     fa0:	86 34       	cpi	r24, 0x46	; 70
     fa2:	89 f5       	brne	.+98     	; 0x1006 <ROOM2+0x358>
				{
					LCD_Clear();
     fa4:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
					LCD_String("Led is Off!");
     fa8:	88 e1       	ldi	r24, 0x18	; 24
     faa:	94 e0       	ldi	r25, 0x04	; 4
     fac:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					LCD_SetPos(2,0);
     fb0:	61 2f       	mov	r22, r17
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	0e 94 d5 09 	call	0x13aa	; 0x13aa <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     fb8:	84 e2       	ldi	r24, 0x24	; 36
     fba:	94 e0       	ldi	r25, 0x04	; 4
     fbc:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     fc0:	0e 94 b2 08 	call	0x1164	; 0x1164 <GetKey>
     fc4:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     fc6:	88 23       	and	r24, r24
     fc8:	d9 f3       	breq	.-10     	; 0xfc0 <ROOM2+0x312>
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	81 ee       	ldi	r24, 0xE1	; 225
     fce:	94 e0       	ldi	r25, 0x04	; 4
     fd0:	21 50       	subi	r18, 0x01	; 1
     fd2:	80 40       	sbci	r24, 0x00	; 0
     fd4:	90 40       	sbci	r25, 0x00	; 0
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <ROOM2+0x322>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <ROOM2+0x32c>
     fda:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     fdc:	c1 33       	cpi	r28, 0x31	; 49
     fde:	19 f0       	breq	.+6      	; 0xfe6 <ROOM2+0x338>
     fe0:	c2 33       	cpi	r28, 0x32	; 50
     fe2:	59 f0       	breq	.+22     	; 0xffa <ROOM2+0x34c>
     fe4:	11 c0       	rjmp	.+34     	; 0x1008 <ROOM2+0x35a>
							{
								case '1':
								SPI_TxRx(Led5_TurnOn);
     fe6:	85 e1       	ldi	r24, 0x15	; 21
     fe8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp3,Room2 is on now!");
     fec:	82 e7       	ldi	r24, 0x72	; 114
     fee:	95 e0       	ldi	r25, 0x05	; 5
     ff0:	0e 94 23 08 	call	0x1046	; 0x1046 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     ff4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
								break;
     ff8:	e3 cf       	rjmp	.-58     	; 0xfc0 <ROOM2+0x312>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     ffa:	89 e9       	ldi	r24, 0x99	; 153
     ffc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <SPI_TxRx>
								Key = STD_Low;
								MainMenu();
    1000:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
								break;
    1004:	dd cf       	rjmp	.-70     	; 0xfc0 <ROOM2+0x312>
				MainMenu();
				break;
				
				case '3':
				LCD_Clear();
				Key = STD_Low;
    1006:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
    1008:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
				MainMenu();
    100c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
				break;
    1010:	10 c0       	rjmp	.+32     	; 0x1032 <ROOM2+0x384>
				
				default:
				LCD_Clear();
    1012:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_Clear>
				LCD_String("Wrong choice!");
    1016:	86 e7       	ldi	r24, 0x76	; 118
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	0e 94 bf 09 	call	0x137e	; 0x137e <LCD_String>
    101e:	2f ef       	ldi	r18, 0xFF	; 255
    1020:	89 e6       	ldi	r24, 0x69	; 105
    1022:	98 e1       	ldi	r25, 0x18	; 24
    1024:	21 50       	subi	r18, 0x01	; 1
    1026:	80 40       	sbci	r24, 0x00	; 0
    1028:	90 40       	sbci	r25, 0x00	; 0
    102a:	e1 f7       	brne	.-8      	; 0x1024 <ROOM2+0x376>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <ROOM2+0x380>
    102e:	00 00       	nop
				_delay_ms(500);
				Key = STD_Low;
				goto Trylamp;
    1030:	43 ce       	rjmp	.-890    	; 0xcb8 <ROOM2+0xa>
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
	LCD_String("3:Lamp3");
	
	while(Key == STD_Low)
    1032:	cc 23       	and	r28, r28
    1034:	09 f4       	brne	.+2      	; 0x1038 <ROOM2+0x38a>
    1036:	4e ce       	rjmp	.-868    	; 0xcd4 <ROOM2+0x26>
				goto Trylamp;
				break;
			}
		}
	}
}
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	08 95       	ret

00001040 <Bluetooth_Init>:

void Bluetooth_Init(UART_Config * options){
	UART_Init(options);
}
void Bluetooth_Transmait(u8 data){
	UART_Transmait(data);
    1040:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <UART_Init>
    1044:	08 95       	ret

00001046 <Bluetooth_TransmaitString>:
}
void Bluetooth_TransmaitString(s8 * string){
	UART_TransmaitString(string);
    1046:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <UART_TransmaitString>
    104a:	08 95       	ret

0000104c <Bluetooth_Receive>:
}
u8 Bluetooth_Receive(void){
	return UART_Receive();
    104c:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <UART_Receive>
}
    1050:	08 95       	ret

00001052 <EEPROM_WriteByte>:
* Created: 5/6/2023 2:33:25 PM
*  Author: user
*/
#include "EEPROM.h"

void EEPROM_WriteByte(u8 DeviceAdd,u8 LocAdd,u8 data){
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	c8 2f       	mov	r28, r24
    105a:	d6 2f       	mov	r29, r22
    105c:	14 2f       	mov	r17, r20
	u8 wDeviceAdd = (DeviceAdd & 0xFE);//to clear the first bit
	if (TWI_Start() == 0x08)
    105e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <TWI_Start>
    1062:	88 30       	cpi	r24, 0x08	; 8
    1064:	91 f4       	brne	.+36     	; 0x108a <EEPROM_WriteByte+0x38>
	{
		if (TWI_Send(wDeviceAdd) == 0x18)
    1066:	8c 2f       	mov	r24, r28
    1068:	8e 7f       	andi	r24, 0xFE	; 254
    106a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <TWI_Send>
    106e:	88 31       	cpi	r24, 0x18	; 24
    1070:	61 f4       	brne	.+24     	; 0x108a <EEPROM_WriteByte+0x38>
		{
			if (TWI_Send(LocAdd) == 0x28)
    1072:	8d 2f       	mov	r24, r29
    1074:	0e 94 65 0e 	call	0x1cca	; 0x1cca <TWI_Send>
    1078:	88 32       	cpi	r24, 0x28	; 40
    107a:	39 f4       	brne	.+14     	; 0x108a <EEPROM_WriteByte+0x38>
			{
				if (TWI_Send(data) == 0x28)
    107c:	81 2f       	mov	r24, r17
    107e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <TWI_Send>
    1082:	88 32       	cpi	r24, 0x28	; 40
    1084:	11 f4       	brne	.+4      	; 0x108a <EEPROM_WriteByte+0x38>
				{
					TWI_Stop();
    1086:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <TWI_Stop>
				}
			}
		}
	}
}
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	08 95       	ret

00001092 <EEPROM_ReadByte>:
u8 EEPROM_ReadByte(u8 DeviceAdd,u8 LocAdd){
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	1f 92       	push	r1
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	18 2f       	mov	r17, r24
    10a2:	06 2f       	mov	r16, r22
	u8 wDeviceAdd = (DeviceAdd & 0xFE);//to clear the first bit to write
	u8 rDeviceAdd = (DeviceAdd | 0x01);//to set the first bit to read
	u8 data = 0;
    10a4:	19 82       	std	Y+1, r1	; 0x01
	if (TWI_Start() == 0x08)
    10a6:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <TWI_Start>
    10aa:	88 30       	cpi	r24, 0x08	; 8
    10ac:	e9 f4       	brne	.+58     	; 0x10e8 <EEPROM_ReadByte+0x56>
	{
		if (TWI_Send(wDeviceAdd) == 0x18)
    10ae:	81 2f       	mov	r24, r17
    10b0:	8e 7f       	andi	r24, 0xFE	; 254
    10b2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <TWI_Send>
    10b6:	88 31       	cpi	r24, 0x18	; 24
    10b8:	b9 f4       	brne	.+46     	; 0x10e8 <EEPROM_ReadByte+0x56>
		{
			if (TWI_Send(LocAdd) == 0x28)
    10ba:	80 2f       	mov	r24, r16
    10bc:	0e 94 65 0e 	call	0x1cca	; 0x1cca <TWI_Send>
    10c0:	88 32       	cpi	r24, 0x28	; 40
    10c2:	91 f4       	brne	.+36     	; 0x10e8 <EEPROM_ReadByte+0x56>
			{
				if (TWI_Start() == 0x10)
    10c4:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <TWI_Start>
    10c8:	80 31       	cpi	r24, 0x10	; 16
    10ca:	71 f4       	brne	.+28     	; 0x10e8 <EEPROM_ReadByte+0x56>
				{
					if (TWI_Send(rDeviceAdd) == 0x40)
    10cc:	81 2f       	mov	r24, r17
    10ce:	81 60       	ori	r24, 0x01	; 1
    10d0:	0e 94 65 0e 	call	0x1cca	; 0x1cca <TWI_Send>
    10d4:	80 34       	cpi	r24, 0x40	; 64
    10d6:	41 f4       	brne	.+16     	; 0x10e8 <EEPROM_ReadByte+0x56>
					{
						//_delay_ms(50);
						if(TWI_Read_NAck(&data) == 0x58){
    10d8:	ce 01       	movw	r24, r28
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <TWI_Read_NAck>
    10e0:	88 35       	cpi	r24, 0x58	; 88
    10e2:	11 f4       	brne	.+4      	; 0x10e8 <EEPROM_ReadByte+0x56>
							TWI_Stop();
    10e4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <TWI_Stop>
				}
			}
		}
	}
	return data;
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	0f 90       	pop	r0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <Keypad_Init>:
*  Author: user
*/
#include "Keypad_Config.h"
#include "Keypad.h"

void Keypad_Init(void){
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	c8 e7       	ldi	r28, 0x78	; 120
    1104:	d0 e0       	ldi	r29, 0x00	; 0
    1106:	0f 2e       	mov	r0, r31
    1108:	fc e7       	ldi	r31, 0x7C	; 124
    110a:	ef 2e       	mov	r14, r31
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	ff 2e       	mov	r15, r31
    1110:	f0 2d       	mov	r31, r0
    1112:	8e 01       	movw	r16, r28
	//cols input
	for (u8 i=0;i<colsCount;i++)
	{
		DIO_ConfigChannel(keypadCols[i],Input);
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	89 91       	ld	r24, Y+
    1118:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	f8 01       	movw	r30, r16
    1120:	80 81       	ld	r24, Z
    1122:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
#include "Keypad_Config.h"
#include "Keypad.h"

void Keypad_Init(void){
	//cols input
	for (u8 i=0;i<colsCount;i++)
    1126:	ce 15       	cp	r28, r14
    1128:	df 05       	cpc	r29, r15
    112a:	99 f7       	brne	.-26     	; 0x1112 <Keypad_Init+0x1c>
    112c:	cc e7       	ldi	r28, 0x7C	; 124
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	0f 2e       	mov	r0, r31
    1132:	f0 e8       	ldi	r31, 0x80	; 128
    1134:	ef 2e       	mov	r14, r31
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	ff 2e       	mov	r15, r31
    113a:	f0 2d       	mov	r31, r0
    113c:	8e 01       	movw	r16, r28
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
	}
	//rows output
	for (u8 j=0;j<rowsCount;j++)
	{
		DIO_ConfigChannel(keypadRows[j],Output);
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	89 91       	ld	r24, Y+
    1142:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	f8 01       	movw	r30, r16
    114a:	80 81       	ld	r24, Z
    114c:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	{
		DIO_ConfigChannel(keypadCols[i],Input);
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
	}
	//rows output
	for (u8 j=0;j<rowsCount;j++)
    1150:	ce 15       	cp	r28, r14
    1152:	df 05       	cpc	r29, r15
    1154:	99 f7       	brne	.-26     	; 0x113c <Keypad_Init+0x46>
	{
		DIO_ConfigChannel(keypadRows[j],Output);
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
	}
}
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	08 95       	ret

00001164 <GetKey>:
u8 GetKey(void){
    1164:	6f 92       	push	r6
    1166:	7f 92       	push	r7
    1168:	8f 92       	push	r8
    116a:	9f 92       	push	r9
    116c:	af 92       	push	r10
    116e:	bf 92       	push	r11
    1170:	cf 92       	push	r12
    1172:	df 92       	push	r13
    1174:	ef 92       	push	r14
    1176:	ff 92       	push	r15
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	0c e7       	ldi	r16, 0x7C	; 124
    1182:	10 e0       	ldi	r17, 0x00	; 0
    1184:	c1 2c       	mov	r12, r1
    1186:	d1 2c       	mov	r13, r1
	for (u8 i=0;i<rowsCount;i++)
	{
		DIO_WriteChannel(keypadRows[i],STD_Low);
    1188:	46 01       	movw	r8, r12
    118a:	58 01       	movw	r10, r16
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	f8 01       	movw	r30, r16
    1190:	80 81       	ld	r24, Z
    1192:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
    1196:	c8 e7       	ldi	r28, 0x78	; 120
    1198:	d0 e0       	ldi	r29, 0x00	; 0
    119a:	61 2c       	mov	r6, r1
    119c:	71 2c       	mov	r7, r1
		for (u8 j=0;j<colsCount;j++)
		{
			if (DIO_ReadChannel(keypadCols[j]) == STD_Low)
    119e:	73 01       	movw	r14, r6
    11a0:	89 91       	ld	r24, Y+
    11a2:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_ReadChannel>
    11a6:	81 11       	cpse	r24, r1
    11a8:	14 c0       	rjmp	.+40     	; 0x11d2 <GetKey+0x6e>
			{
				while(DIO_ReadChannel(keypadCols[j]) == STD_Low);
    11aa:	e3 01       	movw	r28, r6
    11ac:	c8 58       	subi	r28, 0x88	; 136
    11ae:	df 4f       	sbci	r29, 0xFF	; 255
    11b0:	88 81       	ld	r24, Y
    11b2:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_ReadChannel>
    11b6:	88 23       	and	r24, r24
    11b8:	d9 f3       	breq	.-10     	; 0x11b0 <GetKey+0x4c>
				return keypad[i][j];
    11ba:	c4 01       	movw	r24, r8
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	88 59       	subi	r24, 0x98	; 152
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	fc 01       	movw	r30, r24
    11ca:	ee 0d       	add	r30, r14
    11cc:	ff 1d       	adc	r31, r15
    11ce:	80 81       	ld	r24, Z
    11d0:	16 c0       	rjmp	.+44     	; 0x11fe <GetKey+0x9a>
    11d2:	ff ef       	ldi	r31, 0xFF	; 255
    11d4:	6f 1a       	sub	r6, r31
    11d6:	7f 0a       	sbc	r7, r31
}
u8 GetKey(void){
	for (u8 i=0;i<rowsCount;i++)
	{
		DIO_WriteChannel(keypadRows[i],STD_Low);
		for (u8 j=0;j<colsCount;j++)
    11d8:	84 e0       	ldi	r24, 0x04	; 4
    11da:	68 16       	cp	r6, r24
    11dc:	71 04       	cpc	r7, r1
    11de:	f9 f6       	brne	.-66     	; 0x119e <GetKey+0x3a>
    11e0:	0f 5f       	subi	r16, 0xFF	; 255
    11e2:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				while(DIO_ReadChannel(keypadCols[j]) == STD_Low);
				return keypad[i][j];
			}
		}
		DIO_WriteChannel(keypadRows[i],STD_High);
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	f5 01       	movw	r30, r10
    11e8:	80 81       	ld	r24, Z
    11ea:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
    11ee:	ff ef       	ldi	r31, 0xFF	; 255
    11f0:	cf 1a       	sub	r12, r31
    11f2:	df 0a       	sbc	r13, r31
		DIO_ConfigChannel(keypadRows[j],Output);
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
	}
}
u8 GetKey(void){
	for (u8 i=0;i<rowsCount;i++)
    11f4:	84 e0       	ldi	r24, 0x04	; 4
    11f6:	c8 16       	cp	r12, r24
    11f8:	d1 04       	cpc	r13, r1
    11fa:	31 f6       	brne	.-116    	; 0x1188 <GetKey+0x24>
				return keypad[i][j];
			}
		}
		DIO_WriteChannel(keypadRows[i],STD_High);
	}
	return STD_Low;
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	df 90       	pop	r13
    120c:	cf 90       	pop	r12
    120e:	bf 90       	pop	r11
    1210:	af 90       	pop	r10
    1212:	9f 90       	pop	r9
    1214:	8f 90       	pop	r8
    1216:	7f 90       	pop	r7
    1218:	6f 90       	pop	r6
    121a:	08 95       	ret

0000121c <LCD_Cmd>:
	LCD_Cmd(0x32);
	LCD_Cmd(0x28);//Set Function 4Bit & 2Line & 5*8
	LCD_Cmd(0x06);//Entry Mode move to right
	LCD_Cmd(0x0C);//Display ON & Cursor ON & Blink
}
void LCD_Cmd(u8 cmd){
    121c:	cf 93       	push	r28
    121e:	c8 2f       	mov	r28, r24
	u8 portValue = STD_Low;
	DIO_WriteChannel(LCD_RS,STD_Low);
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	89 e0       	ldi	r24, 0x09	; 9
    1224:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	portValue = DIO_ReadPort(LCD_DataPort);
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (cmd & 0xF0);
    122e:	8f 70       	andi	r24, 0x0F	; 15
    1230:	9c 2f       	mov	r25, r28
    1232:	90 7f       	andi	r25, 0xF0	; 240
    1234:	68 2f       	mov	r22, r24
    1236:	69 2b       	or	r22, r25
	DIO_WritePort(LCD_DataPort,portValue);
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	8b e0       	ldi	r24, 0x0B	; 11
    1242:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1246:	8f e8       	ldi	r24, 0x8F	; 143
    1248:	91 e0       	ldi	r25, 0x01	; 1
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <LCD_Cmd+0x2e>
    124e:	00 c0       	rjmp	.+0      	; 0x1250 <LCD_Cmd+0x34>
    1250:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	8b e0       	ldi	r24, 0x0B	; 11
    1256:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    125a:	8f e1       	ldi	r24, 0x1F	; 31
    125c:	9e e4       	ldi	r25, 0x4E	; 78
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <LCD_Cmd+0x42>
    1262:	00 c0       	rjmp	.+0      	; 0x1264 <LCD_Cmd+0x48>
    1264:	00 00       	nop
	
	_delay_ms(5);
	
	portValue = DIO_ReadPort(LCD_DataPort);
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (cmd << 4);
    126c:	8f 70       	andi	r24, 0x0F	; 15
    126e:	90 e1       	ldi	r25, 0x10	; 16
    1270:	c9 9f       	mul	r28, r25
    1272:	90 01       	movw	r18, r0
    1274:	11 24       	eor	r1, r1
    1276:	68 2f       	mov	r22, r24
    1278:	62 2b       	or	r22, r18
	DIO_WritePort(LCD_DataPort,portValue);
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	8b e0       	ldi	r24, 0x0B	; 11
    1284:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1288:	8f e8       	ldi	r24, 0x8F	; 143
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <LCD_Cmd+0x70>
    1290:	00 c0       	rjmp	.+0      	; 0x1292 <LCD_Cmd+0x76>
    1292:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	8b e0       	ldi	r24, 0x0B	; 11
    1298:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    129c:	8f e3       	ldi	r24, 0x3F	; 63
    129e:	9f e1       	ldi	r25, 0x1F	; 31
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <LCD_Cmd+0x84>
    12a4:	00 c0       	rjmp	.+0      	; 0x12a6 <LCD_Cmd+0x8a>
    12a6:	00 00       	nop
	_delay_ms(2);
}
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <LCD_Init>:
*  Author: user
*/
#include "LCD.h"

void LCD_Init(void){
	DIO_WriteChannel(LCD_RW,STD_Low);
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	8a e0       	ldi	r24, 0x0A	; 10
    12b0:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E,STD_High);
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	8b e0       	ldi	r24, 0x0B	; 11
    12b8:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
    12bc:	2f ef       	ldi	r18, 0xFF	; 255
    12be:	89 ef       	ldi	r24, 0xF9	; 249
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	21 50       	subi	r18, 0x01	; 1
    12c4:	80 40       	sbci	r24, 0x00	; 0
    12c6:	90 40       	sbci	r25, 0x00	; 0
    12c8:	e1 f7       	brne	.-8      	; 0x12c2 <LCD_Init+0x16>
    12ca:	00 c0       	rjmp	.+0      	; 0x12cc <LCD_Init+0x20>
    12cc:	00 00       	nop
	_delay_ms(20);
	LCD_Cmd(0x33);
    12ce:	83 e3       	ldi	r24, 0x33	; 51
    12d0:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_Cmd>
	LCD_Cmd(0x32);
    12d4:	82 e3       	ldi	r24, 0x32	; 50
    12d6:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_Cmd>
	LCD_Cmd(0x28);//Set Function 4Bit & 2Line & 5*8
    12da:	88 e2       	ldi	r24, 0x28	; 40
    12dc:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_Cmd>
	LCD_Cmd(0x06);//Entry Mode move to right
    12e0:	86 e0       	ldi	r24, 0x06	; 6
    12e2:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_Cmd>
	LCD_Cmd(0x0C);//Display ON & Cursor ON & Blink
    12e6:	8c e0       	ldi	r24, 0x0C	; 12
    12e8:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_Cmd>
    12ec:	08 95       	ret

000012ee <LCD_Char>:
	DIO_WriteChannel(LCD_E,STD_Low);
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
	_delay_ms(2);
}
void LCD_Char(s8 data){
    12ee:	cf 93       	push	r28
    12f0:	c8 2f       	mov	r28, r24
	u8 portValue = STD_Low;
	DIO_WriteChannel(LCD_RS,STD_High);
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	89 e0       	ldi	r24, 0x09	; 9
    12f6:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	portValue = DIO_ReadPort(LCD_DataPort);
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (data & 0xF0);
    1300:	8f 70       	andi	r24, 0x0F	; 15
    1302:	9c 2f       	mov	r25, r28
    1304:	90 7f       	andi	r25, 0xF0	; 240
    1306:	68 2f       	mov	r22, r24
    1308:	69 2b       	or	r22, r25
	DIO_WritePort(LCD_DataPort,portValue);
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	8b e0       	ldi	r24, 0x0B	; 11
    1314:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1318:	8f e8       	ldi	r24, 0x8F	; 143
    131a:	91 e0       	ldi	r25, 0x01	; 1
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <LCD_Char+0x2e>
    1320:	00 c0       	rjmp	.+0      	; 0x1322 <LCD_Char+0x34>
    1322:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	8b e0       	ldi	r24, 0x0B	; 11
    1328:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    132c:	8f e1       	ldi	r24, 0x1F	; 31
    132e:	9e e4       	ldi	r25, 0x4E	; 78
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <LCD_Char+0x42>
    1334:	00 c0       	rjmp	.+0      	; 0x1336 <LCD_Char+0x48>
    1336:	00 00       	nop
	
	_delay_ms(5);
	
	portValue = DIO_ReadPort(LCD_DataPort);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (data << 4);
    133e:	8f 70       	andi	r24, 0x0F	; 15
    1340:	90 e1       	ldi	r25, 0x10	; 16
    1342:	c9 9f       	mul	r28, r25
    1344:	90 01       	movw	r18, r0
    1346:	11 24       	eor	r1, r1
    1348:	68 2f       	mov	r22, r24
    134a:	62 2b       	or	r22, r18
	DIO_WritePort(LCD_DataPort,portValue);
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	8b e0       	ldi	r24, 0x0B	; 11
    1356:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    135a:	8f e8       	ldi	r24, 0x8F	; 143
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <LCD_Char+0x70>
    1362:	00 c0       	rjmp	.+0      	; 0x1364 <LCD_Char+0x76>
    1364:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1366:	61 e0       	ldi	r22, 0x01	; 1
    1368:	8b e0       	ldi	r24, 0x0B	; 11
    136a:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    136e:	8f e3       	ldi	r24, 0x3F	; 63
    1370:	9f e1       	ldi	r25, 0x1F	; 31
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <LCD_Char+0x84>
    1376:	00 c0       	rjmp	.+0      	; 0x1378 <LCD_Char+0x8a>
    1378:	00 00       	nop
	_delay_ms(2);
}
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <LCD_String>:
void LCD_String(s8 * string){
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	fc 01       	movw	r30, r24
	u8 i = 0;
	while (string[i] != '\0')
    1386:	80 81       	ld	r24, Z
    1388:	88 23       	and	r24, r24
    138a:	59 f0       	breq	.+22     	; 0x13a2 <LCD_String+0x24>
    138c:	8f 01       	movw	r16, r30
    138e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_Char(string[i]);
    1390:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
		i++;
    1394:	cf 5f       	subi	r28, 0xFF	; 255
	DIO_WriteChannel(LCD_E,STD_High);
	_delay_ms(2);
}
void LCD_String(s8 * string){
	u8 i = 0;
	while (string[i] != '\0')
    1396:	f8 01       	movw	r30, r16
    1398:	ec 0f       	add	r30, r28
    139a:	f1 1d       	adc	r31, r1
    139c:	80 81       	ld	r24, Z
    139e:	81 11       	cpse	r24, r1
    13a0:	f7 cf       	rjmp	.-18     	; 0x1390 <LCD_String+0x12>
	{
		LCD_Char(string[i]);
		i++;
	}
}
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret

000013aa <LCD_SetPos>:
void LCD_SetPos(u8 line,u8 pos){
	switch(line){
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	19 f0       	breq	.+6      	; 0x13b4 <LCD_SetPos+0xa>
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <LCD_SetPos+0x16>
    13b2:	08 95       	ret
		case 1:
		LCD_Cmd((0x80 | (pos & 0x0F)));
    13b4:	86 2f       	mov	r24, r22
    13b6:	8f 70       	andi	r24, 0x0F	; 15
    13b8:	80 68       	ori	r24, 0x80	; 128
    13ba:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_Cmd>
		break;
    13be:	08 95       	ret
		case 2:
		LCD_Cmd((0xC0 | (pos & 0x0F)));
    13c0:	86 2f       	mov	r24, r22
    13c2:	8f 70       	andi	r24, 0x0F	; 15
    13c4:	80 6c       	ori	r24, 0xC0	; 192
    13c6:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_Cmd>
    13ca:	08 95       	ret

000013cc <LCD_Custome_Char>:
		break;
	}
}
void LCD_Custome_Char(u8 loc,s8 * msg){
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
	if (loc<8)
    13d4:	88 30       	cpi	r24, 0x08	; 8
    13d6:	80 f4       	brcc	.+32     	; 0x13f8 <LCD_Custome_Char+0x2c>
    13d8:	8b 01       	movw	r16, r22
	{
		LCD_Cmd((0x40+(loc*8)));
    13da:	88 0f       	add	r24, r24
    13dc:	88 0f       	add	r24, r24
    13de:	88 0f       	add	r24, r24
    13e0:	80 5c       	subi	r24, 0xC0	; 192
    13e2:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_Cmd>
    13e6:	e8 01       	movw	r28, r16
    13e8:	08 5f       	subi	r16, 0xF8	; 248
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
		for (u8 i=0;i<8;i++)
		{
			LCD_Char(msg[i]);
    13ec:	89 91       	ld	r24, Y+
    13ee:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Char>
}
void LCD_Custome_Char(u8 loc,s8 * msg){
	if (loc<8)
	{
		LCD_Cmd((0x40+(loc*8)));
		for (u8 i=0;i<8;i++)
    13f2:	c0 17       	cp	r28, r16
    13f4:	d1 07       	cpc	r29, r17
    13f6:	d1 f7       	brne	.-12     	; 0x13ec <LCD_Custome_Char+0x20>
		{
			LCD_Char(msg[i]);
		}
	}
}
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	08 95       	ret

00001402 <LCD_Clear>:
void LCD_Clear(void)
{
	LCD_Cmd(0x01);
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_Cmd>
    1408:	08 95       	ret

0000140a <ServoMotor>:
 * Created: 4/15/2023 1:44:42 PM
 *  Author: user
 */ 
#include "ServoMotor.h"

void ServoMotor(u16 angle){
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	28 97       	sbiw	r28, 0x08	; 8
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	8c 01       	movw	r16, r24
	DIO_ConfigChannel(DIO_ChannelD5,Output);
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	8d e1       	ldi	r24, 0x1D	; 29
    1428:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
	u16 ICR_Value = (u16)4999;
	u16 OCR1A_Value = (u16)(((angle-MiniAngle)*((float)(MaxCount-MiniCount)/(MaxAngle-MiniAngle)))+MiniCount-1);
	TIMER1_ICR_SetValue(ICR_Value);
    142c:	87 e8       	ldi	r24, 0x87	; 135
    142e:	93 e1       	ldi	r25, 0x13	; 19
    1430:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <TIMER1_ICR_SetValue>
	TIMER1_OCR1A_SetValue(OCR1A_Value);
    1434:	b8 01       	movw	r22, r16
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__floatunsisf>
    143e:	2c e1       	ldi	r18, 0x1C	; 28
    1440:	37 ec       	ldi	r19, 0xC7	; 199
    1442:	41 eb       	ldi	r20, 0xB1	; 177
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	0e 94 5f 10 	call	0x20be	; 0x20be <__mulsf3>
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	4a e7       	ldi	r20, 0x7A	; 122
    1450:	53 e4       	ldi	r21, 0x43	; 67
    1452:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__addsf3>
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e8       	ldi	r20, 0x80	; 128
    145c:	5f e3       	ldi	r21, 0x3F	; 63
    145e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__subsf3>
    1462:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__fixunssfsi>
    1466:	cb 01       	movw	r24, r22
    1468:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <TIMER1_OCR1A_SetValue>
	TIMER1_InitTypes options = {PWM_Fast,Clock_64,COM1A_Non_Inverting_PWM,COM1B_No_PWM,OC1AInt_Disable,OC1BInt_Disable,ICInt_Disable,TOVInt_Disable};
    146c:	88 e0       	ldi	r24, 0x08	; 8
    146e:	e0 ec       	ldi	r30, 0xC0	; 192
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	de 01       	movw	r26, r28
    1474:	11 96       	adiw	r26, 0x01	; 1
    1476:	01 90       	ld	r0, Z+
    1478:	0d 92       	st	X+, r0
    147a:	8a 95       	dec	r24
    147c:	e1 f7       	brne	.-8      	; 0x1476 <ServoMotor+0x6c>
	TIMER1_Init(&options);
    147e:	ce 01       	movw	r24, r28
    1480:	01 96       	adiw	r24, 0x01	; 1
    1482:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <TIMER1_Init>
    1486:	28 96       	adiw	r28, 0x08	; 8
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <main>:
#include "EEPROM.h"
#include "APP.h"


int main(void)
{
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	2c 97       	sbiw	r28, 0x0c	; 12
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
	SPI_ConfigTypes options = {Master,MSB,SPIClock_64,DoupleSpeedDisable}; //SPI Config to master
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	1a 82       	std	Y+2, r1	; 0x02
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	8b 83       	std	Y+3, r24	; 0x03
    14ba:	1c 82       	std	Y+4, r1	; 0x04
	DIO_Init(); //Initialize DIO with MASTER MCU
    14bc:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <DIO_Init>
	LCD_Init(); //Initialize LCD with MASTER MCU
    14c0:	0e 94 56 09 	call	0x12ac	; 0x12ac <LCD_Init>
	Keypad_Init(); //Initialize keypad with MASTER MCU
    14c4:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <Keypad_Init>
	TWI_Init(0x66); //Setting Master MCU address "I2C COMM."
    14c8:	86 e6       	ldi	r24, 0x66	; 102
    14ca:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <TWI_Init>
	SPI_Init(&options); //Initialize Master SPI
    14ce:	ce 01       	movw	r24, r28
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_Init>
	UART_Config uartconf = {BaudRate_9600,DoupleSpeedDisable,CharacterSize_8Bits,Stop_1Bit,Parity_Disable,TX_Enable,RX_Enable};
    14d6:	88 e0       	ldi	r24, 0x08	; 8
    14d8:	e8 ec       	ldi	r30, 0xC8	; 200
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	de 01       	movw	r26, r28
    14de:	15 96       	adiw	r26, 0x05	; 5
    14e0:	01 90       	ld	r0, Z+
    14e2:	0d 92       	st	X+, r0
    14e4:	8a 95       	dec	r24
    14e6:	e1 f7       	brne	.-8      	; 0x14e0 <main+0x44>
	Bluetooth_Init(&uartconf);
    14e8:	ce 01       	movw	r24, r28
    14ea:	05 96       	adiw	r24, 0x05	; 5
    14ec:	0e 94 20 08 	call	0x1040	; 0x1040 <Bluetooth_Init>
	DIO_ConfigChannel(DIO_ChannelD0,Input);
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	88 e1       	ldi	r24, 0x18	; 24
    14f4:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
    14f8:	2f ef       	ldi	r18, 0xFF	; 255
    14fa:	81 ee       	ldi	r24, 0xE1	; 225
    14fc:	94 e0       	ldi	r25, 0x04	; 4
    14fe:	21 50       	subi	r18, 0x01	; 1
    1500:	80 40       	sbci	r24, 0x00	; 0
    1502:	90 40       	sbci	r25, 0x00	; 0
    1504:	e1 f7       	brne	.-8      	; 0x14fe <main+0x62>
    1506:	00 c0       	rjmp	.+0      	; 0x1508 <main+0x6c>
    1508:	00 00       	nop
	_delay_ms(100);
	
	ALARM(); //if alarm not set will proceed to menu1
    150a:	0e 94 ae 00 	call	0x15c	; 0x15c <ALARM>
	DoorCheck();
    150e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <DoorCheck>
	
	while (1)
	{
		MainMenu(); //Main menu to control Home
		admin:
		AdminMenu();
    1512:	0e 94 02 03 	call	0x604	; 0x604 <AdminMenu>
	Menu1(); //if passed menu1 will proceed to menu2
	Menu2(); //if passed menu2 will proceed to Main Menu
	
	while (1)
	{
		MainMenu(); //Main menu to control Home
    1516:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <MainMenu>
    151a:	fb cf       	rjmp	.-10     	; 0x1512 <main+0x76>

0000151c <DIO_WriteChannel>:
		break;
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
		break;
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
    151c:	98 2f       	mov	r25, r24
    151e:	97 70       	andi	r25, 0x07	; 7
    1520:	86 95       	lsr	r24
    1522:	86 95       	lsr	r24
    1524:	86 95       	lsr	r24
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	21 f1       	breq	.+72     	; 0x1572 <DIO_WriteChannel+0x56>
    152a:	30 f0       	brcs	.+12     	; 0x1538 <DIO_WriteChannel+0x1c>
    152c:	82 30       	cpi	r24, 0x02	; 2
    152e:	f1 f1       	breq	.+124    	; 0x15ac <DIO_WriteChannel+0x90>
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	09 f4       	brne	.+2      	; 0x1536 <DIO_WriteChannel+0x1a>
    1534:	58 c0       	rjmp	.+176    	; 0x15e6 <DIO_WriteChannel+0xca>
    1536:	08 95       	ret
    1538:	61 30       	cpi	r22, 0x01	; 1
    153a:	69 f4       	brne	.+26     	; 0x1556 <DIO_WriteChannel+0x3a>
    153c:	4b b3       	in	r20, 0x1b	; 27
    153e:	21 e0       	ldi	r18, 0x01	; 1
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	b9 01       	movw	r22, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_WriteChannel+0x2e>
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	9a 95       	dec	r25
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_WriteChannel+0x2a>
    154e:	cb 01       	movw	r24, r22
    1550:	84 2b       	or	r24, r20
    1552:	8b bb       	out	0x1b, r24	; 27
    1554:	08 95       	ret
    1556:	4b b3       	in	r20, 0x1b	; 27
    1558:	21 e0       	ldi	r18, 0x01	; 1
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	b9 01       	movw	r22, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <DIO_WriteChannel+0x48>
    1560:	66 0f       	add	r22, r22
    1562:	77 1f       	adc	r23, r23
    1564:	9a 95       	dec	r25
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <DIO_WriteChannel+0x44>
    1568:	cb 01       	movw	r24, r22
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8b bb       	out	0x1b, r24	; 27
    1570:	08 95       	ret
    1572:	61 30       	cpi	r22, 0x01	; 1
    1574:	69 f4       	brne	.+26     	; 0x1590 <DIO_WriteChannel+0x74>
    1576:	48 b3       	in	r20, 0x18	; 24
    1578:	21 e0       	ldi	r18, 0x01	; 1
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	b9 01       	movw	r22, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_WriteChannel+0x68>
    1580:	66 0f       	add	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	9a 95       	dec	r25
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_WriteChannel+0x64>
    1588:	cb 01       	movw	r24, r22
    158a:	84 2b       	or	r24, r20
    158c:	88 bb       	out	0x18, r24	; 24
    158e:	08 95       	ret
    1590:	48 b3       	in	r20, 0x18	; 24
    1592:	21 e0       	ldi	r18, 0x01	; 1
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	b9 01       	movw	r22, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <DIO_WriteChannel+0x82>
    159a:	66 0f       	add	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	9a 95       	dec	r25
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <DIO_WriteChannel+0x7e>
    15a2:	cb 01       	movw	r24, r22
    15a4:	80 95       	com	r24
    15a6:	84 23       	and	r24, r20
    15a8:	88 bb       	out	0x18, r24	; 24
    15aa:	08 95       	ret
    15ac:	61 30       	cpi	r22, 0x01	; 1
    15ae:	69 f4       	brne	.+26     	; 0x15ca <DIO_WriteChannel+0xae>
    15b0:	45 b3       	in	r20, 0x15	; 21
    15b2:	21 e0       	ldi	r18, 0x01	; 1
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	b9 01       	movw	r22, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_WriteChannel+0xa2>
    15ba:	66 0f       	add	r22, r22
    15bc:	77 1f       	adc	r23, r23
    15be:	9a 95       	dec	r25
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_WriteChannel+0x9e>
    15c2:	cb 01       	movw	r24, r22
    15c4:	84 2b       	or	r24, r20
    15c6:	85 bb       	out	0x15, r24	; 21
    15c8:	08 95       	ret
    15ca:	45 b3       	in	r20, 0x15	; 21
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	b9 01       	movw	r22, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <DIO_WriteChannel+0xbc>
    15d4:	66 0f       	add	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	9a 95       	dec	r25
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <DIO_WriteChannel+0xb8>
    15dc:	cb 01       	movw	r24, r22
    15de:	80 95       	com	r24
    15e0:	84 23       	and	r24, r20
    15e2:	85 bb       	out	0x15, r24	; 21
    15e4:	08 95       	ret
    15e6:	61 30       	cpi	r22, 0x01	; 1
    15e8:	69 f4       	brne	.+26     	; 0x1604 <DIO_WriteChannel+0xe8>
    15ea:	42 b3       	in	r20, 0x12	; 18
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	b9 01       	movw	r22, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <DIO_WriteChannel+0xdc>
    15f4:	66 0f       	add	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	9a 95       	dec	r25
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <DIO_WriteChannel+0xd8>
    15fc:	cb 01       	movw	r24, r22
    15fe:	84 2b       	or	r24, r20
    1600:	82 bb       	out	0x12, r24	; 18
    1602:	08 95       	ret
    1604:	42 b3       	in	r20, 0x12	; 18
    1606:	21 e0       	ldi	r18, 0x01	; 1
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	b9 01       	movw	r22, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_WriteChannel+0xf6>
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	9a 95       	dec	r25
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_WriteChannel+0xf2>
    1616:	cb 01       	movw	r24, r22
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	82 bb       	out	0x12, r24	; 18
    161e:	08 95       	ret

00001620 <DIO_ReadChannel>:
    1620:	28 2f       	mov	r18, r24
    1622:	27 70       	andi	r18, 0x07	; 7
    1624:	86 95       	lsr	r24
    1626:	86 95       	lsr	r24
    1628:	86 95       	lsr	r24
    162a:	81 30       	cpi	r24, 0x01	; 1
    162c:	79 f0       	breq	.+30     	; 0x164c <DIO_ReadChannel+0x2c>
    162e:	28 f0       	brcs	.+10     	; 0x163a <DIO_ReadChannel+0x1a>
    1630:	82 30       	cpi	r24, 0x02	; 2
    1632:	a9 f0       	breq	.+42     	; 0x165e <DIO_ReadChannel+0x3e>
    1634:	83 30       	cpi	r24, 0x03	; 3
    1636:	e1 f0       	breq	.+56     	; 0x1670 <DIO_ReadChannel+0x50>
    1638:	24 c0       	rjmp	.+72     	; 0x1682 <DIO_ReadChannel+0x62>
    163a:	89 b3       	in	r24, 0x19	; 25
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_ReadChannel+0x24>
    1640:	95 95       	asr	r25
    1642:	87 95       	ror	r24
    1644:	2a 95       	dec	r18
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_ReadChannel+0x20>
    1648:	81 70       	andi	r24, 0x01	; 1
    164a:	08 95       	ret
    164c:	86 b3       	in	r24, 0x16	; 22
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_ReadChannel+0x36>
    1652:	95 95       	asr	r25
    1654:	87 95       	ror	r24
    1656:	2a 95       	dec	r18
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_ReadChannel+0x32>
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	08 95       	ret
    165e:	83 b3       	in	r24, 0x13	; 19
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_ReadChannel+0x48>
    1664:	95 95       	asr	r25
    1666:	87 95       	ror	r24
    1668:	2a 95       	dec	r18
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_ReadChannel+0x44>
    166c:	81 70       	andi	r24, 0x01	; 1
    166e:	08 95       	ret
    1670:	80 b3       	in	r24, 0x10	; 16
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_ReadChannel+0x5a>
    1676:	95 95       	asr	r25
    1678:	87 95       	ror	r24
    167a:	2a 95       	dec	r18
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_ReadChannel+0x56>
    167e:	81 70       	andi	r24, 0x01	; 1
    1680:	08 95       	ret
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	08 95       	ret

00001686 <DIO_ConfigChannel>:
		break;
	}
}
void DIO_ConfigChannel(DIO_ChannelTypes channelId,DIO_DataDir direction){
	DIO_PortTypes Portx = channelId/8;
	DIO_ChannelTypes BitNo = channelId%8;
    1686:	98 2f       	mov	r25, r24
    1688:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
    168a:	86 95       	lsr	r24
    168c:	86 95       	lsr	r24
    168e:	86 95       	lsr	r24
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	21 f1       	breq	.+72     	; 0x16dc <DIO_ConfigChannel+0x56>
    1694:	30 f0       	brcs	.+12     	; 0x16a2 <DIO_ConfigChannel+0x1c>
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	f1 f1       	breq	.+124    	; 0x1716 <DIO_ConfigChannel+0x90>
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	09 f4       	brne	.+2      	; 0x16a0 <DIO_ConfigChannel+0x1a>
    169e:	58 c0       	rjmp	.+176    	; 0x1750 <DIO_ConfigChannel+0xca>
    16a0:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
    16a2:	61 30       	cpi	r22, 0x01	; 1
    16a4:	69 f4       	brne	.+26     	; 0x16c0 <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
    16a6:	4a b3       	in	r20, 0x1a	; 26
    16a8:	21 e0       	ldi	r18, 0x01	; 1
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	b9 01       	movw	r22, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_ConfigChannel+0x2e>
    16b0:	66 0f       	add	r22, r22
    16b2:	77 1f       	adc	r23, r23
    16b4:	9a 95       	dec	r25
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_ConfigChannel+0x2a>
    16b8:	cb 01       	movw	r24, r22
    16ba:	84 2b       	or	r24, r20
    16bc:	8a bb       	out	0x1a, r24	; 26
    16be:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
    16c0:	4a b3       	in	r20, 0x1a	; 26
    16c2:	21 e0       	ldi	r18, 0x01	; 1
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	b9 01       	movw	r22, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_ConfigChannel+0x48>
    16ca:	66 0f       	add	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	9a 95       	dec	r25
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_ConfigChannel+0x44>
    16d2:	cb 01       	movw	r24, r22
    16d4:	80 95       	com	r24
    16d6:	84 23       	and	r24, r20
    16d8:	8a bb       	out	0x1a, r24	; 26
    16da:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (direction == Output)
    16dc:	61 30       	cpi	r22, 0x01	; 1
    16de:	69 f4       	brne	.+26     	; 0x16fa <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
    16e0:	47 b3       	in	r20, 0x17	; 23
    16e2:	21 e0       	ldi	r18, 0x01	; 1
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	b9 01       	movw	r22, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <DIO_ConfigChannel+0x68>
    16ea:	66 0f       	add	r22, r22
    16ec:	77 1f       	adc	r23, r23
    16ee:	9a 95       	dec	r25
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <DIO_ConfigChannel+0x64>
    16f2:	cb 01       	movw	r24, r22
    16f4:	84 2b       	or	r24, r20
    16f6:	87 bb       	out	0x17, r24	; 23
    16f8:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
    16fa:	47 b3       	in	r20, 0x17	; 23
    16fc:	21 e0       	ldi	r18, 0x01	; 1
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	b9 01       	movw	r22, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_ConfigChannel+0x82>
    1704:	66 0f       	add	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	9a 95       	dec	r25
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_ConfigChannel+0x7e>
    170c:	cb 01       	movw	r24, r22
    170e:	80 95       	com	r24
    1710:	84 23       	and	r24, r20
    1712:	87 bb       	out	0x17, r24	; 23
    1714:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (direction == Output)
    1716:	61 30       	cpi	r22, 0x01	; 1
    1718:	69 f4       	brne	.+26     	; 0x1734 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
    171a:	44 b3       	in	r20, 0x14	; 20
    171c:	21 e0       	ldi	r18, 0x01	; 1
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	b9 01       	movw	r22, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_ConfigChannel+0xa2>
    1724:	66 0f       	add	r22, r22
    1726:	77 1f       	adc	r23, r23
    1728:	9a 95       	dec	r25
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_ConfigChannel+0x9e>
    172c:	cb 01       	movw	r24, r22
    172e:	84 2b       	or	r24, r20
    1730:	84 bb       	out	0x14, r24	; 20
    1732:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
    1734:	44 b3       	in	r20, 0x14	; 20
    1736:	21 e0       	ldi	r18, 0x01	; 1
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	b9 01       	movw	r22, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_ConfigChannel+0xbc>
    173e:	66 0f       	add	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	9a 95       	dec	r25
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_ConfigChannel+0xb8>
    1746:	cb 01       	movw	r24, r22
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	84 bb       	out	0x14, r24	; 20
    174e:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (direction == Output)
    1750:	61 30       	cpi	r22, 0x01	; 1
    1752:	69 f4       	brne	.+26     	; 0x176e <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
    1754:	41 b3       	in	r20, 0x11	; 17
    1756:	21 e0       	ldi	r18, 0x01	; 1
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	b9 01       	movw	r22, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <DIO_ConfigChannel+0xdc>
    175e:	66 0f       	add	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	9a 95       	dec	r25
    1764:	e2 f7       	brpl	.-8      	; 0x175e <DIO_ConfigChannel+0xd8>
    1766:	cb 01       	movw	r24, r22
    1768:	84 2b       	or	r24, r20
    176a:	81 bb       	out	0x11, r24	; 17
    176c:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
    176e:	41 b3       	in	r20, 0x11	; 17
    1770:	21 e0       	ldi	r18, 0x01	; 1
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	b9 01       	movw	r22, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_ConfigChannel+0xf6>
    1778:	66 0f       	add	r22, r22
    177a:	77 1f       	adc	r23, r23
    177c:	9a 95       	dec	r25
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_ConfigChannel+0xf2>
    1780:	cb 01       	movw	r24, r22
    1782:	80 95       	com	r24
    1784:	84 23       	and	r24, r20
    1786:	81 bb       	out	0x11, r24	; 17
    1788:	08 95       	ret

0000178a <DIO_ReadPort>:
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
	switch(portId){
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	41 f0       	breq	.+16     	; 0x179e <DIO_ReadPort+0x14>
    178e:	28 f0       	brcs	.+10     	; 0x179a <DIO_ReadPort+0x10>
    1790:	82 30       	cpi	r24, 0x02	; 2
    1792:	39 f0       	breq	.+14     	; 0x17a2 <DIO_ReadPort+0x18>
    1794:	83 30       	cpi	r24, 0x03	; 3
    1796:	39 f0       	breq	.+14     	; 0x17a6 <DIO_ReadPort+0x1c>
    1798:	08 c0       	rjmp	.+16     	; 0x17aa <DIO_ReadPort+0x20>
		case DIO_PortA:
		portValue = PORTA_Reg;
    179a:	8b b3       	in	r24, 0x1b	; 27
		break;
    179c:	08 95       	ret
		case DIO_PortB:
		portValue = PORTB_Reg;
    179e:	88 b3       	in	r24, 0x18	; 24
		break;
    17a0:	08 95       	ret
		case DIO_PortC:
		portValue = PORTC_Reg;
    17a2:	85 b3       	in	r24, 0x15	; 21
		break;
    17a4:	08 95       	ret
		case DIO_PortD:
		portValue = PORTD_Reg;
    17a6:	82 b3       	in	r24, 0x12	; 18
		break;
    17a8:	08 95       	ret
		}
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
    17aa:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		portValue = PORTD_Reg;
		break;
	}
	return portValue;
}
    17ac:	08 95       	ret

000017ae <DIO_WritePort>:
void DIO_WritePort(DIO_PortTypes portId,u8 portValue){
	switch(portId){
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	41 f0       	breq	.+16     	; 0x17c2 <DIO_WritePort+0x14>
    17b2:	28 f0       	brcs	.+10     	; 0x17be <DIO_WritePort+0x10>
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	39 f0       	breq	.+14     	; 0x17c6 <DIO_WritePort+0x18>
    17b8:	83 30       	cpi	r24, 0x03	; 3
    17ba:	39 f0       	breq	.+14     	; 0x17ca <DIO_WritePort+0x1c>
    17bc:	08 95       	ret
		case DIO_PortA:
		PORTA_Reg = portValue;
    17be:	6b bb       	out	0x1b, r22	; 27
		break;
    17c0:	08 95       	ret
		case DIO_PortB:
		PORTB_Reg = portValue;
    17c2:	68 bb       	out	0x18, r22	; 24
		break;
    17c4:	08 95       	ret
		case DIO_PortC:
		PORTC_Reg = portValue;
    17c6:	65 bb       	out	0x15, r22	; 21
		break;
    17c8:	08 95       	ret
		case DIO_PortD:
		PORTD_Reg = portValue;
    17ca:	62 bb       	out	0x12, r22	; 18
    17cc:	08 95       	ret

000017ce <DIO_Init>:
	{Output,STD_High},
	{Output,STD_High},
	{Output,STD_High}
};

void DIO_Init(){
    17ce:	e0 e8       	ldi	r30, 0x80	; 128
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
    17d2:	80 e0       	ldi	r24, 0x00	; 0
			{
				SetBit(DDRB_Reg,BitNo);
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	50 e0       	ldi	r21, 0x00	; 0
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
	{
		Portx = count/8;
		BitNo = count%8;
    17d8:	28 2f       	mov	r18, r24
    17da:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
    17dc:	98 2f       	mov	r25, r24
    17de:	96 95       	lsr	r25
    17e0:	96 95       	lsr	r25
    17e2:	96 95       	lsr	r25
    17e4:	91 30       	cpi	r25, 0x01	; 1
    17e6:	09 f1       	breq	.+66     	; 0x182a <DIO_Init+0x5c>
    17e8:	30 f0       	brcs	.+12     	; 0x17f6 <DIO_Init+0x28>
    17ea:	92 30       	cpi	r25, 0x02	; 2
    17ec:	c1 f1       	breq	.+112    	; 0x185e <DIO_Init+0x90>
    17ee:	93 30       	cpi	r25, 0x03	; 3
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <DIO_Init+0x26>
    17f2:	4f c0       	rjmp	.+158    	; 0x1892 <DIO_Init+0xc4>
    17f4:	67 c0       	rjmp	.+206    	; 0x18c4 <DIO_Init+0xf6>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
    17f6:	90 81       	ld	r25, Z
    17f8:	91 30       	cpi	r25, 0x01	; 1
    17fa:	59 f4       	brne	.+22     	; 0x1812 <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg,BitNo);
    17fc:	9a b3       	in	r25, 0x1a	; 26
    17fe:	ba 01       	movw	r22, r20
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <DIO_Init+0x38>
    1802:	66 0f       	add	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	2a 95       	dec	r18
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <DIO_Init+0x34>
    180a:	9b 01       	movw	r18, r22
    180c:	29 2b       	or	r18, r25
    180e:	2a bb       	out	0x1a, r18	; 26
    1810:	59 c0       	rjmp	.+178    	; 0x18c4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
    1812:	3a b3       	in	r19, 0x1a	; 26
    1814:	ba 01       	movw	r22, r20
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_Init+0x4e>
    1818:	66 0f       	add	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	2a 95       	dec	r18
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_Init+0x4a>
    1820:	96 2f       	mov	r25, r22
    1822:	90 95       	com	r25
    1824:	93 23       	and	r25, r19
    1826:	9a bb       	out	0x1a, r25	; 26
    1828:	4d c0       	rjmp	.+154    	; 0x18c4 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
    182a:	90 81       	ld	r25, Z
    182c:	91 30       	cpi	r25, 0x01	; 1
    182e:	59 f4       	brne	.+22     	; 0x1846 <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg,BitNo);
    1830:	97 b3       	in	r25, 0x17	; 23
    1832:	ba 01       	movw	r22, r20
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DIO_Init+0x6c>
    1836:	66 0f       	add	r22, r22
    1838:	77 1f       	adc	r23, r23
    183a:	2a 95       	dec	r18
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DIO_Init+0x68>
    183e:	9b 01       	movw	r18, r22
    1840:	29 2b       	or	r18, r25
    1842:	27 bb       	out	0x17, r18	; 23
    1844:	3f c0       	rjmp	.+126    	; 0x18c4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
    1846:	37 b3       	in	r19, 0x17	; 23
    1848:	ba 01       	movw	r22, r20
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_Init+0x82>
    184c:	66 0f       	add	r22, r22
    184e:	77 1f       	adc	r23, r23
    1850:	2a 95       	dec	r18
    1852:	e2 f7       	brpl	.-8      	; 0x184c <DIO_Init+0x7e>
    1854:	96 2f       	mov	r25, r22
    1856:	90 95       	com	r25
    1858:	93 23       	and	r25, r19
    185a:	97 bb       	out	0x17, r25	; 23
    185c:	33 c0       	rjmp	.+102    	; 0x18c4 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
    185e:	90 81       	ld	r25, Z
    1860:	91 30       	cpi	r25, 0x01	; 1
    1862:	59 f4       	brne	.+22     	; 0x187a <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg,BitNo);
    1864:	94 b3       	in	r25, 0x14	; 20
    1866:	ba 01       	movw	r22, r20
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_Init+0xa0>
    186a:	66 0f       	add	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	2a 95       	dec	r18
    1870:	e2 f7       	brpl	.-8      	; 0x186a <DIO_Init+0x9c>
    1872:	9b 01       	movw	r18, r22
    1874:	29 2b       	or	r18, r25
    1876:	24 bb       	out	0x14, r18	; 20
    1878:	25 c0       	rjmp	.+74     	; 0x18c4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
    187a:	34 b3       	in	r19, 0x14	; 20
    187c:	ba 01       	movw	r22, r20
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DIO_Init+0xb6>
    1880:	66 0f       	add	r22, r22
    1882:	77 1f       	adc	r23, r23
    1884:	2a 95       	dec	r18
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <DIO_Init+0xb2>
    1888:	96 2f       	mov	r25, r22
    188a:	90 95       	com	r25
    188c:	93 23       	and	r25, r19
    188e:	94 bb       	out	0x14, r25	; 20
    1890:	19 c0       	rjmp	.+50     	; 0x18c4 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
    1892:	90 81       	ld	r25, Z
    1894:	91 30       	cpi	r25, 0x01	; 1
    1896:	59 f4       	brne	.+22     	; 0x18ae <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg,BitNo);
    1898:	91 b3       	in	r25, 0x11	; 17
    189a:	ba 01       	movw	r22, r20
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_Init+0xd4>
    189e:	66 0f       	add	r22, r22
    18a0:	77 1f       	adc	r23, r23
    18a2:	2a 95       	dec	r18
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <DIO_Init+0xd0>
    18a6:	9b 01       	movw	r18, r22
    18a8:	29 2b       	or	r18, r25
    18aa:	21 bb       	out	0x11, r18	; 17
    18ac:	0b c0       	rjmp	.+22     	; 0x18c4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
    18ae:	31 b3       	in	r19, 0x11	; 17
    18b0:	ba 01       	movw	r22, r20
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_Init+0xea>
    18b4:	66 0f       	add	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	2a 95       	dec	r18
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_Init+0xe6>
    18bc:	96 2f       	mov	r25, r22
    18be:	90 95       	com	r25
    18c0:	93 23       	and	r25, r19
    18c2:	91 bb       	out	0x11, r25	; 17

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	32 96       	adiw	r30, 0x02	; 2
    18c8:	80 32       	cpi	r24, 0x20	; 32
    18ca:	09 f0       	breq	.+2      	; 0x18ce <DIO_Init+0x100>
    18cc:	85 cf       	rjmp	.-246    	; 0x17d8 <DIO_Init+0xa>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
    18ce:	08 95       	ret

000018d0 <__vector_1>:
		break;
	}
}


ISR(INT0_vect){
    18d0:	1f 92       	push	r1
    18d2:	0f 92       	push	r0
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	0f 92       	push	r0
    18d8:	11 24       	eor	r1, r1
    18da:	2f 93       	push	r18
    18dc:	3f 93       	push	r19
    18de:	4f 93       	push	r20
    18e0:	5f 93       	push	r21
    18e2:	6f 93       	push	r22
    18e4:	7f 93       	push	r23
    18e6:	8f 93       	push	r24
    18e8:	9f 93       	push	r25
    18ea:	af 93       	push	r26
    18ec:	bf 93       	push	r27
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
	ExtInt0FunPtr();
    18f2:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <ExtInt0FunPtr>
    18f6:	f0 91 8f 05 	lds	r31, 0x058F	; 0x80058f <ExtInt0FunPtr+0x1>
    18fa:	09 95       	icall
}
    18fc:	ff 91       	pop	r31
    18fe:	ef 91       	pop	r30
    1900:	bf 91       	pop	r27
    1902:	af 91       	pop	r26
    1904:	9f 91       	pop	r25
    1906:	8f 91       	pop	r24
    1908:	7f 91       	pop	r23
    190a:	6f 91       	pop	r22
    190c:	5f 91       	pop	r21
    190e:	4f 91       	pop	r20
    1910:	3f 91       	pop	r19
    1912:	2f 91       	pop	r18
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <__vector_2>:

ISR(INT1_vect){
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	2f 93       	push	r18
    192a:	3f 93       	push	r19
    192c:	4f 93       	push	r20
    192e:	5f 93       	push	r21
    1930:	6f 93       	push	r22
    1932:	7f 93       	push	r23
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
    1938:	af 93       	push	r26
    193a:	bf 93       	push	r27
    193c:	ef 93       	push	r30
    193e:	ff 93       	push	r31
	ExtInt1FunPtr();
    1940:	e0 91 8c 05 	lds	r30, 0x058C	; 0x80058c <ExtInt1FunPtr>
    1944:	f0 91 8d 05 	lds	r31, 0x058D	; 0x80058d <ExtInt1FunPtr+0x1>
    1948:	09 95       	icall
}
    194a:	ff 91       	pop	r31
    194c:	ef 91       	pop	r30
    194e:	bf 91       	pop	r27
    1950:	af 91       	pop	r26
    1952:	9f 91       	pop	r25
    1954:	8f 91       	pop	r24
    1956:	7f 91       	pop	r23
    1958:	6f 91       	pop	r22
    195a:	5f 91       	pop	r21
    195c:	4f 91       	pop	r20
    195e:	3f 91       	pop	r19
    1960:	2f 91       	pop	r18
    1962:	0f 90       	pop	r0
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	0f 90       	pop	r0
    1968:	1f 90       	pop	r1
    196a:	18 95       	reti

0000196c <__vector_3>:

ISR(INT2_vect){
    196c:	1f 92       	push	r1
    196e:	0f 92       	push	r0
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	2f 93       	push	r18
    1978:	3f 93       	push	r19
    197a:	4f 93       	push	r20
    197c:	5f 93       	push	r21
    197e:	6f 93       	push	r22
    1980:	7f 93       	push	r23
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
    1986:	af 93       	push	r26
    1988:	bf 93       	push	r27
    198a:	ef 93       	push	r30
    198c:	ff 93       	push	r31
	ExtInt2FunPtr();
    198e:	e0 91 8a 05 	lds	r30, 0x058A	; 0x80058a <__data_end>
    1992:	f0 91 8b 05 	lds	r31, 0x058B	; 0x80058b <__data_end+0x1>
    1996:	09 95       	icall
    1998:	ff 91       	pop	r31
    199a:	ef 91       	pop	r30
    199c:	bf 91       	pop	r27
    199e:	af 91       	pop	r26
    19a0:	9f 91       	pop	r25
    19a2:	8f 91       	pop	r24
    19a4:	7f 91       	pop	r23
    19a6:	6f 91       	pop	r22
    19a8:	5f 91       	pop	r21
    19aa:	4f 91       	pop	r20
    19ac:	3f 91       	pop	r19
    19ae:	2f 91       	pop	r18
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	0f 90       	pop	r0
    19b6:	1f 90       	pop	r1
    19b8:	18 95       	reti

000019ba <SPI_Init>:
*  Author: user
*/
#include "SPI.h"


void SPI_Init(SPI_ConfigTypes * options){
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	ec 01       	movw	r28, r24
	switch(options->stateMode){
    19c0:	88 81       	ld	r24, Y
    19c2:	88 23       	and	r24, r24
    19c4:	a9 f0       	breq	.+42     	; 0x19f0 <SPI_Init+0x36>
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	29 f5       	brne	.+74     	; 0x1a14 <SPI_Init+0x5a>
		case Master:
		DIO_ConfigChannel(SPI_SSPin,Output);
    19ca:	61 e0       	ldi	r22, 0x01	; 1
    19cc:	8c e0       	ldi	r24, 0x0C	; 12
    19ce:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Output);
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	8d e0       	ldi	r24, 0x0D	; 13
    19d6:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Input);
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	8e e0       	ldi	r24, 0x0E	; 14
    19de:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Output);
    19e2:	61 e0       	ldi	r22, 0x01	; 1
    19e4:	8f e0       	ldi	r24, 0x0F	; 15
    19e6:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 1;
    19ea:	6c 9a       	sbi	0x0d, 4	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
    19ec:	6e 9a       	sbi	0x0d, 6	; 13
		break;
    19ee:	12 c0       	rjmp	.+36     	; 0x1a14 <SPI_Init+0x5a>
		case Slave:
		DIO_ConfigChannel(SPI_SSPin,Input);
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	8c e0       	ldi	r24, 0x0C	; 12
    19f4:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Input);
    19f8:	60 e0       	ldi	r22, 0x00	; 0
    19fa:	8d e0       	ldi	r24, 0x0D	; 13
    19fc:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Output);
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	8e e0       	ldi	r24, 0x0E	; 14
    1a04:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Input);
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	8f e0       	ldi	r24, 0x0F	; 15
    1a0c:	0e 94 43 0b 	call	0x1686	; 0x1686 <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 0;
    1a10:	6c 98       	cbi	0x0d, 4	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
    1a12:	6e 9a       	sbi	0x0d, 6	; 13
		break;
	}
	SPI->SPCR_Reg.AllRegister |= (options->dataOrderMode<<5);
    1a14:	2d b1       	in	r18, 0x0d	; 13
    1a16:	99 81       	ldd	r25, Y+1	; 0x01
    1a18:	30 e2       	ldi	r19, 0x20	; 32
    1a1a:	93 9f       	mul	r25, r19
    1a1c:	c0 01       	movw	r24, r0
    1a1e:	11 24       	eor	r1, r1
    1a20:	82 2b       	or	r24, r18
    1a22:	8d b9       	out	0x0d, r24	; 13
	if (options->doubleSpeedMode == DoupleSpeedEnable)
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	31 f4       	brne	.+12     	; 0x1a36 <SPI_Init+0x7c>
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 1;
    1a2a:	70 9a       	sbi	0x0e, 0	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
    1a2c:	9d b1       	in	r25, 0x0d	; 13
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	89 2b       	or	r24, r25
    1a32:	8d b9       	out	0x0d, r24	; 13
    1a34:	05 c0       	rjmp	.+10     	; 0x1a40 <SPI_Init+0x86>
	}
	else
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 0;
    1a36:	70 98       	cbi	0x0e, 0	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
    1a38:	9d b1       	in	r25, 0x0d	; 13
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	89 2b       	or	r24, r25
    1a3e:	8d b9       	out	0x0d, r24	; 13
	}
}
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	08 95       	ret

00001a46 <SPI_TxRx>:
u8 SPI_TxRx(u8 data){
	SPI->SPDR_Reg = data;
    1a46:	8f b9       	out	0x0f, r24	; 15
	while(SPI->SPSR_Reg.Bits.SPIF_Bit == 0);
    1a48:	77 9b       	sbis	0x0e, 7	; 14
    1a4a:	fe cf       	rjmp	.-4      	; 0x1a48 <SPI_TxRx+0x2>
	return SPI->SPDR_Reg;
    1a4c:	8f b1       	in	r24, 0x0f	; 15
}
    1a4e:	08 95       	ret

00001a50 <TIMER1_Init>:
}
void TIMER1_OCR1A_SetValue(u16 value){
	TIMER1_OCR1A_Reg = value;
}
void TIMER1_OCR1B_SetValue(u16 value){
	TIMER1_OCR1B_Reg = value;
    1a50:	fc 01       	movw	r30, r24
    1a52:	80 81       	ld	r24, Z
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	99 f0       	breq	.+38     	; 0x1a7e <TIMER1_Init+0x2e>
    1a58:	28 f0       	brcs	.+10     	; 0x1a64 <TIMER1_Init+0x14>
    1a5a:	82 30       	cpi	r24, 0x02	; 2
    1a5c:	e9 f0       	breq	.+58     	; 0x1a98 <TIMER1_Init+0x48>
    1a5e:	83 30       	cpi	r24, 0x03	; 3
    1a60:	41 f1       	breq	.+80     	; 0x1ab2 <TIMER1_Init+0x62>
    1a62:	33 c0       	rjmp	.+102    	; 0x1aca <TIMER1_Init+0x7a>
    1a64:	8f b5       	in	r24, 0x2f	; 47
    1a66:	8e 7f       	andi	r24, 0xFE	; 254
    1a68:	8f bd       	out	0x2f, r24	; 47
    1a6a:	8f b5       	in	r24, 0x2f	; 47
    1a6c:	8d 7f       	andi	r24, 0xFD	; 253
    1a6e:	8f bd       	out	0x2f, r24	; 47
    1a70:	8e b5       	in	r24, 0x2e	; 46
    1a72:	87 7f       	andi	r24, 0xF7	; 247
    1a74:	8e bd       	out	0x2e, r24	; 46
    1a76:	8e b5       	in	r24, 0x2e	; 46
    1a78:	8f 7e       	andi	r24, 0xEF	; 239
    1a7a:	8e bd       	out	0x2e, r24	; 46
    1a7c:	26 c0       	rjmp	.+76     	; 0x1aca <TIMER1_Init+0x7a>
    1a7e:	8f b5       	in	r24, 0x2f	; 47
    1a80:	8e 7f       	andi	r24, 0xFE	; 254
    1a82:	8f bd       	out	0x2f, r24	; 47
    1a84:	8f b5       	in	r24, 0x2f	; 47
    1a86:	8d 7f       	andi	r24, 0xFD	; 253
    1a88:	8f bd       	out	0x2f, r24	; 47
    1a8a:	8e b5       	in	r24, 0x2e	; 46
    1a8c:	88 60       	ori	r24, 0x08	; 8
    1a8e:	8e bd       	out	0x2e, r24	; 46
    1a90:	8e b5       	in	r24, 0x2e	; 46
    1a92:	8f 7e       	andi	r24, 0xEF	; 239
    1a94:	8e bd       	out	0x2e, r24	; 46
    1a96:	19 c0       	rjmp	.+50     	; 0x1aca <TIMER1_Init+0x7a>
    1a98:	8f b5       	in	r24, 0x2f	; 47
    1a9a:	8e 7f       	andi	r24, 0xFE	; 254
    1a9c:	8f bd       	out	0x2f, r24	; 47
    1a9e:	8f b5       	in	r24, 0x2f	; 47
    1aa0:	82 60       	ori	r24, 0x02	; 2
    1aa2:	8f bd       	out	0x2f, r24	; 47
    1aa4:	8e b5       	in	r24, 0x2e	; 46
    1aa6:	88 60       	ori	r24, 0x08	; 8
    1aa8:	8e bd       	out	0x2e, r24	; 46
    1aaa:	8e b5       	in	r24, 0x2e	; 46
    1aac:	80 61       	ori	r24, 0x10	; 16
    1aae:	8e bd       	out	0x2e, r24	; 46
    1ab0:	0c c0       	rjmp	.+24     	; 0x1aca <TIMER1_Init+0x7a>
    1ab2:	8f b5       	in	r24, 0x2f	; 47
    1ab4:	8e 7f       	andi	r24, 0xFE	; 254
    1ab6:	8f bd       	out	0x2f, r24	; 47
    1ab8:	8f b5       	in	r24, 0x2f	; 47
    1aba:	82 60       	ori	r24, 0x02	; 2
    1abc:	8f bd       	out	0x2f, r24	; 47
    1abe:	8e b5       	in	r24, 0x2e	; 46
    1ac0:	87 7f       	andi	r24, 0xF7	; 247
    1ac2:	8e bd       	out	0x2e, r24	; 46
    1ac4:	8e b5       	in	r24, 0x2e	; 46
    1ac6:	80 61       	ori	r24, 0x10	; 16
    1ac8:	8e bd       	out	0x2e, r24	; 46
    1aca:	81 81       	ldd	r24, Z+1	; 0x01
    1acc:	82 30       	cpi	r24, 0x02	; 2
    1ace:	01 f1       	breq	.+64     	; 0x1b10 <TIMER1_Init+0xc0>
    1ad0:	28 f4       	brcc	.+10     	; 0x1adc <TIMER1_Init+0x8c>
    1ad2:	88 23       	and	r24, r24
    1ad4:	49 f0       	breq	.+18     	; 0x1ae8 <TIMER1_Init+0x98>
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	89 f0       	breq	.+34     	; 0x1afc <TIMER1_Init+0xac>
    1ada:	41 c0       	rjmp	.+130    	; 0x1b5e <TIMER1_Init+0x10e>
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	61 f1       	breq	.+88     	; 0x1b38 <TIMER1_Init+0xe8>
    1ae0:	08 f1       	brcs	.+66     	; 0x1b24 <TIMER1_Init+0xd4>
    1ae2:	85 30       	cpi	r24, 0x05	; 5
    1ae4:	99 f1       	breq	.+102    	; 0x1b4c <TIMER1_Init+0xfc>
    1ae6:	3b c0       	rjmp	.+118    	; 0x1b5e <TIMER1_Init+0x10e>
    1ae8:	8e b5       	in	r24, 0x2e	; 46
    1aea:	8e 7f       	andi	r24, 0xFE	; 254
    1aec:	8e bd       	out	0x2e, r24	; 46
    1aee:	8e b5       	in	r24, 0x2e	; 46
    1af0:	8d 7f       	andi	r24, 0xFD	; 253
    1af2:	8e bd       	out	0x2e, r24	; 46
    1af4:	8e b5       	in	r24, 0x2e	; 46
    1af6:	8b 7f       	andi	r24, 0xFB	; 251
    1af8:	8e bd       	out	0x2e, r24	; 46
    1afa:	31 c0       	rjmp	.+98     	; 0x1b5e <TIMER1_Init+0x10e>
    1afc:	8e b5       	in	r24, 0x2e	; 46
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	8e bd       	out	0x2e, r24	; 46
    1b02:	8e b5       	in	r24, 0x2e	; 46
    1b04:	8d 7f       	andi	r24, 0xFD	; 253
    1b06:	8e bd       	out	0x2e, r24	; 46
    1b08:	8e b5       	in	r24, 0x2e	; 46
    1b0a:	8b 7f       	andi	r24, 0xFB	; 251
    1b0c:	8e bd       	out	0x2e, r24	; 46
    1b0e:	27 c0       	rjmp	.+78     	; 0x1b5e <TIMER1_Init+0x10e>
    1b10:	8e b5       	in	r24, 0x2e	; 46
    1b12:	8e 7f       	andi	r24, 0xFE	; 254
    1b14:	8e bd       	out	0x2e, r24	; 46
    1b16:	8e b5       	in	r24, 0x2e	; 46
    1b18:	82 60       	ori	r24, 0x02	; 2
    1b1a:	8e bd       	out	0x2e, r24	; 46
    1b1c:	8e b5       	in	r24, 0x2e	; 46
    1b1e:	8b 7f       	andi	r24, 0xFB	; 251
    1b20:	8e bd       	out	0x2e, r24	; 46
    1b22:	1d c0       	rjmp	.+58     	; 0x1b5e <TIMER1_Init+0x10e>
    1b24:	8e b5       	in	r24, 0x2e	; 46
    1b26:	81 60       	ori	r24, 0x01	; 1
    1b28:	8e bd       	out	0x2e, r24	; 46
    1b2a:	8e b5       	in	r24, 0x2e	; 46
    1b2c:	82 60       	ori	r24, 0x02	; 2
    1b2e:	8e bd       	out	0x2e, r24	; 46
    1b30:	8e b5       	in	r24, 0x2e	; 46
    1b32:	8b 7f       	andi	r24, 0xFB	; 251
    1b34:	8e bd       	out	0x2e, r24	; 46
    1b36:	13 c0       	rjmp	.+38     	; 0x1b5e <TIMER1_Init+0x10e>
    1b38:	8e b5       	in	r24, 0x2e	; 46
    1b3a:	8e 7f       	andi	r24, 0xFE	; 254
    1b3c:	8e bd       	out	0x2e, r24	; 46
    1b3e:	8e b5       	in	r24, 0x2e	; 46
    1b40:	8d 7f       	andi	r24, 0xFD	; 253
    1b42:	8e bd       	out	0x2e, r24	; 46
    1b44:	8e b5       	in	r24, 0x2e	; 46
    1b46:	84 60       	ori	r24, 0x04	; 4
    1b48:	8e bd       	out	0x2e, r24	; 46
    1b4a:	09 c0       	rjmp	.+18     	; 0x1b5e <TIMER1_Init+0x10e>
    1b4c:	8e b5       	in	r24, 0x2e	; 46
    1b4e:	81 60       	ori	r24, 0x01	; 1
    1b50:	8e bd       	out	0x2e, r24	; 46
    1b52:	8e b5       	in	r24, 0x2e	; 46
    1b54:	8d 7f       	andi	r24, 0xFD	; 253
    1b56:	8e bd       	out	0x2e, r24	; 46
    1b58:	8e b5       	in	r24, 0x2e	; 46
    1b5a:	84 60       	ori	r24, 0x04	; 4
    1b5c:	8e bd       	out	0x2e, r24	; 46
    1b5e:	82 81       	ldd	r24, Z+2	; 0x02
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	59 f0       	breq	.+22     	; 0x1b7a <TIMER1_Init+0x12a>
    1b64:	83 30       	cpi	r24, 0x03	; 3
    1b66:	81 f0       	breq	.+32     	; 0x1b88 <TIMER1_Init+0x138>
    1b68:	81 11       	cpse	r24, r1
    1b6a:	14 c0       	rjmp	.+40     	; 0x1b94 <TIMER1_Init+0x144>
    1b6c:	8f b5       	in	r24, 0x2f	; 47
    1b6e:	8f 7b       	andi	r24, 0xBF	; 191
    1b70:	8f bd       	out	0x2f, r24	; 47
    1b72:	8f b5       	in	r24, 0x2f	; 47
    1b74:	8f 77       	andi	r24, 0x7F	; 127
    1b76:	8f bd       	out	0x2f, r24	; 47
    1b78:	0d c0       	rjmp	.+26     	; 0x1b94 <TIMER1_Init+0x144>
    1b7a:	8f b5       	in	r24, 0x2f	; 47
    1b7c:	8f 7b       	andi	r24, 0xBF	; 191
    1b7e:	8f bd       	out	0x2f, r24	; 47
    1b80:	8f b5       	in	r24, 0x2f	; 47
    1b82:	80 68       	ori	r24, 0x80	; 128
    1b84:	8f bd       	out	0x2f, r24	; 47
    1b86:	06 c0       	rjmp	.+12     	; 0x1b94 <TIMER1_Init+0x144>
    1b88:	8f b5       	in	r24, 0x2f	; 47
    1b8a:	8f 7b       	andi	r24, 0xBF	; 191
    1b8c:	8f bd       	out	0x2f, r24	; 47
    1b8e:	8f b5       	in	r24, 0x2f	; 47
    1b90:	8f 77       	andi	r24, 0x7F	; 127
    1b92:	8f bd       	out	0x2f, r24	; 47
    1b94:	99 b7       	in	r25, 0x39	; 57
    1b96:	87 81       	ldd	r24, Z+7	; 0x07
    1b98:	88 0f       	add	r24, r24
    1b9a:	88 0f       	add	r24, r24
    1b9c:	89 2b       	or	r24, r25
    1b9e:	89 bf       	out	0x39, r24	; 57
    1ba0:	08 95       	ret

00001ba2 <TIMER1_OCR1A_SetValue>:
    1ba2:	9b bd       	out	0x2b, r25	; 43
    1ba4:	8a bd       	out	0x2a, r24	; 42
    1ba6:	08 95       	ret

00001ba8 <TIMER1_ICR_SetValue>:
}
void TIMER1_ICR_SetValue(u16 value){
	TIMER1_ICR1_Reg = value;
    1ba8:	97 bd       	out	0x27, r25	; 39
    1baa:	86 bd       	out	0x26, r24	; 38
    1bac:	08 95       	ret

00001bae <__vector_7>:
}

ISR(TIMER1_COMPA_vect){
    1bae:	1f 92       	push	r1
    1bb0:	0f 92       	push	r0
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	0f 92       	push	r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	2f 93       	push	r18
    1bba:	3f 93       	push	r19
    1bbc:	4f 93       	push	r20
    1bbe:	5f 93       	push	r21
    1bc0:	6f 93       	push	r22
    1bc2:	7f 93       	push	r23
    1bc4:	8f 93       	push	r24
    1bc6:	9f 93       	push	r25
    1bc8:	af 93       	push	r26
    1bca:	bf 93       	push	r27
    1bcc:	ef 93       	push	r30
    1bce:	ff 93       	push	r31
	Timer1Oc1aIntFunPtr();
    1bd0:	e0 91 94 05 	lds	r30, 0x0594	; 0x800594 <Timer1Oc1aIntFunPtr>
    1bd4:	f0 91 95 05 	lds	r31, 0x0595	; 0x800595 <Timer1Oc1aIntFunPtr+0x1>
    1bd8:	09 95       	icall
}
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	0f 90       	pop	r0
    1bf8:	1f 90       	pop	r1
    1bfa:	18 95       	reti

00001bfc <__vector_8>:

ISR(TIMER1_COMPB_vect){
    1bfc:	1f 92       	push	r1
    1bfe:	0f 92       	push	r0
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	0f 92       	push	r0
    1c04:	11 24       	eor	r1, r1
    1c06:	2f 93       	push	r18
    1c08:	3f 93       	push	r19
    1c0a:	4f 93       	push	r20
    1c0c:	5f 93       	push	r21
    1c0e:	6f 93       	push	r22
    1c10:	7f 93       	push	r23
    1c12:	8f 93       	push	r24
    1c14:	9f 93       	push	r25
    1c16:	af 93       	push	r26
    1c18:	bf 93       	push	r27
    1c1a:	ef 93       	push	r30
    1c1c:	ff 93       	push	r31
	Timer1Oc1bIntFunPtr();
    1c1e:	e0 91 92 05 	lds	r30, 0x0592	; 0x800592 <Timer1Oc1bIntFunPtr>
    1c22:	f0 91 93 05 	lds	r31, 0x0593	; 0x800593 <Timer1Oc1bIntFunPtr+0x1>
    1c26:	09 95       	icall
}
    1c28:	ff 91       	pop	r31
    1c2a:	ef 91       	pop	r30
    1c2c:	bf 91       	pop	r27
    1c2e:	af 91       	pop	r26
    1c30:	9f 91       	pop	r25
    1c32:	8f 91       	pop	r24
    1c34:	7f 91       	pop	r23
    1c36:	6f 91       	pop	r22
    1c38:	5f 91       	pop	r21
    1c3a:	4f 91       	pop	r20
    1c3c:	3f 91       	pop	r19
    1c3e:	2f 91       	pop	r18
    1c40:	0f 90       	pop	r0
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	0f 90       	pop	r0
    1c46:	1f 90       	pop	r1
    1c48:	18 95       	reti

00001c4a <__vector_9>:

ISR(TIMER1_OVF_vect){
    1c4a:	1f 92       	push	r1
    1c4c:	0f 92       	push	r0
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	0f 92       	push	r0
    1c52:	11 24       	eor	r1, r1
    1c54:	2f 93       	push	r18
    1c56:	3f 93       	push	r19
    1c58:	4f 93       	push	r20
    1c5a:	5f 93       	push	r21
    1c5c:	6f 93       	push	r22
    1c5e:	7f 93       	push	r23
    1c60:	8f 93       	push	r24
    1c62:	9f 93       	push	r25
    1c64:	af 93       	push	r26
    1c66:	bf 93       	push	r27
    1c68:	ef 93       	push	r30
    1c6a:	ff 93       	push	r31
	Timer1TovIntFunPtr();
    1c6c:	e0 91 90 05 	lds	r30, 0x0590	; 0x800590 <Timer1TovIntFunPtr>
    1c70:	f0 91 91 05 	lds	r31, 0x0591	; 0x800591 <Timer1TovIntFunPtr+0x1>
    1c74:	09 95       	icall
}
    1c76:	ff 91       	pop	r31
    1c78:	ef 91       	pop	r30
    1c7a:	bf 91       	pop	r27
    1c7c:	af 91       	pop	r26
    1c7e:	9f 91       	pop	r25
    1c80:	8f 91       	pop	r24
    1c82:	7f 91       	pop	r23
    1c84:	6f 91       	pop	r22
    1c86:	5f 91       	pop	r21
    1c88:	4f 91       	pop	r20
    1c8a:	3f 91       	pop	r19
    1c8c:	2f 91       	pop	r18
    1c8e:	0f 90       	pop	r0
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	0f 90       	pop	r0
    1c94:	1f 90       	pop	r1
    1c96:	18 95       	reti

00001c98 <TWI_Init>:
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
	while(TWI->TWCR_Reg.Bits.TWINT_Bit == 0);//Waiting the flag
	*data = TWI->TWDR_Reg;
	return TWI_Status();
}
    1c98:	82 b9       	out	0x02, r24	; 2
    1c9a:	8e e0       	ldi	r24, 0x0E	; 14
    1c9c:	80 b9       	out	0x00, r24	; 0
    1c9e:	08 95       	ret

00001ca0 <TWI_Start>:
    1ca0:	86 b7       	in	r24, 0x36	; 54
    1ca2:	80 62       	ori	r24, 0x20	; 32
    1ca4:	86 bf       	out	0x36, r24	; 54
    1ca6:	86 b7       	in	r24, 0x36	; 54
    1ca8:	8f 7e       	andi	r24, 0xEF	; 239
    1caa:	86 bf       	out	0x36, r24	; 54
    1cac:	86 b7       	in	r24, 0x36	; 54
    1cae:	8f 7b       	andi	r24, 0xBF	; 191
    1cb0:	86 bf       	out	0x36, r24	; 54
    1cb2:	86 b7       	in	r24, 0x36	; 54
    1cb4:	84 60       	ori	r24, 0x04	; 4
    1cb6:	86 bf       	out	0x36, r24	; 54
    1cb8:	86 b7       	in	r24, 0x36	; 54
    1cba:	80 68       	ori	r24, 0x80	; 128
    1cbc:	86 bf       	out	0x36, r24	; 54
    1cbe:	06 b6       	in	r0, 0x36	; 54
    1cc0:	07 fe       	sbrs	r0, 7
    1cc2:	fd cf       	rjmp	.-6      	; 0x1cbe <TWI_Start+0x1e>
    1cc4:	81 b1       	in	r24, 0x01	; 1
    1cc6:	88 7f       	andi	r24, 0xF8	; 248
    1cc8:	08 95       	ret

00001cca <TWI_Send>:
    1cca:	83 b9       	out	0x03, r24	; 3
    1ccc:	86 b7       	in	r24, 0x36	; 54
    1cce:	8f 7d       	andi	r24, 0xDF	; 223
    1cd0:	86 bf       	out	0x36, r24	; 54
    1cd2:	86 b7       	in	r24, 0x36	; 54
    1cd4:	8f 7e       	andi	r24, 0xEF	; 239
    1cd6:	86 bf       	out	0x36, r24	; 54
    1cd8:	86 b7       	in	r24, 0x36	; 54
    1cda:	8f 7b       	andi	r24, 0xBF	; 191
    1cdc:	86 bf       	out	0x36, r24	; 54
    1cde:	86 b7       	in	r24, 0x36	; 54
    1ce0:	84 60       	ori	r24, 0x04	; 4
    1ce2:	86 bf       	out	0x36, r24	; 54
    1ce4:	86 b7       	in	r24, 0x36	; 54
    1ce6:	80 68       	ori	r24, 0x80	; 128
    1ce8:	86 bf       	out	0x36, r24	; 54
    1cea:	06 b6       	in	r0, 0x36	; 54
    1cec:	07 fe       	sbrs	r0, 7
    1cee:	fd cf       	rjmp	.-6      	; 0x1cea <TWI_Send+0x20>
    1cf0:	81 b1       	in	r24, 0x01	; 1
    1cf2:	88 7f       	andi	r24, 0xF8	; 248
    1cf4:	08 95       	ret

00001cf6 <TWI_Read_NAck>:
u8 TWI_Read_NAck(u8 * data){
    1cf6:	fc 01       	movw	r30, r24
	TWI->TWCR_Reg.Bits.TWSTA_Bit = 0;//Enable/Disable Start
    1cf8:	96 b7       	in	r25, 0x36	; 54
    1cfa:	9f 7d       	andi	r25, 0xDF	; 223
    1cfc:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWSTO_Bit = 0;//Enable/Disable Stop at the End
    1cfe:	96 b7       	in	r25, 0x36	; 54
    1d00:	9f 7e       	andi	r25, 0xEF	; 239
    1d02:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWEA_Bit = 0;//Read with Ack. Bit
    1d04:	96 b7       	in	r25, 0x36	; 54
    1d06:	9f 7b       	andi	r25, 0xBF	; 191
    1d08:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
    1d0a:	96 b7       	in	r25, 0x36	; 54
    1d0c:	94 60       	ori	r25, 0x04	; 4
    1d0e:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
    1d10:	96 b7       	in	r25, 0x36	; 54
    1d12:	90 68       	ori	r25, 0x80	; 128
    1d14:	96 bf       	out	0x36, r25	; 54
	while(TWI->TWCR_Reg.Bits.TWINT_Bit == 0);//Waiting the flag
    1d16:	06 b6       	in	r0, 0x36	; 54
    1d18:	07 fe       	sbrs	r0, 7
    1d1a:	fd cf       	rjmp	.-6      	; 0x1d16 <TWI_Read_NAck+0x20>
	*data = TWI->TWDR_Reg;
    1d1c:	83 b1       	in	r24, 0x03	; 3
    1d1e:	80 83       	st	Z, r24
void TWI_Init(u8 address){
	TWI->TWAR_Reg = address;
	TWI->TWBR_Reg = MyTWBR;
}
u8 TWI_Status(void){
	return (TWI->TWSR_Reg & 0xF8);
    1d20:	81 b1       	in	r24, 0x01	; 1
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
	while(TWI->TWCR_Reg.Bits.TWINT_Bit == 0);//Waiting the flag
	*data = TWI->TWDR_Reg;
	return TWI_Status();
}
    1d22:	88 7f       	andi	r24, 0xF8	; 248
    1d24:	08 95       	ret

00001d26 <TWI_Stop>:
void TWI_Stop(void){
	TWI->TWCR_Reg.Bits.TWSTA_Bit = 0;//Enable/Disable Start
    1d26:	86 b7       	in	r24, 0x36	; 54
    1d28:	8f 7d       	andi	r24, 0xDF	; 223
    1d2a:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWSTO_Bit = 1;//Enable/Disable Stop at the End
    1d2c:	86 b7       	in	r24, 0x36	; 54
    1d2e:	80 61       	ori	r24, 0x10	; 16
    1d30:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWEA_Bit = 0;//Read with Ack. Bit
    1d32:	86 b7       	in	r24, 0x36	; 54
    1d34:	8f 7b       	andi	r24, 0xBF	; 191
    1d36:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
    1d38:	86 b7       	in	r24, 0x36	; 54
    1d3a:	84 60       	ori	r24, 0x04	; 4
    1d3c:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
    1d3e:	86 b7       	in	r24, 0x36	; 54
    1d40:	80 68       	ori	r24, 0x80	; 128
    1d42:	86 bf       	out	0x36, r24	; 54
    1d44:	08 95       	ret

00001d46 <UART_Init>:
 * Created: 4/28/2023 3:23:54 PM
 *  Author: user
 */ 
#include "UART.h"

void UART_Init(UART_Config * options){
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	ec 01       	movw	r28, r24
	u16 MyUBRR = 0;
	if (options->speedMode == DoupleSpeed_Enable)
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	e9 f4       	brne	.+58     	; 0x1d8c <UART_Init+0x46>
	{
		UART->UCSRA_Reg.Bits.U2X_Bit = 1;
    1d52:	59 9a       	sbi	0x0b, 1	; 11
		MyUBRR = (F_CPU/(8UL*options->baudRate))-1;
    1d54:	28 81       	ld	r18, Y
    1d56:	39 81       	ldd	r19, Y+1	; 0x01
    1d58:	c9 01       	movw	r24, r18
    1d5a:	a0 e0       	ldi	r26, 0x00	; 0
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	aa 1f       	adc	r26, r26
    1d64:	bb 1f       	adc	r27, r27
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	aa 1f       	adc	r26, r26
    1d6c:	bb 1f       	adc	r27, r27
    1d6e:	9c 01       	movw	r18, r24
    1d70:	ad 01       	movw	r20, r26
    1d72:	22 0f       	add	r18, r18
    1d74:	33 1f       	adc	r19, r19
    1d76:	44 1f       	adc	r20, r20
    1d78:	55 1f       	adc	r21, r21
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	74 e2       	ldi	r23, 0x24	; 36
    1d7e:	84 ef       	ldi	r24, 0xF4	; 244
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 cc 10 	call	0x2198	; 0x2198 <__udivmodsi4>
    1d86:	21 50       	subi	r18, 0x01	; 1
    1d88:	31 09       	sbc	r19, r1
    1d8a:	20 c0       	rjmp	.+64     	; 0x1dcc <UART_Init+0x86>
	} 
	else
	{
		UART->UCSRA_Reg.Bits.U2X_Bit = 0;
    1d8c:	59 98       	cbi	0x0b, 1	; 11
		MyUBRR = (F_CPU/(16UL*options->baudRate))-1;
    1d8e:	28 81       	ld	r18, Y
    1d90:	39 81       	ldd	r19, Y+1	; 0x01
    1d92:	c9 01       	movw	r24, r18
    1d94:	a0 e0       	ldi	r26, 0x00	; 0
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	aa 1f       	adc	r26, r26
    1d9e:	bb 1f       	adc	r27, r27
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	aa 1f       	adc	r26, r26
    1da6:	bb 1f       	adc	r27, r27
    1da8:	9c 01       	movw	r18, r24
    1daa:	ad 01       	movw	r20, r26
    1dac:	22 0f       	add	r18, r18
    1dae:	33 1f       	adc	r19, r19
    1db0:	44 1f       	adc	r20, r20
    1db2:	55 1f       	adc	r21, r21
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	44 1f       	adc	r20, r20
    1dba:	55 1f       	adc	r21, r21
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	74 e2       	ldi	r23, 0x24	; 36
    1dc0:	84 ef       	ldi	r24, 0xF4	; 244
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	0e 94 cc 10 	call	0x2198	; 0x2198 <__udivmodsi4>
    1dc8:	21 50       	subi	r18, 0x01	; 1
    1dca:	31 09       	sbc	r19, r1
	}
	UART->UBRRL_Reg = MyUBRR;
    1dcc:	29 b9       	out	0x09, r18	; 9
	UART->UCSRC_UBRRH_Reg.UBRRH_AllRegister = MyUBRR>>8;
    1dce:	30 bd       	out	0x20, r19	; 32
	
	if (options->characterSize == CharacterSize_9Bits)
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	97 30       	cpi	r25, 0x07	; 7
    1dd4:	41 f4       	brne	.+16     	; 0x1de6 <UART_Init+0xa0>
	{
		UART->UCSRC_UBRRH_Reg.UCSRC_Bits.UCSZ0_Bit = 1;
    1dd6:	80 b5       	in	r24, 0x20	; 32
    1dd8:	82 60       	ori	r24, 0x02	; 2
    1dda:	80 bd       	out	0x20, r24	; 32
		UART->UCSRC_UBRRH_Reg.UCSRC_Bits.UCSZ1_Bit = 1;
    1ddc:	80 b5       	in	r24, 0x20	; 32
    1dde:	84 60       	ori	r24, 0x04	; 4
    1de0:	80 bd       	out	0x20, r24	; 32
		UART->UCSRB_Reg.Bits.UCSZ2_Bit = 1;
    1de2:	52 9a       	sbi	0x0a, 2	; 10
    1de4:	05 c0       	rjmp	.+10     	; 0x1df0 <UART_Init+0xaa>
	} 
	else
	{
		UART->UCSRC_UBRRH_Reg.UCSRC_AllRegister |= (UCSRC_SelectEnable)|(options->characterSize<<1);
    1de6:	80 b5       	in	r24, 0x20	; 32
    1de8:	99 0f       	add	r25, r25
    1dea:	80 68       	ori	r24, 0x80	; 128
    1dec:	89 2b       	or	r24, r25
    1dee:	80 bd       	out	0x20, r24	; 32
	}
	UART->UCSRC_UBRRH_Reg.UCSRC_AllRegister |= (UCSRC_SelectEnable)|(options->stopBits<<3);
    1df0:	80 b5       	in	r24, 0x20	; 32
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	99 0f       	add	r25, r25
    1df6:	99 0f       	add	r25, r25
    1df8:	99 0f       	add	r25, r25
    1dfa:	80 68       	ori	r24, 0x80	; 128
    1dfc:	89 2b       	or	r24, r25
    1dfe:	80 bd       	out	0x20, r24	; 32
	UART->UCSRC_UBRRH_Reg.UCSRC_AllRegister |= (UCSRC_SelectEnable)|(options->parityMode<<4);
    1e00:	20 b5       	in	r18, 0x20	; 32
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	30 e1       	ldi	r19, 0x10	; 16
    1e06:	93 9f       	mul	r25, r19
    1e08:	c0 01       	movw	r24, r0
    1e0a:	11 24       	eor	r1, r1
    1e0c:	92 2f       	mov	r25, r18
    1e0e:	90 68       	ori	r25, 0x80	; 128
    1e10:	89 2b       	or	r24, r25
    1e12:	80 bd       	out	0x20, r24	; 32
	UART->UCSRB_Reg.Bits.TXEN_Bit = options->txMode;
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
    1e16:	80 fd       	sbrc	r24, 0
    1e18:	53 9a       	sbi	0x0a, 3	; 10
    1e1a:	80 ff       	sbrs	r24, 0
    1e1c:	53 98       	cbi	0x0a, 3	; 10
	UART->UCSRB_Reg.Bits.RXEN_Bit = options->rxMode;
    1e1e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e20:	80 fd       	sbrc	r24, 0
    1e22:	54 9a       	sbi	0x0a, 4	; 10
    1e24:	80 ff       	sbrs	r24, 0
    1e26:	54 98       	cbi	0x0a, 4	; 10
}
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	08 95       	ret

00001e2e <UART_Transmait>:
void UART_Transmait(u8 data){
	while(UART->UCSRA_Reg.Bits.UDRE_Bit == 0);
    1e2e:	5d 9b       	sbis	0x0b, 5	; 11
    1e30:	fe cf       	rjmp	.-4      	; 0x1e2e <UART_Transmait>
	UART->UDR_Reg = data;
    1e32:	8c b9       	out	0x0c, r24	; 12
    1e34:	08 95       	ret

00001e36 <UART_TransmaitString>:
}
void UART_TransmaitString(s8 * string){
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	fc 01       	movw	r30, r24
	u8 i = 0;
	while(string[i] != '\0'){
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 23       	and	r24, r24
    1e42:	59 f0       	breq	.+22     	; 0x1e5a <UART_TransmaitString+0x24>
    1e44:	8f 01       	movw	r16, r30
    1e46:	c0 e0       	ldi	r28, 0x00	; 0
		UART_Transmait(string[i]);
    1e48:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <UART_Transmait>
		i++;
    1e4c:	cf 5f       	subi	r28, 0xFF	; 255
	while(UART->UCSRA_Reg.Bits.UDRE_Bit == 0);
	UART->UDR_Reg = data;
}
void UART_TransmaitString(s8 * string){
	u8 i = 0;
	while(string[i] != '\0'){
    1e4e:	f8 01       	movw	r30, r16
    1e50:	ec 0f       	add	r30, r28
    1e52:	f1 1d       	adc	r31, r1
    1e54:	80 81       	ld	r24, Z
    1e56:	81 11       	cpse	r24, r1
    1e58:	f7 cf       	rjmp	.-18     	; 0x1e48 <UART_TransmaitString+0x12>
		UART_Transmait(string[i]);
		i++;
	}
}
    1e5a:	cf 91       	pop	r28
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	08 95       	ret

00001e62 <UART_Receive>:
u8 UART_Receive(void){
	while (UART->UCSRA_Reg.Bits.RXC_Bit == 0);
    1e62:	5f 9b       	sbis	0x0b, 7	; 11
    1e64:	fe cf       	rjmp	.-4      	; 0x1e62 <UART_Receive>
	return UART->UDR_Reg;
    1e66:	8c b1       	in	r24, 0x0c	; 12
    1e68:	08 95       	ret

00001e6a <__subsf3>:
    1e6a:	50 58       	subi	r21, 0x80	; 128

00001e6c <__addsf3>:
    1e6c:	bb 27       	eor	r27, r27
    1e6e:	aa 27       	eor	r26, r26
    1e70:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <__addsf3x>
    1e74:	0c 94 25 10 	jmp	0x204a	; 0x204a <__fp_round>
    1e78:	0e 94 17 10 	call	0x202e	; 0x202e <__fp_pscA>
    1e7c:	38 f0       	brcs	.+14     	; 0x1e8c <__addsf3+0x20>
    1e7e:	0e 94 1e 10 	call	0x203c	; 0x203c <__fp_pscB>
    1e82:	20 f0       	brcs	.+8      	; 0x1e8c <__addsf3+0x20>
    1e84:	39 f4       	brne	.+14     	; 0x1e94 <__addsf3+0x28>
    1e86:	9f 3f       	cpi	r25, 0xFF	; 255
    1e88:	19 f4       	brne	.+6      	; 0x1e90 <__addsf3+0x24>
    1e8a:	26 f4       	brtc	.+8      	; 0x1e94 <__addsf3+0x28>
    1e8c:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__fp_nan>
    1e90:	0e f4       	brtc	.+2      	; 0x1e94 <__addsf3+0x28>
    1e92:	e0 95       	com	r30
    1e94:	e7 fb       	bst	r30, 7
    1e96:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__fp_inf>

00001e9a <__addsf3x>:
    1e9a:	e9 2f       	mov	r30, r25
    1e9c:	0e 94 36 10 	call	0x206c	; 0x206c <__fp_split3>
    1ea0:	58 f3       	brcs	.-42     	; 0x1e78 <__addsf3+0xc>
    1ea2:	ba 17       	cp	r27, r26
    1ea4:	62 07       	cpc	r22, r18
    1ea6:	73 07       	cpc	r23, r19
    1ea8:	84 07       	cpc	r24, r20
    1eaa:	95 07       	cpc	r25, r21
    1eac:	20 f0       	brcs	.+8      	; 0x1eb6 <__addsf3x+0x1c>
    1eae:	79 f4       	brne	.+30     	; 0x1ece <__addsf3x+0x34>
    1eb0:	a6 f5       	brtc	.+104    	; 0x1f1a <__addsf3x+0x80>
    1eb2:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_zero>
    1eb6:	0e f4       	brtc	.+2      	; 0x1eba <__addsf3x+0x20>
    1eb8:	e0 95       	com	r30
    1eba:	0b 2e       	mov	r0, r27
    1ebc:	ba 2f       	mov	r27, r26
    1ebe:	a0 2d       	mov	r26, r0
    1ec0:	0b 01       	movw	r0, r22
    1ec2:	b9 01       	movw	r22, r18
    1ec4:	90 01       	movw	r18, r0
    1ec6:	0c 01       	movw	r0, r24
    1ec8:	ca 01       	movw	r24, r20
    1eca:	a0 01       	movw	r20, r0
    1ecc:	11 24       	eor	r1, r1
    1ece:	ff 27       	eor	r31, r31
    1ed0:	59 1b       	sub	r21, r25
    1ed2:	99 f0       	breq	.+38     	; 0x1efa <__addsf3x+0x60>
    1ed4:	59 3f       	cpi	r21, 0xF9	; 249
    1ed6:	50 f4       	brcc	.+20     	; 0x1eec <__addsf3x+0x52>
    1ed8:	50 3e       	cpi	r21, 0xE0	; 224
    1eda:	68 f1       	brcs	.+90     	; 0x1f36 <__addsf3x+0x9c>
    1edc:	1a 16       	cp	r1, r26
    1ede:	f0 40       	sbci	r31, 0x00	; 0
    1ee0:	a2 2f       	mov	r26, r18
    1ee2:	23 2f       	mov	r18, r19
    1ee4:	34 2f       	mov	r19, r20
    1ee6:	44 27       	eor	r20, r20
    1ee8:	58 5f       	subi	r21, 0xF8	; 248
    1eea:	f3 cf       	rjmp	.-26     	; 0x1ed2 <__addsf3x+0x38>
    1eec:	46 95       	lsr	r20
    1eee:	37 95       	ror	r19
    1ef0:	27 95       	ror	r18
    1ef2:	a7 95       	ror	r26
    1ef4:	f0 40       	sbci	r31, 0x00	; 0
    1ef6:	53 95       	inc	r21
    1ef8:	c9 f7       	brne	.-14     	; 0x1eec <__addsf3x+0x52>
    1efa:	7e f4       	brtc	.+30     	; 0x1f1a <__addsf3x+0x80>
    1efc:	1f 16       	cp	r1, r31
    1efe:	ba 0b       	sbc	r27, r26
    1f00:	62 0b       	sbc	r22, r18
    1f02:	73 0b       	sbc	r23, r19
    1f04:	84 0b       	sbc	r24, r20
    1f06:	ba f0       	brmi	.+46     	; 0x1f36 <__addsf3x+0x9c>
    1f08:	91 50       	subi	r25, 0x01	; 1
    1f0a:	a1 f0       	breq	.+40     	; 0x1f34 <__addsf3x+0x9a>
    1f0c:	ff 0f       	add	r31, r31
    1f0e:	bb 1f       	adc	r27, r27
    1f10:	66 1f       	adc	r22, r22
    1f12:	77 1f       	adc	r23, r23
    1f14:	88 1f       	adc	r24, r24
    1f16:	c2 f7       	brpl	.-16     	; 0x1f08 <__addsf3x+0x6e>
    1f18:	0e c0       	rjmp	.+28     	; 0x1f36 <__addsf3x+0x9c>
    1f1a:	ba 0f       	add	r27, r26
    1f1c:	62 1f       	adc	r22, r18
    1f1e:	73 1f       	adc	r23, r19
    1f20:	84 1f       	adc	r24, r20
    1f22:	48 f4       	brcc	.+18     	; 0x1f36 <__addsf3x+0x9c>
    1f24:	87 95       	ror	r24
    1f26:	77 95       	ror	r23
    1f28:	67 95       	ror	r22
    1f2a:	b7 95       	ror	r27
    1f2c:	f7 95       	ror	r31
    1f2e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f30:	08 f0       	brcs	.+2      	; 0x1f34 <__addsf3x+0x9a>
    1f32:	b0 cf       	rjmp	.-160    	; 0x1e94 <__addsf3+0x28>
    1f34:	93 95       	inc	r25
    1f36:	88 0f       	add	r24, r24
    1f38:	08 f0       	brcs	.+2      	; 0x1f3c <__addsf3x+0xa2>
    1f3a:	99 27       	eor	r25, r25
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	97 95       	ror	r25
    1f40:	87 95       	ror	r24
    1f42:	08 95       	ret

00001f44 <__fixunssfsi>:
    1f44:	0e 94 3e 10 	call	0x207c	; 0x207c <__fp_splitA>
    1f48:	88 f0       	brcs	.+34     	; 0x1f6c <__fixunssfsi+0x28>
    1f4a:	9f 57       	subi	r25, 0x7F	; 127
    1f4c:	98 f0       	brcs	.+38     	; 0x1f74 <__fixunssfsi+0x30>
    1f4e:	b9 2f       	mov	r27, r25
    1f50:	99 27       	eor	r25, r25
    1f52:	b7 51       	subi	r27, 0x17	; 23
    1f54:	b0 f0       	brcs	.+44     	; 0x1f82 <__fixunssfsi+0x3e>
    1f56:	e1 f0       	breq	.+56     	; 0x1f90 <__fixunssfsi+0x4c>
    1f58:	66 0f       	add	r22, r22
    1f5a:	77 1f       	adc	r23, r23
    1f5c:	88 1f       	adc	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	1a f0       	brmi	.+6      	; 0x1f68 <__fixunssfsi+0x24>
    1f62:	ba 95       	dec	r27
    1f64:	c9 f7       	brne	.-14     	; 0x1f58 <__fixunssfsi+0x14>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <__fixunssfsi+0x4c>
    1f68:	b1 30       	cpi	r27, 0x01	; 1
    1f6a:	91 f0       	breq	.+36     	; 0x1f90 <__fixunssfsi+0x4c>
    1f6c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <__fp_zero>
    1f70:	b1 e0       	ldi	r27, 0x01	; 1
    1f72:	08 95       	ret
    1f74:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__fp_zero>
    1f78:	67 2f       	mov	r22, r23
    1f7a:	78 2f       	mov	r23, r24
    1f7c:	88 27       	eor	r24, r24
    1f7e:	b8 5f       	subi	r27, 0xF8	; 248
    1f80:	39 f0       	breq	.+14     	; 0x1f90 <__fixunssfsi+0x4c>
    1f82:	b9 3f       	cpi	r27, 0xF9	; 249
    1f84:	cc f3       	brlt	.-14     	; 0x1f78 <__fixunssfsi+0x34>
    1f86:	86 95       	lsr	r24
    1f88:	77 95       	ror	r23
    1f8a:	67 95       	ror	r22
    1f8c:	b3 95       	inc	r27
    1f8e:	d9 f7       	brne	.-10     	; 0x1f86 <__fixunssfsi+0x42>
    1f90:	3e f4       	brtc	.+14     	; 0x1fa0 <__fixunssfsi+0x5c>
    1f92:	90 95       	com	r25
    1f94:	80 95       	com	r24
    1f96:	70 95       	com	r23
    1f98:	61 95       	neg	r22
    1f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa0:	08 95       	ret

00001fa2 <__floatunsisf>:
    1fa2:	e8 94       	clt
    1fa4:	09 c0       	rjmp	.+18     	; 0x1fb8 <__floatsisf+0x12>

00001fa6 <__floatsisf>:
    1fa6:	97 fb       	bst	r25, 7
    1fa8:	3e f4       	brtc	.+14     	; 0x1fb8 <__floatsisf+0x12>
    1faa:	90 95       	com	r25
    1fac:	80 95       	com	r24
    1fae:	70 95       	com	r23
    1fb0:	61 95       	neg	r22
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	99 23       	and	r25, r25
    1fba:	a9 f0       	breq	.+42     	; 0x1fe6 <__floatsisf+0x40>
    1fbc:	f9 2f       	mov	r31, r25
    1fbe:	96 e9       	ldi	r25, 0x96	; 150
    1fc0:	bb 27       	eor	r27, r27
    1fc2:	93 95       	inc	r25
    1fc4:	f6 95       	lsr	r31
    1fc6:	87 95       	ror	r24
    1fc8:	77 95       	ror	r23
    1fca:	67 95       	ror	r22
    1fcc:	b7 95       	ror	r27
    1fce:	f1 11       	cpse	r31, r1
    1fd0:	f8 cf       	rjmp	.-16     	; 0x1fc2 <__floatsisf+0x1c>
    1fd2:	fa f4       	brpl	.+62     	; 0x2012 <__floatsisf+0x6c>
    1fd4:	bb 0f       	add	r27, r27
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <__floatsisf+0x36>
    1fd8:	60 ff       	sbrs	r22, 0
    1fda:	1b c0       	rjmp	.+54     	; 0x2012 <__floatsisf+0x6c>
    1fdc:	6f 5f       	subi	r22, 0xFF	; 255
    1fde:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	16 c0       	rjmp	.+44     	; 0x2012 <__floatsisf+0x6c>
    1fe6:	88 23       	and	r24, r24
    1fe8:	11 f0       	breq	.+4      	; 0x1fee <__floatsisf+0x48>
    1fea:	96 e9       	ldi	r25, 0x96	; 150
    1fec:	11 c0       	rjmp	.+34     	; 0x2010 <__floatsisf+0x6a>
    1fee:	77 23       	and	r23, r23
    1ff0:	21 f0       	breq	.+8      	; 0x1ffa <__floatsisf+0x54>
    1ff2:	9e e8       	ldi	r25, 0x8E	; 142
    1ff4:	87 2f       	mov	r24, r23
    1ff6:	76 2f       	mov	r23, r22
    1ff8:	05 c0       	rjmp	.+10     	; 0x2004 <__floatsisf+0x5e>
    1ffa:	66 23       	and	r22, r22
    1ffc:	71 f0       	breq	.+28     	; 0x201a <__floatsisf+0x74>
    1ffe:	96 e8       	ldi	r25, 0x86	; 134
    2000:	86 2f       	mov	r24, r22
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	2a f0       	brmi	.+10     	; 0x2012 <__floatsisf+0x6c>
    2008:	9a 95       	dec	r25
    200a:	66 0f       	add	r22, r22
    200c:	77 1f       	adc	r23, r23
    200e:	88 1f       	adc	r24, r24
    2010:	da f7       	brpl	.-10     	; 0x2008 <__floatsisf+0x62>
    2012:	88 0f       	add	r24, r24
    2014:	96 95       	lsr	r25
    2016:	87 95       	ror	r24
    2018:	97 f9       	bld	r25, 7
    201a:	08 95       	ret

0000201c <__fp_inf>:
    201c:	97 f9       	bld	r25, 7
    201e:	9f 67       	ori	r25, 0x7F	; 127
    2020:	80 e8       	ldi	r24, 0x80	; 128
    2022:	70 e0       	ldi	r23, 0x00	; 0
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	08 95       	ret

00002028 <__fp_nan>:
    2028:	9f ef       	ldi	r25, 0xFF	; 255
    202a:	80 ec       	ldi	r24, 0xC0	; 192
    202c:	08 95       	ret

0000202e <__fp_pscA>:
    202e:	00 24       	eor	r0, r0
    2030:	0a 94       	dec	r0
    2032:	16 16       	cp	r1, r22
    2034:	17 06       	cpc	r1, r23
    2036:	18 06       	cpc	r1, r24
    2038:	09 06       	cpc	r0, r25
    203a:	08 95       	ret

0000203c <__fp_pscB>:
    203c:	00 24       	eor	r0, r0
    203e:	0a 94       	dec	r0
    2040:	12 16       	cp	r1, r18
    2042:	13 06       	cpc	r1, r19
    2044:	14 06       	cpc	r1, r20
    2046:	05 06       	cpc	r0, r21
    2048:	08 95       	ret

0000204a <__fp_round>:
    204a:	09 2e       	mov	r0, r25
    204c:	03 94       	inc	r0
    204e:	00 0c       	add	r0, r0
    2050:	11 f4       	brne	.+4      	; 0x2056 <__fp_round+0xc>
    2052:	88 23       	and	r24, r24
    2054:	52 f0       	brmi	.+20     	; 0x206a <__fp_round+0x20>
    2056:	bb 0f       	add	r27, r27
    2058:	40 f4       	brcc	.+16     	; 0x206a <__fp_round+0x20>
    205a:	bf 2b       	or	r27, r31
    205c:	11 f4       	brne	.+4      	; 0x2062 <__fp_round+0x18>
    205e:	60 ff       	sbrs	r22, 0
    2060:	04 c0       	rjmp	.+8      	; 0x206a <__fp_round+0x20>
    2062:	6f 5f       	subi	r22, 0xFF	; 255
    2064:	7f 4f       	sbci	r23, 0xFF	; 255
    2066:	8f 4f       	sbci	r24, 0xFF	; 255
    2068:	9f 4f       	sbci	r25, 0xFF	; 255
    206a:	08 95       	ret

0000206c <__fp_split3>:
    206c:	57 fd       	sbrc	r21, 7
    206e:	90 58       	subi	r25, 0x80	; 128
    2070:	44 0f       	add	r20, r20
    2072:	55 1f       	adc	r21, r21
    2074:	59 f0       	breq	.+22     	; 0x208c <__fp_splitA+0x10>
    2076:	5f 3f       	cpi	r21, 0xFF	; 255
    2078:	71 f0       	breq	.+28     	; 0x2096 <__fp_splitA+0x1a>
    207a:	47 95       	ror	r20

0000207c <__fp_splitA>:
    207c:	88 0f       	add	r24, r24
    207e:	97 fb       	bst	r25, 7
    2080:	99 1f       	adc	r25, r25
    2082:	61 f0       	breq	.+24     	; 0x209c <__fp_splitA+0x20>
    2084:	9f 3f       	cpi	r25, 0xFF	; 255
    2086:	79 f0       	breq	.+30     	; 0x20a6 <__fp_splitA+0x2a>
    2088:	87 95       	ror	r24
    208a:	08 95       	ret
    208c:	12 16       	cp	r1, r18
    208e:	13 06       	cpc	r1, r19
    2090:	14 06       	cpc	r1, r20
    2092:	55 1f       	adc	r21, r21
    2094:	f2 cf       	rjmp	.-28     	; 0x207a <__fp_split3+0xe>
    2096:	46 95       	lsr	r20
    2098:	f1 df       	rcall	.-30     	; 0x207c <__fp_splitA>
    209a:	08 c0       	rjmp	.+16     	; 0x20ac <__fp_splitA+0x30>
    209c:	16 16       	cp	r1, r22
    209e:	17 06       	cpc	r1, r23
    20a0:	18 06       	cpc	r1, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	f1 cf       	rjmp	.-30     	; 0x2088 <__fp_splitA+0xc>
    20a6:	86 95       	lsr	r24
    20a8:	71 05       	cpc	r23, r1
    20aa:	61 05       	cpc	r22, r1
    20ac:	08 94       	sec
    20ae:	08 95       	ret

000020b0 <__fp_zero>:
    20b0:	e8 94       	clt

000020b2 <__fp_szero>:
    20b2:	bb 27       	eor	r27, r27
    20b4:	66 27       	eor	r22, r22
    20b6:	77 27       	eor	r23, r23
    20b8:	cb 01       	movw	r24, r22
    20ba:	97 f9       	bld	r25, 7
    20bc:	08 95       	ret

000020be <__mulsf3>:
    20be:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulsf3x>
    20c2:	0c 94 25 10 	jmp	0x204a	; 0x204a <__fp_round>
    20c6:	0e 94 17 10 	call	0x202e	; 0x202e <__fp_pscA>
    20ca:	38 f0       	brcs	.+14     	; 0x20da <__mulsf3+0x1c>
    20cc:	0e 94 1e 10 	call	0x203c	; 0x203c <__fp_pscB>
    20d0:	20 f0       	brcs	.+8      	; 0x20da <__mulsf3+0x1c>
    20d2:	95 23       	and	r25, r21
    20d4:	11 f0       	breq	.+4      	; 0x20da <__mulsf3+0x1c>
    20d6:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__fp_inf>
    20da:	0c 94 14 10 	jmp	0x2028	; 0x2028 <__fp_nan>
    20de:	11 24       	eor	r1, r1
    20e0:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__fp_szero>

000020e4 <__mulsf3x>:
    20e4:	0e 94 36 10 	call	0x206c	; 0x206c <__fp_split3>
    20e8:	70 f3       	brcs	.-36     	; 0x20c6 <__mulsf3+0x8>

000020ea <__mulsf3_pse>:
    20ea:	95 9f       	mul	r25, r21
    20ec:	c1 f3       	breq	.-16     	; 0x20de <__mulsf3+0x20>
    20ee:	95 0f       	add	r25, r21
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	55 1f       	adc	r21, r21
    20f4:	62 9f       	mul	r22, r18
    20f6:	f0 01       	movw	r30, r0
    20f8:	72 9f       	mul	r23, r18
    20fa:	bb 27       	eor	r27, r27
    20fc:	f0 0d       	add	r31, r0
    20fe:	b1 1d       	adc	r27, r1
    2100:	63 9f       	mul	r22, r19
    2102:	aa 27       	eor	r26, r26
    2104:	f0 0d       	add	r31, r0
    2106:	b1 1d       	adc	r27, r1
    2108:	aa 1f       	adc	r26, r26
    210a:	64 9f       	mul	r22, r20
    210c:	66 27       	eor	r22, r22
    210e:	b0 0d       	add	r27, r0
    2110:	a1 1d       	adc	r26, r1
    2112:	66 1f       	adc	r22, r22
    2114:	82 9f       	mul	r24, r18
    2116:	22 27       	eor	r18, r18
    2118:	b0 0d       	add	r27, r0
    211a:	a1 1d       	adc	r26, r1
    211c:	62 1f       	adc	r22, r18
    211e:	73 9f       	mul	r23, r19
    2120:	b0 0d       	add	r27, r0
    2122:	a1 1d       	adc	r26, r1
    2124:	62 1f       	adc	r22, r18
    2126:	83 9f       	mul	r24, r19
    2128:	a0 0d       	add	r26, r0
    212a:	61 1d       	adc	r22, r1
    212c:	22 1f       	adc	r18, r18
    212e:	74 9f       	mul	r23, r20
    2130:	33 27       	eor	r19, r19
    2132:	a0 0d       	add	r26, r0
    2134:	61 1d       	adc	r22, r1
    2136:	23 1f       	adc	r18, r19
    2138:	84 9f       	mul	r24, r20
    213a:	60 0d       	add	r22, r0
    213c:	21 1d       	adc	r18, r1
    213e:	82 2f       	mov	r24, r18
    2140:	76 2f       	mov	r23, r22
    2142:	6a 2f       	mov	r22, r26
    2144:	11 24       	eor	r1, r1
    2146:	9f 57       	subi	r25, 0x7F	; 127
    2148:	50 40       	sbci	r21, 0x00	; 0
    214a:	9a f0       	brmi	.+38     	; 0x2172 <__mulsf3_pse+0x88>
    214c:	f1 f0       	breq	.+60     	; 0x218a <__mulsf3_pse+0xa0>
    214e:	88 23       	and	r24, r24
    2150:	4a f0       	brmi	.+18     	; 0x2164 <__mulsf3_pse+0x7a>
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	bb 1f       	adc	r27, r27
    2158:	66 1f       	adc	r22, r22
    215a:	77 1f       	adc	r23, r23
    215c:	88 1f       	adc	r24, r24
    215e:	91 50       	subi	r25, 0x01	; 1
    2160:	50 40       	sbci	r21, 0x00	; 0
    2162:	a9 f7       	brne	.-22     	; 0x214e <__mulsf3_pse+0x64>
    2164:	9e 3f       	cpi	r25, 0xFE	; 254
    2166:	51 05       	cpc	r21, r1
    2168:	80 f0       	brcs	.+32     	; 0x218a <__mulsf3_pse+0xa0>
    216a:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__fp_inf>
    216e:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__fp_szero>
    2172:	5f 3f       	cpi	r21, 0xFF	; 255
    2174:	e4 f3       	brlt	.-8      	; 0x216e <__mulsf3_pse+0x84>
    2176:	98 3e       	cpi	r25, 0xE8	; 232
    2178:	d4 f3       	brlt	.-12     	; 0x216e <__mulsf3_pse+0x84>
    217a:	86 95       	lsr	r24
    217c:	77 95       	ror	r23
    217e:	67 95       	ror	r22
    2180:	b7 95       	ror	r27
    2182:	f7 95       	ror	r31
    2184:	e7 95       	ror	r30
    2186:	9f 5f       	subi	r25, 0xFF	; 255
    2188:	c1 f7       	brne	.-16     	; 0x217a <__mulsf3_pse+0x90>
    218a:	fe 2b       	or	r31, r30
    218c:	88 0f       	add	r24, r24
    218e:	91 1d       	adc	r25, r1
    2190:	96 95       	lsr	r25
    2192:	87 95       	ror	r24
    2194:	97 f9       	bld	r25, 7
    2196:	08 95       	ret

00002198 <__udivmodsi4>:
    2198:	a1 e2       	ldi	r26, 0x21	; 33
    219a:	1a 2e       	mov	r1, r26
    219c:	aa 1b       	sub	r26, r26
    219e:	bb 1b       	sub	r27, r27
    21a0:	fd 01       	movw	r30, r26
    21a2:	0d c0       	rjmp	.+26     	; 0x21be <__udivmodsi4_ep>

000021a4 <__udivmodsi4_loop>:
    21a4:	aa 1f       	adc	r26, r26
    21a6:	bb 1f       	adc	r27, r27
    21a8:	ee 1f       	adc	r30, r30
    21aa:	ff 1f       	adc	r31, r31
    21ac:	a2 17       	cp	r26, r18
    21ae:	b3 07       	cpc	r27, r19
    21b0:	e4 07       	cpc	r30, r20
    21b2:	f5 07       	cpc	r31, r21
    21b4:	20 f0       	brcs	.+8      	; 0x21be <__udivmodsi4_ep>
    21b6:	a2 1b       	sub	r26, r18
    21b8:	b3 0b       	sbc	r27, r19
    21ba:	e4 0b       	sbc	r30, r20
    21bc:	f5 0b       	sbc	r31, r21

000021be <__udivmodsi4_ep>:
    21be:	66 1f       	adc	r22, r22
    21c0:	77 1f       	adc	r23, r23
    21c2:	88 1f       	adc	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	1a 94       	dec	r1
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <__udivmodsi4_loop>
    21ca:	60 95       	com	r22
    21cc:	70 95       	com	r23
    21ce:	80 95       	com	r24
    21d0:	90 95       	com	r25
    21d2:	9b 01       	movw	r18, r22
    21d4:	ac 01       	movw	r20, r24
    21d6:	bd 01       	movw	r22, r26
    21d8:	cf 01       	movw	r24, r30
    21da:	08 95       	ret

000021dc <__tablejump2__>:
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	05 90       	lpm	r0, Z+
    21e2:	f4 91       	lpm	r31, Z
    21e4:	e0 2d       	mov	r30, r0
    21e6:	09 94       	ijmp

000021e8 <_exit>:
    21e8:	f8 94       	cli

000021ea <__stop_program>:
    21ea:	ff cf       	rjmp	.-2      	; 0x21ea <__stop_program>
