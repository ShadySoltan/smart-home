
OCT23.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000227a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000564  00800060  0000227a  0000230e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008005c4  008005c4  00002872  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002872  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b27  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001556  00000000  00000000  00009777  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a4d  00000000  00000000  0000accd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000940  00000000  00000000  0000d71c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001786  00000000  00000000  0000e05c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f26  00000000  00000000  0000f7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00013708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 af 0c 	jmp	0x195e	; 0x195e <__vector_1>
       8:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_2>
       c:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__vector_7>
      20:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__vector_8>
      24:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	fd 00       	.word	0x00fd	; ????
      56:	14 01       	movw	r2, r8
      58:	2b 01       	movw	r4, r22
      5a:	46 01       	movw	r8, r12
      5c:	5e 01       	movw	r10, r28
      5e:	76 01       	movw	r14, r12
      60:	8e 01       	movw	r16, r28
      62:	c2 01       	movw	r24, r4

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	15 e0       	ldi	r17, 0x05	; 5
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e7       	ldi	r30, 0x7A	; 122
      78:	f2 e2       	ldi	r31, 0x22	; 34
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a4 3c       	cpi	r26, 0xC4	; 196
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	25 e0       	ldi	r18, 0x05	; 5
      88:	a4 ec       	ldi	r26, 0xC4	; 196
      8a:	b5 e0       	ldi	r27, 0x05	; 5
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a0 3d       	cpi	r26, 0xD0	; 208
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 95 0a 	call	0x152a	; 0x152a <main>
      9a:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Password_Exist>:
/*************************************************************
			Check Password Existence Function
*************************************************************/

u8 Password_Exist(u8 location)
{
      a2:	cf 92       	push	r12
      a4:	df 92       	push	r13
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	00 d0       	rcall	.+0      	; 0xb4 <Password_Exist+0x12>
      b4:	00 d0       	rcall	.+0      	; 0xb6 <Password_Exist+0x14>
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	08 2f       	mov	r16, r24
	u8 passWord[PASSWORD_LENGTH] = {STD_Low}, password_counter = 0;
      bc:	19 82       	std	Y+1, r1	; 0x01
      be:	1a 82       	std	Y+2, r1	; 0x02
      c0:	1b 82       	std	Y+3, r1	; 0x03
      c2:	1c 82       	std	Y+4, r1	; 0x04
      c4:	ce 01       	movw	r24, r28
      c6:	01 96       	adiw	r24, 0x01	; 1
      c8:	7c 01       	movw	r14, r24
      ca:	6c 01       	movw	r12, r24
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
      cc:	10 e0       	ldi	r17, 0x00	; 0
	{
		passWord[i] = EEPROM_ReadByte(location,i);
      ce:	61 2f       	mov	r22, r17
      d0:	80 2f       	mov	r24, r16
      d2:	0e 94 90 08 	call	0x1120	; 0x1120 <EEPROM_ReadByte>
      d6:	f6 01       	movw	r30, r12
      d8:	81 93       	st	Z+, r24
      da:	6f 01       	movw	r12, r30

u8 Password_Exist(u8 location)
{
	u8 passWord[PASSWORD_LENGTH] = {STD_Low}, password_counter = 0;
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
      dc:	1f 5f       	subi	r17, 0xFF	; 255
      de:	14 30       	cpi	r17, 0x04	; 4
      e0:	b1 f7       	brne	.-20     	; 0xce <Password_Exist+0x2c>
      e2:	9e 01       	movw	r18, r28
      e4:	2b 5f       	subi	r18, 0xFB	; 251
      e6:	3f 4f       	sbci	r19, 0xFF	; 255
      e8:	90 e0       	ldi	r25, 0x00	; 0
		passWord[i] = EEPROM_ReadByte(location,i);
	}
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
	{
		if(passWord[i] == 0xFF)
      ea:	f7 01       	movw	r30, r14
      ec:	81 91       	ld	r24, Z+
      ee:	7f 01       	movw	r14, r30
      f0:	8f 3f       	cpi	r24, 0xFF	; 255
      f2:	09 f4       	brne	.+2      	; 0xf6 <Password_Exist+0x54>
		{
			password_counter++;
      f4:	9f 5f       	subi	r25, 0xFF	; 255
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
	{
		passWord[i] = EEPROM_ReadByte(location,i);
	}
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
      f6:	e2 16       	cp	r14, r18
      f8:	f3 06       	cpc	r15, r19
      fa:	b9 f7       	brne	.-18     	; 0xea <Password_Exist+0x48>
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	09 f4       	brne	.+2      	; 0x104 <Password_Exist+0x62>
     102:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 1;
	}
}
     104:	0f 90       	pop	r0
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	0f 90       	pop	r0
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	ff 90       	pop	r15
     116:	ef 90       	pop	r14
     118:	df 90       	pop	r13
     11a:	cf 90       	pop	r12
     11c:	08 95       	ret

0000011e <getPassword>:
/*************************************************************
		Get Saved Password from EEPROM Function
*************************************************************/

void getPassword(u8 location, s8* Store)
{
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	d8 2f       	mov	r29, r24
     128:	8b 01       	movw	r16, r22
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     12a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Store[i] = EEPROM_ReadByte(location,i);
     12c:	6c 2f       	mov	r22, r28
     12e:	8d 2f       	mov	r24, r29
     130:	0e 94 90 08 	call	0x1120	; 0x1120 <EEPROM_ReadByte>
     134:	f8 01       	movw	r30, r16
     136:	81 93       	st	Z+, r24
     138:	8f 01       	movw	r16, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13a:	ff ef       	ldi	r31, 0xFF	; 255
     13c:	20 e7       	ldi	r18, 0x70	; 112
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	f1 50       	subi	r31, 0x01	; 1
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	80 40       	sbci	r24, 0x00	; 0
     146:	e1 f7       	brne	.-8      	; 0x140 <getPassword+0x22>
     148:	00 c0       	rjmp	.+0      	; 0x14a <getPassword+0x2c>
     14a:	00 00       	nop
		Get Saved Password from EEPROM Function
*************************************************************/

void getPassword(u8 location, s8* Store)
{
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     14c:	cf 5f       	subi	r28, 0xFF	; 255
     14e:	c4 30       	cpi	r28, 0x04	; 4
     150:	69 f7       	brne	.-38     	; 0x12c <getPassword+0xe>
	{
		Store[i] = EEPROM_ReadByte(location,i);
		_delay_ms(50);
	}
}
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <ALARM>:
				Checking & Firing Alarm Function
*************************************************************/

void ALARM(void)
{
	if(EEPROM_ReadByte(ALARM_LOC,0) != 0xFF)
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	82 ea       	ldi	r24, 0xA2	; 162
     160:	0e 94 90 08 	call	0x1120	; 0x1120 <EEPROM_ReadByte>
     164:	8f 3f       	cpi	r24, 0xFF	; 255
     166:	b1 f0       	breq	.+44     	; 0x194 <ALARM+0x38>
	{
		while(1)
		{
			LCD_Clear();
     168:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
			LCD_String("ALARM!!!!");
     16c:	80 ed       	ldi	r24, 0xD0	; 208
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     174:	2f ef       	ldi	r18, 0xFF	; 255
     176:	83 ec       	ldi	r24, 0xC3	; 195
     178:	99 e0       	ldi	r25, 0x09	; 9
     17a:	21 50       	subi	r18, 0x01	; 1
     17c:	80 40       	sbci	r24, 0x00	; 0
     17e:	90 40       	sbci	r25, 0x00	; 0
     180:	e1 f7       	brne	.-8      	; 0x17a <ALARM+0x1e>
     182:	00 c0       	rjmp	.+0      	; 0x184 <ALARM+0x28>
     184:	00 00       	nop
			_delay_ms(200);
			LCD_Clear();
     186:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
			DIO_WriteChannel(DIO_ChannelB0,STD_High);
     18a:	61 e0       	ldi	r22, 0x01	; 1
     18c:	88 e0       	ldi	r24, 0x08	; 8
     18e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
     192:	ea cf       	rjmp	.-44     	; 0x168 <ALARM+0xc>
     194:	08 95       	ret

00000196 <DoorCheck>:
*************************************************************/

void DoorCheck(void)
{
	u8 Door_Status = STD_Low;
	Door_Status = EEPROM_ReadByte(DOOR_Status_Loc,0);
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	84 ea       	ldi	r24, 0xA4	; 164
     19a:	0e 94 90 08 	call	0x1120	; 0x1120 <EEPROM_ReadByte>
     19e:	2f ef       	ldi	r18, 0xFF	; 255
     1a0:	30 e7       	ldi	r19, 0x70	; 112
     1a2:	92 e0       	ldi	r25, 0x02	; 2
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	30 40       	sbci	r19, 0x00	; 0
     1a8:	90 40       	sbci	r25, 0x00	; 0
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <DoorCheck+0xe>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <DoorCheck+0x18>
     1ae:	00 00       	nop
	_delay_ms(50);
	if(Door_Status != 0xFF)
     1b0:	8f 3f       	cpi	r24, 0xFF	; 255
     1b2:	21 f0       	breq	.+8      	; 0x1bc <DoorCheck+0x26>
	{
		ServoMotor(90);
     1b4:	8a e5       	ldi	r24, 0x5A	; 90
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ServoMotor>
     1bc:	08 95       	ret

000001be <AdminMenu>:
				Admin Mode Controlling Menu
*************************************************************/

void AdminMenu(void)
{
	LCD_Clear();
     1be:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
	LCD_String("Admin mode on");
     1c2:	8a ed       	ldi	r24, 0xDA	; 218
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
	Bluetooth_TransmaitString("\n\nSmart-Home Project\nAdmin mode\n");
     1ca:	88 ee       	ldi	r24, 0xE8	; 232
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
	Bluetooth_TransmaitString("Room1\n11)Lamp1\n22)Lamp2\n33)Air-Conditioner\n\n");
     1d2:	89 e0       	ldi	r24, 0x09	; 9
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
	Bluetooth_TransmaitString("\nRoom2\n44)Lamp1\n55)Lamp2\n66)Lamp3\n7)Main-Door\n8)User-Mode");
     1da:	86 e3       	ldi	r24, 0x36	; 54
     1dc:	91 e0       	ldi	r25, 0x01	; 1
     1de:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
	u8 Admin_Choice = STD_Low, status = STD_Low;
	
	adminmenu:
	Admin_Choice = STD_Low;
	Admin_Choice = Bluetooth_Receive();
     1e2:	0e 94 6d 08 	call	0x10da	; 0x10da <Bluetooth_Receive>
	

	switch(Admin_Choice)
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	fc 01       	movw	r30, r24
     1ea:	f1 97       	sbiw	r30, 0x31	; 49
     1ec:	e8 30       	cpi	r30, 0x08	; 8
     1ee:	f1 05       	cpc	r31, r1
     1f0:	c0 f7       	brcc	.-16     	; 0x1e2 <AdminMenu+0x24>
     1f2:	e6 5d       	subi	r30, 0xD6	; 214
     1f4:	ff 4f       	sbci	r31, 0xFF	; 255
     1f6:	0c 94 35 11 	jmp	0x226a	; 0x226a <__tablejump2__>
	{
		case '1':
		status = SPI_TxRx(Led1);
     1fa:	81 e3       	ldi	r24, 0x31	; 49
     1fc:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
		if(status == On)
     200:	8f 34       	cpi	r24, 0x4F	; 79
     202:	41 f4       	brne	.+16     	; 0x214 <AdminMenu+0x56>
		{
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
     204:	80 e7       	ldi	r24, 0x70	; 112
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
			SPI_TxRx(Led1_TurnOff);
     20c:	81 e2       	ldi	r24, 0x21	; 33
     20e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
     212:	e7 cf       	rjmp	.-50     	; 0x1e2 <AdminMenu+0x24>
			Admin_Choice = STD_Low;
		}
		else if(status == Off)
     214:	86 34       	cpi	r24, 0x46	; 70
     216:	29 f7       	brne	.-54     	; 0x1e2 <AdminMenu+0x24>
		{
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
     218:	83 e8       	ldi	r24, 0x83	; 131
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
			SPI_TxRx(Led1_TurnOn);
     220:	81 e1       	ldi	r24, 0x11	; 17
     222:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
     226:	dd cf       	rjmp	.-70     	; 0x1e2 <AdminMenu+0x24>
		}
		goto adminmenu;
		break;
		
		case '2':
		status = SPI_TxRx(Led2);
     228:	82 e3       	ldi	r24, 0x32	; 50
     22a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
		if(status == On)
     22e:	8f 34       	cpi	r24, 0x4F	; 79
     230:	41 f4       	brne	.+16     	; 0x242 <AdminMenu+0x84>
		{
			SPI_TxRx(Led2_TurnOff);
     232:	82 e2       	ldi	r24, 0x22	; 34
     234:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
     238:	80 e7       	ldi	r24, 0x70	; 112
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     240:	d0 cf       	rjmp	.-96     	; 0x1e2 <AdminMenu+0x24>
		}
		else if(status == Off)
     242:	86 34       	cpi	r24, 0x46	; 70
     244:	71 f6       	brne	.-100    	; 0x1e2 <AdminMenu+0x24>
		{
			SPI_TxRx(Led2_TurnOn);
     246:	82 e1       	ldi	r24, 0x12	; 18
     248:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
     24c:	83 e8       	ldi	r24, 0x83	; 131
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     254:	c6 cf       	rjmp	.-116    	; 0x1e2 <AdminMenu+0x24>
		}
		goto adminmenu;
		break;
		
		case '3':
		status = SPI_TxRx(Air_Cond);
     256:	86 e3       	ldi	r24, 0x36	; 54
     258:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
		if(status == On)
     25c:	8f 34       	cpi	r24, 0x4F	; 79
     25e:	41 f4       	brne	.+16     	; 0x270 <AdminMenu+0xb2>
		{
			SPI_TxRx(Air_Cond_TurnOff);
     260:	86 e2       	ldi	r24, 0x26	; 38
     262:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nAir conditioner Turned Off!\n");
     266:	85 e9       	ldi	r24, 0x95	; 149
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     26e:	b9 cf       	rjmp	.-142    	; 0x1e2 <AdminMenu+0x24>
		}
		else if(status == Off)
     270:	86 34       	cpi	r24, 0x46	; 70
     272:	09 f0       	breq	.+2      	; 0x276 <AdminMenu+0xb8>
     274:	b6 cf       	rjmp	.-148    	; 0x1e2 <AdminMenu+0x24>
		{
			SPI_TxRx(Air_Cond_TurnOn);
     276:	86 e1       	ldi	r24, 0x16	; 22
     278:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			SPI_TxRx(24);
     27c:	88 e1       	ldi	r24, 0x18	; 24
     27e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nAir conditioner Turned on!\n");
     282:	83 eb       	ldi	r24, 0xB3	; 179
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     28a:	ab cf       	rjmp	.-170    	; 0x1e2 <AdminMenu+0x24>
		}
		goto adminmenu;
		break;
		
		case '4':
		status = SPI_TxRx(Led3);
     28c:	83 e3       	ldi	r24, 0x33	; 51
     28e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
		if(status == On)
     292:	8f 34       	cpi	r24, 0x4F	; 79
     294:	41 f4       	brne	.+16     	; 0x2a6 <AdminMenu+0xe8>
		{
			SPI_TxRx(Led3_TurnOff);
     296:	83 e2       	ldi	r24, 0x23	; 35
     298:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
     29c:	80 e7       	ldi	r24, 0x70	; 112
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     2a4:	9e cf       	rjmp	.-196    	; 0x1e2 <AdminMenu+0x24>
		}
		else if(status == Off)
     2a6:	86 34       	cpi	r24, 0x46	; 70
     2a8:	09 f0       	breq	.+2      	; 0x2ac <AdminMenu+0xee>
     2aa:	9b cf       	rjmp	.-202    	; 0x1e2 <AdminMenu+0x24>
		{
			SPI_TxRx(Led3_TurnOn);
     2ac:	83 e1       	ldi	r24, 0x13	; 19
     2ae:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
     2b2:	83 e8       	ldi	r24, 0x83	; 131
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     2ba:	93 cf       	rjmp	.-218    	; 0x1e2 <AdminMenu+0x24>
		}
		goto adminmenu;
		break;
		
		case '5':
		status = SPI_TxRx(Led4);
     2bc:	84 e3       	ldi	r24, 0x34	; 52
     2be:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
		if(status == On)
     2c2:	8f 34       	cpi	r24, 0x4F	; 79
     2c4:	41 f4       	brne	.+16     	; 0x2d6 <AdminMenu+0x118>
		{
			SPI_TxRx(Led4_TurnOff);
     2c6:	84 e2       	ldi	r24, 0x24	; 36
     2c8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
     2cc:	80 e7       	ldi	r24, 0x70	; 112
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     2d4:	86 cf       	rjmp	.-244    	; 0x1e2 <AdminMenu+0x24>
		}
		else if(status == Off)
     2d6:	86 34       	cpi	r24, 0x46	; 70
     2d8:	09 f0       	breq	.+2      	; 0x2dc <AdminMenu+0x11e>
     2da:	83 cf       	rjmp	.-250    	; 0x1e2 <AdminMenu+0x24>
		{
			SPI_TxRx(Led4_TurnOn);
     2dc:	84 e1       	ldi	r24, 0x14	; 20
     2de:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
     2e2:	83 e8       	ldi	r24, 0x83	; 131
     2e4:	91 e0       	ldi	r25, 0x01	; 1
     2e6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     2ea:	7b cf       	rjmp	.-266    	; 0x1e2 <AdminMenu+0x24>
		}
		goto adminmenu;
		break;
		
		case '6':
		status = SPI_TxRx(Led5);
     2ec:	85 e3       	ldi	r24, 0x35	; 53
     2ee:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
		if(status == On)
     2f2:	8f 34       	cpi	r24, 0x4F	; 79
     2f4:	41 f4       	brne	.+16     	; 0x306 <AdminMenu+0x148>
		{
			SPI_TxRx(Led5_TurnOff);
     2f6:	85 e2       	ldi	r24, 0x25	; 37
     2f8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
     2fc:	80 e7       	ldi	r24, 0x70	; 112
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     304:	6e cf       	rjmp	.-292    	; 0x1e2 <AdminMenu+0x24>
		}
		else if(status == Off)
     306:	86 34       	cpi	r24, 0x46	; 70
     308:	09 f0       	breq	.+2      	; 0x30c <AdminMenu+0x14e>
     30a:	6b cf       	rjmp	.-298    	; 0x1e2 <AdminMenu+0x24>
		{
			SPI_TxRx(Led5_TurnOn);
     30c:	85 e1       	ldi	r24, 0x15	; 21
     30e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
     312:	83 e8       	ldi	r24, 0x83	; 131
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     31a:	63 cf       	rjmp	.-314    	; 0x1e2 <AdminMenu+0x24>
		}
		goto adminmenu;
		break;
		
		case '7':
		if(EEPROM_ReadByte(DOOR_Status_Loc,0) == 0xFF)
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	84 ea       	ldi	r24, 0xA4	; 164
     320:	0e 94 90 08 	call	0x1120	; 0x1120 <EEPROM_ReadByte>
     324:	8f 3f       	cpi	r24, 0xFF	; 255
     326:	b9 f4       	brne	.+46     	; 0x356 <AdminMenu+0x198>
		{
			UART_TransmaitString("\nOpening Main Door!\n");
     328:	80 ed       	ldi	r24, 0xD0	; 208
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_TransmaitString>
			ServoMotor(90);
     330:	8a e5       	ldi	r24, 0x5A	; 90
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ServoMotor>
			EEPROM_WriteByte(DOOR_Status_Loc,0,'1');
     338:	41 e3       	ldi	r20, 0x31	; 49
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	84 ea       	ldi	r24, 0xA4	; 164
     33e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <EEPROM_WriteByte>
     342:	2f ef       	ldi	r18, 0xFF	; 255
     344:	83 ec       	ldi	r24, 0xC3	; 195
     346:	99 e0       	ldi	r25, 0x09	; 9
     348:	21 50       	subi	r18, 0x01	; 1
     34a:	80 40       	sbci	r24, 0x00	; 0
     34c:	90 40       	sbci	r25, 0x00	; 0
     34e:	e1 f7       	brne	.-8      	; 0x348 <AdminMenu+0x18a>
     350:	00 c0       	rjmp	.+0      	; 0x352 <AdminMenu+0x194>
     352:	00 00       	nop
			_delay_ms(200);
			Admin_Choice = STD_Low;
			goto adminmenu;
     354:	46 cf       	rjmp	.-372    	; 0x1e2 <AdminMenu+0x24>
		}
		else
		{
			UART_TransmaitString("\nClosing Main Door!\n");
     356:	85 ee       	ldi	r24, 0xE5	; 229
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_TransmaitString>
			ServoMotor(0);
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 4c 0a 	call	0x1498	; 0x1498 <ServoMotor>
			EEPROM_WriteByte(DOOR_Status_Loc,0,0xFF);
     366:	4f ef       	ldi	r20, 0xFF	; 255
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	84 ea       	ldi	r24, 0xA4	; 164
     36c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <EEPROM_WriteByte>
     370:	2f ef       	ldi	r18, 0xFF	; 255
     372:	83 ec       	ldi	r24, 0xC3	; 195
     374:	99 e0       	ldi	r25, 0x09	; 9
     376:	21 50       	subi	r18, 0x01	; 1
     378:	80 40       	sbci	r24, 0x00	; 0
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	e1 f7       	brne	.-8      	; 0x376 <AdminMenu+0x1b8>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <AdminMenu+0x1c2>
     380:	00 00       	nop
			_delay_ms(200);
			Admin_Choice = STD_Low;
			goto adminmenu;
     382:	2f cf       	rjmp	.-418    	; 0x1e2 <AdminMenu+0x24>
		}
		break;
		
		case '8':
		Bluetooth_TransmaitString("\n\n\n\n\n\n\n\nUser mode On!");
     384:	8a ef       	ldi	r24, 0xFA	; 250
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	80 e7       	ldi	r24, 0x70	; 112
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	21 50       	subi	r18, 0x01	; 1
     394:	80 40       	sbci	r24, 0x00	; 0
     396:	90 40       	sbci	r25, 0x00	; 0
     398:	e1 f7       	brne	.-8      	; 0x392 <AdminMenu+0x1d4>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <AdminMenu+0x1de>
     39c:	00 00       	nop
		_delay_ms(50);
		Menu1();
     39e:	0e 94 2f 03 	call	0x65e	; 0x65e <Menu1>
     3a2:	08 95       	ret

000003a4 <MainMenu>:
*************************************************************/

void MainMenu(void) //Main App Menu
{
	u8 PressKey = STD_Low;
	LCD_Clear();
     3a4:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
	LCD_String("1:ROOM1  2:ROOM2");
     3a8:	80 e1       	ldi	r24, 0x10	; 16
     3aa:	92 e0       	ldi	r25, 0x02	; 2
     3ac:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
	LCD_SetPos(2,0);
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	82 e0       	ldi	r24, 0x02	; 2
     3b4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
	LCD_String("3:Admin  4:Lock");
     3b8:	81 e2       	ldi	r24, 0x21	; 33
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
	
	while(PressKey == STD_Low){
		PressKey = GetKey(); //Wait for user Input
     3c0:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
		if(PressKey != STD_Low)
     3c4:	88 23       	and	r24, r24
     3c6:	e1 f3       	breq	.-8      	; 0x3c0 <MainMenu+0x1c>
		{
			switch(PressKey)
     3c8:	82 33       	cpi	r24, 0x32	; 50
     3ca:	71 f0       	breq	.+28     	; 0x3e8 <MainMenu+0x44>
     3cc:	18 f4       	brcc	.+6      	; 0x3d4 <MainMenu+0x30>
     3ce:	81 33       	cpi	r24, 0x31	; 49
     3d0:	31 f0       	breq	.+12     	; 0x3de <MainMenu+0x3a>
     3d2:	37 c0       	rjmp	.+110    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     3d4:	83 33       	cpi	r24, 0x33	; 51
     3d6:	69 f0       	breq	.+26     	; 0x3f2 <MainMenu+0x4e>
     3d8:	84 33       	cpi	r24, 0x34	; 52
     3da:	81 f0       	breq	.+32     	; 0x3fc <MainMenu+0x58>
     3dc:	32 c0       	rjmp	.+100    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				case '1':
				LCD_Clear();
     3de:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				PressKey = STD_Low;
				ROOM1();
     3e2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
				break;
     3e6:	ec cf       	rjmp	.-40     	; 0x3c0 <MainMenu+0x1c>
				
				case '2':
				LCD_Clear();
     3e8:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				PressKey = STD_Low;
				ROOM2();
     3ec:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
				break;
     3f0:	e7 cf       	rjmp	.-50     	; 0x3c0 <MainMenu+0x1c>
				
				case '3':
				LCD_Clear();
     3f2:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				PressKey = STD_Low;
				AdminMenu();
     3f6:	0e 94 df 00 	call	0x1be	; 0x1be <AdminMenu>
				break;
     3fa:	e2 cf       	rjmp	.-60     	; 0x3c0 <MainMenu+0x1c>
				
				case '4':
				LCD_Clear();
     3fc:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				PressKey = STD_Low;
				LCD_String("Locking System...");
     400:	81 e3       	ldi	r24, 0x31	; 49
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     408:	2f ef       	ldi	r18, 0xFF	; 255
     40a:	83 ec       	ldi	r24, 0xC3	; 195
     40c:	99 e0       	ldi	r25, 0x09	; 9
     40e:	21 50       	subi	r18, 0x01	; 1
     410:	80 40       	sbci	r24, 0x00	; 0
     412:	90 40       	sbci	r25, 0x00	; 0
     414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     418:	00 00       	nop
				_delay_ms(200);
				LCD_SetPos(2,0);
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
				LCD_String("System Locked");
     422:	83 e4       	ldi	r24, 0x43	; 67
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     42a:	2f ef       	ldi	r18, 0xFF	; 255
     42c:	83 ec       	ldi	r24, 0xC3	; 195
     42e:	99 e0       	ldi	r25, 0x09	; 9
     430:	21 50       	subi	r18, 0x01	; 1
     432:	80 40       	sbci	r24, 0x00	; 0
     434:	90 40       	sbci	r25, 0x00	; 0
     436:	e1 f7       	brne	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     43a:	00 00       	nop
				_delay_ms(200);
				Menu2();
     43c:	0e 94 35 02 	call	0x46a	; 0x46a <Menu2>
				break;
     440:	bf cf       	rjmp	.-130    	; 0x3c0 <MainMenu+0x1c>
				
				default:
				LCD_Clear();
     442:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				LCD_String("Wrong Choice!");
     446:	81 e5       	ldi	r24, 0x51	; 81
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	87 e8       	ldi	r24, 0x87	; 135
     452:	93 e1       	ldi	r25, 0x13	; 19
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     45e:	00 00       	nop
				_delay_ms(400);
				LCD_Clear();
     460:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				MainMenu();
     464:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <MainMenu>
     468:	08 95       	ret

0000046a <Menu2>:

/*************************************************************
					Login Menu Function
*************************************************************/
void Menu2(void)
{
     46a:	8f 92       	push	r8
     46c:	9f 92       	push	r9
     46e:	bf 92       	push	r11
     470:	cf 92       	push	r12
     472:	df 92       	push	r13
     474:	ef 92       	push	r14
     476:	ff 92       	push	r15
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	28 97       	sbiw	r28, 0x08	; 8
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
	s8 Password_User[PASSWORD_LENGTH] = {STD_Low};
     490:	19 82       	std	Y+1, r1	; 0x01
     492:	1a 82       	std	Y+2, r1	; 0x02
     494:	1b 82       	std	Y+3, r1	; 0x03
     496:	1c 82       	std	Y+4, r1	; 0x04
	s8 SavedPassword[PASSWORD_LENGTH] = {STD_Low};
     498:	1d 82       	std	Y+5, r1	; 0x05
     49a:	1e 82       	std	Y+6, r1	; 0x06
     49c:	1f 82       	std	Y+7, r1	; 0x07
     49e:	18 86       	std	Y+8, r1	; 0x08
	u8 password_trials = 0;
	s8 LCD_TRIALS_CHAR = '3';
	u8 Password_Counter = 0;
	
	getPassword(USER_PASS_LOC,SavedPassword);
     4a0:	be 01       	movw	r22, r28
     4a2:	6b 5f       	subi	r22, 0xFB	; 251
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	80 ea       	ldi	r24, 0xA0	; 160
     4a8:	0e 94 8f 00 	call	0x11e	; 0x11e <getPassword>
     4ac:	2f ef       	ldi	r18, 0xFF	; 255
     4ae:	80 e7       	ldi	r24, 0x70	; 112
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	21 50       	subi	r18, 0x01	; 1
     4b4:	80 40       	sbci	r24, 0x00	; 0
     4b6:	90 40       	sbci	r25, 0x00	; 0
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <Menu2+0x48>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <Menu2+0x52>
     4bc:	00 00       	nop
void Menu2(void)
{
	s8 Password_User[PASSWORD_LENGTH] = {STD_Low};
	s8 SavedPassword[PASSWORD_LENGTH] = {STD_Low};
	u8 password_trials = 0;
	s8 LCD_TRIALS_CHAR = '3';
     4be:	0f 2e       	mov	r0, r31
     4c0:	f3 e3       	ldi	r31, 0x33	; 51
     4c2:	bf 2e       	mov	r11, r31
     4c4:	f0 2d       	mov	r31, r0
     4c6:	6e 01       	movw	r12, r28
     4c8:	a9 e0       	ldi	r26, 0x09	; 9
     4ca:	ca 0e       	add	r12, r26
     4cc:	d1 1c       	adc	r13, r1
	getPassword(USER_PASS_LOC,SavedPassword);
	_delay_ms(50);
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
	LCD_Clear();
     4ce:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
	LCD_String("Password:");
     4d2:	8a ef       	ldi	r24, 0xFA	; 250
     4d4:	92 e0       	ldi	r25, 0x02	; 2
     4d6:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     4da:	8e 01       	movw	r16, r28
     4dc:	0f 5f       	subi	r16, 0xFF	; 255
     4de:	1f 4f       	sbci	r17, 0xFF	; 255
     4e0:	48 01       	movw	r8, r16
	
	getPassword(USER_PASS_LOC,SavedPassword);
	_delay_ms(50);
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
     4e2:	e1 2c       	mov	r14, r1
	LCD_Clear();
	LCD_String("Password:");
	while(Password_Counter<PASSWORD_LENGTH)
	{
		u8 keypad = STD_Low;
		keypad = GetKey();
     4e4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     4e8:	f8 2e       	mov	r15, r24
		if(keypad != STD_Low)
     4ea:	88 23       	and	r24, r24
     4ec:	e1 f0       	breq	.+56     	; 0x526 <Menu2+0xbc>
		{
			LCD_Char(keypad);
     4ee:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
     4f2:	bf ef       	ldi	r27, 0xFF	; 255
     4f4:	e0 e7       	ldi	r30, 0x70	; 112
     4f6:	f2 e0       	ldi	r31, 0x02	; 2
     4f8:	b1 50       	subi	r27, 0x01	; 1
     4fa:	e0 40       	sbci	r30, 0x00	; 0
     4fc:	f0 40       	sbci	r31, 0x00	; 0
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <Menu2+0x8e>
     500:	00 c0       	rjmp	.+0      	; 0x502 <Menu2+0x98>
     502:	00 00       	nop
			_delay_ms(50);
			LCD_SetPos(1,9+Password_Counter);
     504:	69 e0       	ldi	r22, 0x09	; 9
     506:	6e 0d       	add	r22, r14
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
			LCD_Char('*');
     50e:	8a e2       	ldi	r24, 0x2A	; 42
     510:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
			Password_User[Password_Counter] = keypad;
     514:	d4 01       	movw	r26, r8
     516:	fd 92       	st	X+, r15
     518:	4d 01       	movw	r8, r26
			Password_Counter++;
     51a:	e3 94       	inc	r14
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
	LCD_Clear();
	LCD_String("Password:");
	while(Password_Counter<PASSWORD_LENGTH)
     51c:	b4 e0       	ldi	r27, 0x04	; 4
     51e:	eb 16       	cp	r14, r27
     520:	09 f4       	brne	.+2      	; 0x524 <Menu2+0xba>
     522:	87 c0       	rjmp	.+270    	; 0x632 <Menu2+0x1c8>
     524:	df cf       	rjmp	.-66     	; 0x4e4 <Menu2+0x7a>
     526:	e3 e0       	ldi	r30, 0x03	; 3
     528:	ee 15       	cp	r30, r14
     52a:	e0 f6       	brcc	.-72     	; 0x4e4 <Menu2+0x7a>
     52c:	82 c0       	rjmp	.+260    	; 0x632 <Menu2+0x1c8>
	}
	
	Password_Counter = 0;
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
	{
		if(SavedPassword[i] == Password_User[i])
     52e:	91 91       	ld	r25, Z+
     530:	d8 01       	movw	r26, r16
     532:	8d 91       	ld	r24, X+
     534:	8d 01       	movw	r16, r26
     536:	98 13       	cpse	r25, r24
     538:	01 c0       	rjmp	.+2      	; 0x53c <Menu2+0xd2>
		{
			Password_Counter++;
     53a:	2f 5f       	subi	r18, 0xFF	; 255
			Password_Counter++;
		}
	}
	
	Password_Counter = 0;
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     53c:	ce 16       	cp	r12, r30
     53e:	df 06       	cpc	r13, r31
     540:	b1 f7       	brne	.-20     	; 0x52e <Menu2+0xc4>
		{
			Password_Counter++;
		}
	}
	
	if(Password_Counter == 4)
     542:	24 30       	cpi	r18, 0x04	; 4
     544:	29 f5       	brne	.+74     	; 0x590 <Menu2+0x126>
	{
		LCD_Clear();
     546:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
		LCD_String("Correct Password!");
     54a:	8f e5       	ldi	r24, 0x5F	; 95
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     552:	bf ef       	ldi	r27, 0xFF	; 255
     554:	e7 e8       	ldi	r30, 0x87	; 135
     556:	f3 e1       	ldi	r31, 0x13	; 19
     558:	b1 50       	subi	r27, 0x01	; 1
     55a:	e0 40       	sbci	r30, 0x00	; 0
     55c:	f0 40       	sbci	r31, 0x00	; 0
     55e:	e1 f7       	brne	.-8      	; 0x558 <Menu2+0xee>
     560:	00 c0       	rjmp	.+0      	; 0x562 <Menu2+0xf8>
     562:	00 00       	nop
		_delay_ms(400);
		LCD_SetPos(2,0);
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
		LCD_String("!HomeSweetHome!");
     56c:	81 e7       	ldi	r24, 0x71	; 113
     56e:	92 e0       	ldi	r25, 0x02	; 2
     570:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     574:	2f ef       	ldi	r18, 0xFF	; 255
     576:	89 e6       	ldi	r24, 0x69	; 105
     578:	98 e1       	ldi	r25, 0x18	; 24
     57a:	21 50       	subi	r18, 0x01	; 1
     57c:	80 40       	sbci	r24, 0x00	; 0
     57e:	90 40       	sbci	r25, 0x00	; 0
     580:	e1 f7       	brne	.-8      	; 0x57a <Menu2+0x110>
     582:	00 c0       	rjmp	.+0      	; 0x584 <Menu2+0x11a>
     584:	00 00       	nop
		_delay_ms(500);
		LCD_Clear();
     586:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
		MainMenu();
     58a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <MainMenu>
     58e:	55 c0       	rjmp	.+170    	; 0x63a <Menu2+0x1d0>
	}
	else
	{
		LCD_Clear();
     590:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
		LCD_String("Wrong Password!");
     594:	81 e8       	ldi	r24, 0x81	; 129
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
		password_trials++;
		LCD_TRIALS_CHAR--;
		if(password_trials == PASSWORD_TRIALS)
     59c:	a1 e3       	ldi	r26, 0x31	; 49
     59e:	ba 12       	cpse	r11, r26
     5a0:	30 c0       	rjmp	.+96     	; 0x602 <Menu2+0x198>
		{
			LCD_Clear();
     5a2:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
			LCD_String("System Blocked!");
     5a6:	81 e9       	ldi	r24, 0x91	; 145
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
			LCD_SetPos(2,0);
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
			LCD_String("Firing Alarm!!!");
     5b6:	81 ea       	ldi	r24, 0xA1	; 161
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
			Bluetooth_TransmaitString("Alarm triggered!");
     5be:	81 eb       	ldi	r24, 0xB1	; 177
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
			EEPROM_WriteByte(ALARM_LOC,0,'1');
     5c6:	41 e3       	ldi	r20, 0x31	; 49
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	82 ea       	ldi	r24, 0xA2	; 162
     5cc:	0e 94 70 08 	call	0x10e0	; 0x10e0 <EEPROM_WriteByte>
     5d0:	bf ef       	ldi	r27, 0xFF	; 255
     5d2:	e0 e7       	ldi	r30, 0x70	; 112
     5d4:	f2 e0       	ldi	r31, 0x02	; 2
     5d6:	b1 50       	subi	r27, 0x01	; 1
     5d8:	e0 40       	sbci	r30, 0x00	; 0
     5da:	f0 40       	sbci	r31, 0x00	; 0
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <Menu2+0x16c>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <Menu2+0x176>
     5e0:	00 00       	nop
			_delay_ms(50);
			DIO_WriteChannel(DIO_ChannelB0,STD_High);
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	88 e0       	ldi	r24, 0x08	; 8
     5e6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
     5ea:	2f ef       	ldi	r18, 0xFF	; 255
     5ec:	87 e8       	ldi	r24, 0x87	; 135
     5ee:	93 e1       	ldi	r25, 0x13	; 19
     5f0:	21 50       	subi	r18, 0x01	; 1
     5f2:	80 40       	sbci	r24, 0x00	; 0
     5f4:	90 40       	sbci	r25, 0x00	; 0
     5f6:	e1 f7       	brne	.-8      	; 0x5f0 <Menu2+0x186>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <Menu2+0x190>
     5fa:	00 00       	nop
			_delay_ms(400);
			ALARM();
     5fc:	0e 94 ae 00 	call	0x15c	; 0x15c <ALARM>
     600:	1c c0       	rjmp	.+56     	; 0x63a <Menu2+0x1d0>
	else
	{
		LCD_Clear();
		LCD_String("Wrong Password!");
		password_trials++;
		LCD_TRIALS_CHAR--;
     602:	ba 94       	dec	r11
			_delay_ms(400);
			ALARM();
		}
		else
		{
			LCD_SetPos(2,0);
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
			LCD_String("Trials left: ");
     60c:	82 ec       	ldi	r24, 0xC2	; 194
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
			LCD_Char(LCD_TRIALS_CHAR);
     614:	8b 2d       	mov	r24, r11
     616:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
     61a:	af ef       	ldi	r26, 0xFF	; 255
     61c:	b7 e8       	ldi	r27, 0x87	; 135
     61e:	e3 e1       	ldi	r30, 0x13	; 19
     620:	a1 50       	subi	r26, 0x01	; 1
     622:	b0 40       	sbci	r27, 0x00	; 0
     624:	e0 40       	sbci	r30, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <Menu2+0x1b6>
     628:	00 c0       	rjmp	.+0      	; 0x62a <Menu2+0x1c0>
     62a:	00 00       	nop
			_delay_ms(400);
			LCD_Clear();
     62c:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
			goto Retry;
     630:	4e cf       	rjmp	.-356    	; 0x4ce <Menu2+0x64>
     632:	fe 01       	movw	r30, r28
     634:	35 96       	adiw	r30, 0x05	; 5
	
	getPassword(USER_PASS_LOC,SavedPassword);
	_delay_ms(50);
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	7a cf       	rjmp	.-268    	; 0x52e <Menu2+0xc4>
			_delay_ms(400);
			LCD_Clear();
			goto Retry;
		}
	}
}
     63a:	28 96       	adiw	r28, 0x08	; 8
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	bf 90       	pop	r11
     658:	9f 90       	pop	r9
     65a:	8f 90       	pop	r8
     65c:	08 95       	ret

0000065e <Menu1>:

/*************************************************************
				Registration Menu Function
*************************************************************/
void Menu1(void)
{
     65e:	8f 92       	push	r8
     660:	9f 92       	push	r9
     662:	af 92       	push	r10
     664:	bf 92       	push	r11
     666:	cf 92       	push	r12
     668:	df 92       	push	r13
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	28 97       	sbiw	r28, 0x08	; 8
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
	LCD_Clear();
     686:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
     68a:	2f ef       	ldi	r18, 0xFF	; 255
     68c:	86 e7       	ldi	r24, 0x76	; 118
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	21 50       	subi	r18, 0x01	; 1
     692:	80 40       	sbci	r24, 0x00	; 0
     694:	90 40       	sbci	r25, 0x00	; 0
     696:	e1 f7       	brne	.-8      	; 0x690 <Menu1+0x32>
     698:	00 c0       	rjmp	.+0      	; 0x69a <Menu1+0x3c>
     69a:	00 00       	nop
	_delay_ms(30);
	LCD_SetPos(1,2);
     69c:	62 e0       	ldi	r22, 0x02	; 2
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
	LCD_String("Smart - Home");
     6a4:	80 ed       	ldi	r24, 0xD0	; 208
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
	LCD_SetPos(2,4);
     6ac:	64 e0       	ldi	r22, 0x04	; 4
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
	LCD_String("Project!");
     6b4:	8d ed       	ldi	r24, 0xDD	; 221
     6b6:	92 e0       	ldi	r25, 0x02	; 2
     6b8:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     6bc:	af ef       	ldi	r26, 0xFF	; 255
     6be:	b7 e8       	ldi	r27, 0x87	; 135
     6c0:	e3 e1       	ldi	r30, 0x13	; 19
     6c2:	a1 50       	subi	r26, 0x01	; 1
     6c4:	b0 40       	sbci	r27, 0x00	; 0
     6c6:	e0 40       	sbci	r30, 0x00	; 0
     6c8:	e1 f7       	brne	.-8      	; 0x6c2 <Menu1+0x64>
     6ca:	00 c0       	rjmp	.+0      	; 0x6cc <Menu1+0x6e>
     6cc:	00 00       	nop
	_delay_ms(400);
	LCD_Clear();
     6ce:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
	
	if(Password_Exist(USER_PASS_LOC) == 0)
     6d2:	80 ea       	ldi	r24, 0xA0	; 160
     6d4:	0e 94 51 00 	call	0xa2	; 0xa2 <Password_Exist>
     6d8:	81 11       	cpse	r24, r1
     6da:	c9 c0       	rjmp	.+402    	; 0x86e <__stack+0xf>
	{
		s8 Password_User[PASSWORD_LENGTH] = {STD_Low};
     6dc:	1d 82       	std	Y+5, r1	; 0x05
     6de:	1e 82       	std	Y+6, r1	; 0x06
     6e0:	1f 82       	std	Y+7, r1	; 0x07
     6e2:	18 86       	std	Y+8, r1	; 0x08
		s8 Password_Confirm[PASSWORD_LENGTH] = {STD_Low};
     6e4:	19 82       	std	Y+1, r1	; 0x01
     6e6:	1a 82       	std	Y+2, r1	; 0x02
     6e8:	1b 82       	std	Y+3, r1	; 0x03
     6ea:	1c 82       	std	Y+4, r1	; 0x04
		
		LCD_String("Login first time");
     6ec:	86 ee       	ldi	r24, 0xE6	; 230
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     6f4:	ff ef       	ldi	r31, 0xFF	; 255
     6f6:	27 e8       	ldi	r18, 0x87	; 135
     6f8:	83 e1       	ldi	r24, 0x13	; 19
     6fa:	f1 50       	subi	r31, 0x01	; 1
     6fc:	20 40       	sbci	r18, 0x00	; 0
     6fe:	80 40       	sbci	r24, 0x00	; 0
     700:	e1 f7       	brne	.-8      	; 0x6fa <Menu1+0x9c>
     702:	00 c0       	rjmp	.+0      	; 0x704 <Menu1+0xa6>
     704:	00 00       	nop
		_delay_ms(400);
		LCD_Clear();
     706:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
     70a:	6e 01       	movw	r12, r28
     70c:	99 e0       	ldi	r25, 0x09	; 9
     70e:	c9 0e       	add	r12, r25
     710:	d1 1c       	adc	r13, r1
		
		RetryPassword:LCD_String("SetPassword:");
     712:	87 ef       	ldi	r24, 0xF7	; 247
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     71a:	5e 01       	movw	r10, r28
     71c:	a5 e0       	ldi	r26, 0x05	; 5
     71e:	aa 0e       	add	r10, r26
     720:	b1 1c       	adc	r11, r1
     722:	75 01       	movw	r14, r10
		u8 Password_Counter = 0;
     724:	00 e0       	ldi	r16, 0x00	; 0
		while(Password_Counter<PASSWORD_LENGTH)
		{
			u8 keypad = STD_Low;
			keypad = GetKey();
     726:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     72a:	18 2f       	mov	r17, r24
			if(keypad != STD_Low)
     72c:	88 23       	and	r24, r24
     72e:	d1 f0       	breq	.+52     	; 0x764 <Menu1+0x106>
			{
				LCD_Char(keypad);
     730:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
     734:	bf ef       	ldi	r27, 0xFF	; 255
     736:	e0 e7       	ldi	r30, 0x70	; 112
     738:	f2 e0       	ldi	r31, 0x02	; 2
     73a:	b1 50       	subi	r27, 0x01	; 1
     73c:	e0 40       	sbci	r30, 0x00	; 0
     73e:	f0 40       	sbci	r31, 0x00	; 0
     740:	e1 f7       	brne	.-8      	; 0x73a <Menu1+0xdc>
     742:	00 c0       	rjmp	.+0      	; 0x744 <Menu1+0xe6>
     744:	00 00       	nop
				_delay_ms(50);
				LCD_SetPos(1,12+Password_Counter);
     746:	6c e0       	ldi	r22, 0x0C	; 12
     748:	60 0f       	add	r22, r16
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
				LCD_Char('*');
     750:	8a e2       	ldi	r24, 0x2A	; 42
     752:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
				Password_User[Password_Counter] = keypad;
     756:	d7 01       	movw	r26, r14
     758:	1d 93       	st	X+, r17
     75a:	7d 01       	movw	r14, r26
				Password_Counter++;
     75c:	0f 5f       	subi	r16, 0xFF	; 255
		_delay_ms(400);
		LCD_Clear();
		
		RetryPassword:LCD_String("SetPassword:");
		u8 Password_Counter = 0;
		while(Password_Counter<PASSWORD_LENGTH)
     75e:	04 30       	cpi	r16, 0x04	; 4
     760:	19 f0       	breq	.+6      	; 0x768 <Menu1+0x10a>
     762:	e1 cf       	rjmp	.-62     	; 0x726 <Menu1+0xc8>
     764:	04 30       	cpi	r16, 0x04	; 4
     766:	f8 f2       	brcs	.-66     	; 0x726 <Menu1+0xc8>
				Password_User[Password_Counter] = keypad;
				Password_Counter++;
			}
		}
		
		LCD_Clear();
     768:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
		LCD_String("Confirm:");
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	93 e0       	ldi	r25, 0x03	; 3
     770:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     774:	8e 01       	movw	r16, r28
     776:	0f 5f       	subi	r16, 0xFF	; 255
     778:	1f 4f       	sbci	r17, 0xFF	; 255
     77a:	48 01       	movw	r8, r16
		Password_Counter = 0;
     77c:	e1 2c       	mov	r14, r1
		while(Password_Counter<PASSWORD_LENGTH)
		{
			u8 keypad = STD_Low;
			keypad = GetKey();
     77e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     782:	f8 2e       	mov	r15, r24
			if(keypad != STD_Low)
     784:	88 23       	and	r24, r24
     786:	d9 f0       	breq	.+54     	; 0x7be <Menu1+0x160>
			{
				LCD_Char(keypad);
     788:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
     78c:	bf ef       	ldi	r27, 0xFF	; 255
     78e:	e0 e7       	ldi	r30, 0x70	; 112
     790:	f2 e0       	ldi	r31, 0x02	; 2
     792:	b1 50       	subi	r27, 0x01	; 1
     794:	e0 40       	sbci	r30, 0x00	; 0
     796:	f0 40       	sbci	r31, 0x00	; 0
     798:	e1 f7       	brne	.-8      	; 0x792 <Menu1+0x134>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <Menu1+0x13e>
     79c:	00 00       	nop
				_delay_ms(50);
				LCD_SetPos(1,8+Password_Counter);
     79e:	68 e0       	ldi	r22, 0x08	; 8
     7a0:	6e 0d       	add	r22, r14
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
				LCD_Char('*');
     7a8:	8a e2       	ldi	r24, 0x2A	; 42
     7aa:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
				Password_Confirm[Password_Counter] = keypad;
     7ae:	d4 01       	movw	r26, r8
     7b0:	fd 92       	st	X+, r15
     7b2:	4d 01       	movw	r8, r26
				Password_Counter++;
     7b4:	e3 94       	inc	r14
		}
		
		LCD_Clear();
		LCD_String("Confirm:");
		Password_Counter = 0;
		while(Password_Counter<PASSWORD_LENGTH)
     7b6:	b4 e0       	ldi	r27, 0x04	; 4
     7b8:	eb 16       	cp	r14, r27
     7ba:	21 f0       	breq	.+8      	; 0x7c4 <Menu1+0x166>
     7bc:	e0 cf       	rjmp	.-64     	; 0x77e <Menu1+0x120>
     7be:	e3 e0       	ldi	r30, 0x03	; 3
     7c0:	ee 15       	cp	r30, r14
     7c2:	e8 f6       	brcc	.-70     	; 0x77e <Menu1+0x120>
				Password_Counter++;
			}
		}
		
		Password_Counter = 0;
		LCD_Clear();
     7c4:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
     7c8:	f5 01       	movw	r30, r10
				Password_Confirm[Password_Counter] = keypad;
				Password_Counter++;
			}
		}
		
		Password_Counter = 0;
     7ca:	20 e0       	ldi	r18, 0x00	; 0
		LCD_Clear();
		for(u8 i = 0; i < PASSWORD_LENGTH; i++)
		{
			if(Password_User[i] == Password_Confirm[i])
     7cc:	91 91       	ld	r25, Z+
     7ce:	d8 01       	movw	r26, r16
     7d0:	8d 91       	ld	r24, X+
     7d2:	8d 01       	movw	r16, r26
     7d4:	98 13       	cpse	r25, r24
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <Menu1+0x17c>
			{
				Password_Counter++;
     7d8:	2f 5f       	subi	r18, 0xFF	; 255
			}
		}
		
		Password_Counter = 0;
		LCD_Clear();
		for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     7da:	ce 16       	cp	r12, r30
     7dc:	df 06       	cpc	r13, r31
     7de:	b1 f7       	brne	.-20     	; 0x7cc <Menu1+0x16e>
			{
				Password_Counter++;
			}
		}
		
		if(Password_Counter == 4)
     7e0:	24 30       	cpi	r18, 0x04	; 4
     7e2:	21 f5       	brne	.+72     	; 0x82c <Menu1+0x1ce>
     7e4:	10 e0       	ldi	r17, 0x00	; 0
		{
			for(u8 i = 0; i < PASSWORD_LENGTH; i++)
			{
				EEPROM_WriteByte(USER_PASS_LOC,i,Password_User[i]);
     7e6:	f5 01       	movw	r30, r10
     7e8:	41 91       	ld	r20, Z+
     7ea:	5f 01       	movw	r10, r30
     7ec:	61 2f       	mov	r22, r17
     7ee:	80 ea       	ldi	r24, 0xA0	; 160
     7f0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <EEPROM_WriteByte>
     7f4:	ff ef       	ldi	r31, 0xFF	; 255
     7f6:	23 ec       	ldi	r18, 0xC3	; 195
     7f8:	89 e0       	ldi	r24, 0x09	; 9
     7fa:	f1 50       	subi	r31, 0x01	; 1
     7fc:	20 40       	sbci	r18, 0x00	; 0
     7fe:	80 40       	sbci	r24, 0x00	; 0
     800:	e1 f7       	brne	.-8      	; 0x7fa <Menu1+0x19c>
     802:	00 c0       	rjmp	.+0      	; 0x804 <Menu1+0x1a6>
     804:	00 00       	nop
			}
		}
		
		if(Password_Counter == 4)
		{
			for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     806:	1f 5f       	subi	r17, 0xFF	; 255
     808:	14 30       	cpi	r17, 0x04	; 4
     80a:	69 f7       	brne	.-38     	; 0x7e6 <Menu1+0x188>
			{
				EEPROM_WriteByte(USER_PASS_LOC,i,Password_User[i]);
				_delay_ms(200);
			}
			LCD_String("Password Saved!");
     80c:	8d e0       	ldi	r24, 0x0D	; 13
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     814:	9f ef       	ldi	r25, 0xFF	; 255
     816:	a7 e8       	ldi	r26, 0x87	; 135
     818:	b3 e1       	ldi	r27, 0x13	; 19
     81a:	91 50       	subi	r25, 0x01	; 1
     81c:	a0 40       	sbci	r26, 0x00	; 0
     81e:	b0 40       	sbci	r27, 0x00	; 0
     820:	e1 f7       	brne	.-8      	; 0x81a <Menu1+0x1bc>
     822:	00 c0       	rjmp	.+0      	; 0x824 <Menu1+0x1c6>
     824:	00 00       	nop
			_delay_ms(400);
			LCD_Clear();
     826:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
     82a:	38 c0       	rjmp	.+112    	; 0x89c <__stack+0x3d>
		}
		else
		{
			LCD_String("Pass mismatch!");
     82c:	8d e1       	ldi	r24, 0x1D	; 29
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     834:	ef ef       	ldi	r30, 0xFF	; 255
     836:	f3 ec       	ldi	r31, 0xC3	; 195
     838:	29 e0       	ldi	r18, 0x09	; 9
     83a:	e1 50       	subi	r30, 0x01	; 1
     83c:	f0 40       	sbci	r31, 0x00	; 0
     83e:	20 40       	sbci	r18, 0x00	; 0
     840:	e1 f7       	brne	.-8      	; 0x83a <Menu1+0x1dc>
     842:	00 c0       	rjmp	.+0      	; 0x844 <Menu1+0x1e6>
     844:	00 00       	nop
			_delay_ms(200);
			LCD_SetPos(2,0);
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
			LCD_String("Try again!");
     84e:	8c e2       	ldi	r24, 0x2C	; 44
     850:	93 e0       	ldi	r25, 0x03	; 3
     852:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	93 ec       	ldi	r25, 0xC3	; 195
     85a:	a9 e0       	ldi	r26, 0x09	; 9
     85c:	81 50       	subi	r24, 0x01	; 1
     85e:	90 40       	sbci	r25, 0x00	; 0
     860:	a0 40       	sbci	r26, 0x00	; 0
     862:	e1 f7       	brne	.-8      	; 0x85c <Menu1+0x1fe>
     864:	00 c0       	rjmp	.+0      	; 0x866 <__stack+0x7>
     866:	00 00       	nop
			_delay_ms(200);
			LCD_Clear();
     868:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
			goto RetryPassword;
     86c:	52 cf       	rjmp	.-348    	; 0x712 <Menu1+0xb4>
	}
	else
	{
		//Already have an account
		//Greetings
		LCD_Clear();
     86e:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
		LCD_SetPos(1,2);
     872:	62 e0       	ldi	r22, 0x02	; 2
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
		LCD_String("Welcome Home");
     87a:	87 e3       	ldi	r24, 0x37	; 55
     87c:	93 e0       	ldi	r25, 0x03	; 3
     87e:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     882:	bf ef       	ldi	r27, 0xFF	; 255
     884:	e7 e8       	ldi	r30, 0x87	; 135
     886:	f3 e1       	ldi	r31, 0x13	; 19
     888:	b1 50       	subi	r27, 0x01	; 1
     88a:	e0 40       	sbci	r30, 0x00	; 0
     88c:	f0 40       	sbci	r31, 0x00	; 0
     88e:	e1 f7       	brne	.-8      	; 0x888 <__stack+0x29>
     890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
     892:	00 00       	nop
		_delay_ms(400);
		LCD_Clear();
     894:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
		Menu2();
     898:	0e 94 35 02 	call	0x46a	; 0x46a <Menu2>
	}
}
     89c:	28 96       	adiw	r28, 0x08	; 8
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	9f 90       	pop	r9
     8be:	8f 90       	pop	r8
     8c0:	08 95       	ret

000008c2 <ROOM1>:
/*************************************************************
				Room1 Controlling Menu
*************************************************************/

void ROOM1(void)
{
     8c2:	af 92       	push	r10
     8c4:	bf 92       	push	r11
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
     8d6:	a1 2c       	mov	r10, r1
     8d8:	02 e0       	ldi	r16, 0x02	; 2
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     8da:	e0 2e       	mov	r14, r16
							_delay_ms(100);
							switch(Key)
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
     8dc:	da 2d       	mov	r29, r10
     8de:	da 2c       	mov	r13, r10
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     8e0:	b0 2e       	mov	r11, r16

void ROOM1(void)
{
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
     8e2:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
	LCD_String("1:Lamp1 2:Lamp2");
     8e6:	84 e4       	ldi	r24, 0x44	; 68
     8e8:	93 e0       	ldi	r25, 0x03	; 3
     8ea:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
	LCD_SetPos(2,0);
     8ee:	6a 2d       	mov	r22, r10
     8f0:	80 2f       	mov	r24, r16
     8f2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
	LCD_String("3:AC    4:Return");
     8f6:	84 e5       	ldi	r24, 0x54	; 84
     8f8:	93 e0       	ldi	r25, 0x03	; 3
     8fa:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
	
	while(Key == STD_Low)
	{
		Key = GetKey();
     8fe:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
		if (Key != STD_Low)
     902:	88 23       	and	r24, r24
     904:	e1 f3       	breq	.-8      	; 0x8fe <ROOM1+0x3c>
		{
			switch(Key)
     906:	82 33       	cpi	r24, 0x32	; 50
     908:	09 f4       	brne	.+2      	; 0x90c <ROOM1+0x4a>
     90a:	91 c0       	rjmp	.+290    	; 0xa2e <ROOM1+0x16c>
     90c:	18 f4       	brcc	.+6      	; 0x914 <ROOM1+0x52>
     90e:	81 33       	cpi	r24, 0x31	; 49
     910:	41 f0       	breq	.+16     	; 0x922 <ROOM1+0x60>
     912:	ec c1       	rjmp	.+984    	; 0xcec <ROOM1+0x42a>
     914:	83 33       	cpi	r24, 0x33	; 51
     916:	09 f4       	brne	.+2      	; 0x91a <ROOM1+0x58>
     918:	10 c1       	rjmp	.+544    	; 0xb3a <ROOM1+0x278>
     91a:	84 33       	cpi	r24, 0x34	; 52
     91c:	09 f4       	brne	.+2      	; 0x920 <ROOM1+0x5e>
     91e:	e1 c1       	rjmp	.+962    	; 0xce2 <ROOM1+0x420>
     920:	e5 c1       	rjmp	.+970    	; 0xcec <ROOM1+0x42a>
			{
				case '1':
				LCD_Clear();
     922:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
     926:	2f ef       	ldi	r18, 0xFF	; 255
     928:	80 e7       	ldi	r24, 0x70	; 112
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	21 50       	subi	r18, 0x01	; 1
     92e:	80 40       	sbci	r24, 0x00	; 0
     930:	90 40       	sbci	r25, 0x00	; 0
     932:	e1 f7       	brne	.-8      	; 0x92c <ROOM1+0x6a>
     934:	00 c0       	rjmp	.+0      	; 0x936 <ROOM1+0x74>
     936:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led1);
     938:	81 e3       	ldi	r24, 0x31	; 49
     93a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
     93e:	2f ef       	ldi	r18, 0xFF	; 255
     940:	80 e7       	ldi	r24, 0x70	; 112
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	21 50       	subi	r18, 0x01	; 1
     946:	80 40       	sbci	r24, 0x00	; 0
     948:	90 40       	sbci	r25, 0x00	; 0
     94a:	e1 f7       	brne	.-8      	; 0x944 <ROOM1+0x82>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <ROOM1+0x8c>
     94e:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
				if(Slave_Status == On)
     956:	8f 34       	cpi	r24, 0x4F	; 79
     958:	89 f5       	brne	.+98     	; 0x9bc <ROOM1+0xfa>
				{
					LCD_Clear();
     95a:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Led is On!");
     95e:	85 e6       	ldi	r24, 0x65	; 101
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     966:	6d 2f       	mov	r22, r29
     968:	8e 2d       	mov	r24, r14
     96a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     96e:	80 e7       	ldi	r24, 0x70	; 112
     970:	93 e0       	ldi	r25, 0x03	; 3
     972:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     976:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     97a:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     97c:	88 23       	and	r24, r24
     97e:	d9 f3       	breq	.-10     	; 0x976 <ROOM1+0xb4>
     980:	2f ef       	ldi	r18, 0xFF	; 255
     982:	81 ee       	ldi	r24, 0xE1	; 225
     984:	94 e0       	ldi	r25, 0x04	; 4
     986:	21 50       	subi	r18, 0x01	; 1
     988:	80 40       	sbci	r24, 0x00	; 0
     98a:	90 40       	sbci	r25, 0x00	; 0
     98c:	e1 f7       	brne	.-8      	; 0x986 <ROOM1+0xc4>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <ROOM1+0xce>
     990:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     992:	c1 33       	cpi	r28, 0x31	; 49
     994:	19 f0       	breq	.+6      	; 0x99c <ROOM1+0xda>
     996:	c2 33       	cpi	r28, 0x32	; 50
     998:	59 f0       	breq	.+22     	; 0x9b0 <ROOM1+0xee>
     99a:	44 c0       	rjmp	.+136    	; 0xa24 <ROOM1+0x162>
							{
								case '1':
								SPI_TxRx(Led1_TurnOff);
     99c:	81 e2       	ldi	r24, 0x21	; 33
     99e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room1 is Off now!");
     9a2:	81 e8       	ldi	r24, 0x81	; 129
     9a4:	93 e0       	ldi	r25, 0x03	; 3
     9a6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM1();
     9aa:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
     9ae:	e3 cf       	rjmp	.-58     	; 0x976 <ROOM1+0xb4>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     9b0:	89 e9       	ldi	r24, 0x99	; 153
     9b2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								ROOM1();
     9b6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
     9ba:	34 c0       	rjmp	.+104    	; 0xa24 <ROOM1+0x162>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     9bc:	86 34       	cpi	r24, 0x46	; 70
     9be:	89 f5       	brne	.+98     	; 0xa22 <ROOM1+0x160>
				{
					LCD_Clear();
     9c0:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Led is Off!");
     9c4:	8a e9       	ldi	r24, 0x9A	; 154
     9c6:	93 e0       	ldi	r25, 0x03	; 3
     9c8:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     9cc:	6d 2f       	mov	r22, r29
     9ce:	8e 2d       	mov	r24, r14
     9d0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     9d4:	86 ea       	ldi	r24, 0xA6	; 166
     9d6:	93 e0       	ldi	r25, 0x03	; 3
     9d8:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     9dc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     9e0:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     9e2:	88 23       	and	r24, r24
     9e4:	d9 f3       	breq	.-10     	; 0x9dc <ROOM1+0x11a>
     9e6:	2f ef       	ldi	r18, 0xFF	; 255
     9e8:	81 ee       	ldi	r24, 0xE1	; 225
     9ea:	94 e0       	ldi	r25, 0x04	; 4
     9ec:	21 50       	subi	r18, 0x01	; 1
     9ee:	80 40       	sbci	r24, 0x00	; 0
     9f0:	90 40       	sbci	r25, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <ROOM1+0x12a>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <ROOM1+0x134>
     9f6:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     9f8:	c1 33       	cpi	r28, 0x31	; 49
     9fa:	19 f0       	breq	.+6      	; 0xa02 <ROOM1+0x140>
     9fc:	c2 33       	cpi	r28, 0x32	; 50
     9fe:	59 f0       	breq	.+22     	; 0xa16 <ROOM1+0x154>
     a00:	11 c0       	rjmp	.+34     	; 0xa24 <ROOM1+0x162>
							{
								case '1':
								SPI_TxRx(Led1_TurnOn);
     a02:	81 e1       	ldi	r24, 0x11	; 17
     a04:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room1 is on now!");
     a08:	86 eb       	ldi	r24, 0xB6	; 182
     a0a:	93 e0       	ldi	r25, 0x03	; 3
     a0c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM1();
     a10:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
     a14:	e3 cf       	rjmp	.-58     	; 0x9dc <ROOM1+0x11a>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     a16:	89 e9       	ldi	r24, 0x99	; 153
     a18:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								ROOM1();
     a1c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <ROOM1+0x162>
		{
			switch(Key)
			{
				case '1':
				LCD_Clear();
				Key = STD_Low;
     a22:	cd 2f       	mov	r28, r29
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     a24:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				ROOM1();
     a28:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
				break;
     a2c:	6f c1       	rjmp	.+734    	; 0xd0c <ROOM1+0x44a>
				
				
				case '2':
				LCD_Clear();
     a2e:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
     a32:	2f ef       	ldi	r18, 0xFF	; 255
     a34:	80 e7       	ldi	r24, 0x70	; 112
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	21 50       	subi	r18, 0x01	; 1
     a3a:	80 40       	sbci	r24, 0x00	; 0
     a3c:	90 40       	sbci	r25, 0x00	; 0
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <ROOM1+0x176>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <ROOM1+0x180>
     a42:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led2);
     a44:	82 e3       	ldi	r24, 0x32	; 50
     a46:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
     a4a:	2f ef       	ldi	r18, 0xFF	; 255
     a4c:	80 e7       	ldi	r24, 0x70	; 112
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	21 50       	subi	r18, 0x01	; 1
     a52:	80 40       	sbci	r24, 0x00	; 0
     a54:	90 40       	sbci	r25, 0x00	; 0
     a56:	e1 f7       	brne	.-8      	; 0xa50 <ROOM1+0x18e>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <ROOM1+0x198>
     a5a:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
				if(Slave_Status == On)
     a62:	8f 34       	cpi	r24, 0x4F	; 79
     a64:	89 f5       	brne	.+98     	; 0xac8 <ROOM1+0x206>
				{
					LCD_Clear();
     a66:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Led is On!");
     a6a:	85 e6       	ldi	r24, 0x65	; 101
     a6c:	93 e0       	ldi	r25, 0x03	; 3
     a6e:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     a72:	6d 2f       	mov	r22, r29
     a74:	8e 2d       	mov	r24, r14
     a76:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     a7a:	80 e7       	ldi	r24, 0x70	; 112
     a7c:	93 e0       	ldi	r25, 0x03	; 3
     a7e:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     a82:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     a86:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     a88:	88 23       	and	r24, r24
     a8a:	d9 f3       	breq	.-10     	; 0xa82 <ROOM1+0x1c0>
     a8c:	2f ef       	ldi	r18, 0xFF	; 255
     a8e:	81 ee       	ldi	r24, 0xE1	; 225
     a90:	94 e0       	ldi	r25, 0x04	; 4
     a92:	21 50       	subi	r18, 0x01	; 1
     a94:	80 40       	sbci	r24, 0x00	; 0
     a96:	90 40       	sbci	r25, 0x00	; 0
     a98:	e1 f7       	brne	.-8      	; 0xa92 <ROOM1+0x1d0>
     a9a:	00 c0       	rjmp	.+0      	; 0xa9c <ROOM1+0x1da>
     a9c:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     a9e:	c1 33       	cpi	r28, 0x31	; 49
     aa0:	19 f0       	breq	.+6      	; 0xaa8 <ROOM1+0x1e6>
     aa2:	c2 33       	cpi	r28, 0x32	; 50
     aa4:	59 f0       	breq	.+22     	; 0xabc <ROOM1+0x1fa>
     aa6:	44 c0       	rjmp	.+136    	; 0xb30 <ROOM1+0x26e>
							{
								case '1':
								SPI_TxRx(Led2_TurnOff);
     aa8:	82 e2       	ldi	r24, 0x22	; 34
     aaa:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room1 is Off now!");
     aae:	8e ec       	ldi	r24, 0xCE	; 206
     ab0:	93 e0       	ldi	r25, 0x03	; 3
     ab2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM1();
     ab6:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
     aba:	e3 cf       	rjmp	.-58     	; 0xa82 <ROOM1+0x1c0>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     abc:	89 e9       	ldi	r24, 0x99	; 153
     abe:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								ROOM1();
     ac2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
     ac6:	34 c0       	rjmp	.+104    	; 0xb30 <ROOM1+0x26e>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     ac8:	86 34       	cpi	r24, 0x46	; 70
     aca:	89 f5       	brne	.+98     	; 0xb2e <ROOM1+0x26c>
				{
					LCD_Clear();
     acc:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Led is Off!");
     ad0:	8a e9       	ldi	r24, 0x9A	; 154
     ad2:	93 e0       	ldi	r25, 0x03	; 3
     ad4:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     ad8:	6d 2f       	mov	r22, r29
     ada:	8e 2d       	mov	r24, r14
     adc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     ae0:	86 ea       	ldi	r24, 0xA6	; 166
     ae2:	93 e0       	ldi	r25, 0x03	; 3
     ae4:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     ae8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     aec:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     aee:	88 23       	and	r24, r24
     af0:	d9 f3       	breq	.-10     	; 0xae8 <ROOM1+0x226>
     af2:	2f ef       	ldi	r18, 0xFF	; 255
     af4:	81 ee       	ldi	r24, 0xE1	; 225
     af6:	94 e0       	ldi	r25, 0x04	; 4
     af8:	21 50       	subi	r18, 0x01	; 1
     afa:	80 40       	sbci	r24, 0x00	; 0
     afc:	90 40       	sbci	r25, 0x00	; 0
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <ROOM1+0x236>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <ROOM1+0x240>
     b02:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     b04:	c1 33       	cpi	r28, 0x31	; 49
     b06:	19 f0       	breq	.+6      	; 0xb0e <ROOM1+0x24c>
     b08:	c2 33       	cpi	r28, 0x32	; 50
     b0a:	59 f0       	breq	.+22     	; 0xb22 <ROOM1+0x260>
     b0c:	11 c0       	rjmp	.+34     	; 0xb30 <ROOM1+0x26e>
							{
								case '1':
								SPI_TxRx(Led2_TurnOn);
     b0e:	82 e1       	ldi	r24, 0x12	; 18
     b10:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room1 is on now!");
     b14:	87 ee       	ldi	r24, 0xE7	; 231
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM1();
     b1c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
								break;
     b20:	e3 cf       	rjmp	.-58     	; 0xae8 <ROOM1+0x226>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     b22:	89 e9       	ldi	r24, 0x99	; 153
     b24:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Key = STD_Low;
								ROOM1();
     b28:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
								break;
     b2c:	dd cf       	rjmp	.-70     	; 0xae8 <ROOM1+0x226>
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     b2e:	cd 2f       	mov	r28, r29
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     b30:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				ROOM1();
     b34:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
				break;
     b38:	e9 c0       	rjmp	.+466    	; 0xd0c <ROOM1+0x44a>
				
				case '3':
				LCD_Clear();
     b3a:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
     b3e:	2f ef       	ldi	r18, 0xFF	; 255
     b40:	80 e7       	ldi	r24, 0x70	; 112
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	21 50       	subi	r18, 0x01	; 1
     b46:	80 40       	sbci	r24, 0x00	; 0
     b48:	90 40       	sbci	r25, 0x00	; 0
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <ROOM1+0x282>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <ROOM1+0x28c>
     b4e:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Air_Cond);
     b50:	86 e3       	ldi	r24, 0x36	; 54
     b52:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
     b56:	2f ef       	ldi	r18, 0xFF	; 255
     b58:	80 e7       	ldi	r24, 0x70	; 112
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	21 50       	subi	r18, 0x01	; 1
     b5e:	80 40       	sbci	r24, 0x00	; 0
     b60:	90 40       	sbci	r25, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <ROOM1+0x29a>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <ROOM1+0x2a4>
     b66:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
				if(Slave_Status == On)
     b6e:	8f 34       	cpi	r24, 0x4F	; 79
     b70:	89 f5       	brne	.+98     	; 0xbd4 <ROOM1+0x312>
				{
					LCD_Clear();
     b72:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Air-Cond is On!");
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	93 e0       	ldi	r25, 0x03	; 3
     b7a:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     b7e:	6d 2f       	mov	r22, r29
     b80:	8e 2d       	mov	r24, r14
     b82:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     b86:	80 e7       	ldi	r24, 0x70	; 112
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     b8e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     b92:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     b94:	88 23       	and	r24, r24
     b96:	d9 f3       	breq	.-10     	; 0xb8e <ROOM1+0x2cc>
     b98:	2f ef       	ldi	r18, 0xFF	; 255
     b9a:	81 ee       	ldi	r24, 0xE1	; 225
     b9c:	94 e0       	ldi	r25, 0x04	; 4
     b9e:	21 50       	subi	r18, 0x01	; 1
     ba0:	80 40       	sbci	r24, 0x00	; 0
     ba2:	90 40       	sbci	r25, 0x00	; 0
     ba4:	e1 f7       	brne	.-8      	; 0xb9e <ROOM1+0x2dc>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <ROOM1+0x2e6>
     ba8:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     baa:	c1 33       	cpi	r28, 0x31	; 49
     bac:	19 f0       	breq	.+6      	; 0xbb4 <ROOM1+0x2f2>
     bae:	c2 33       	cpi	r28, 0x32	; 50
     bb0:	59 f0       	breq	.+22     	; 0xbc8 <ROOM1+0x306>
     bb2:	92 c0       	rjmp	.+292    	; 0xcd8 <ROOM1+0x416>
							{
								case '1':
								SPI_TxRx(Air_Cond_TurnOff);
     bb4:	86 e2       	ldi	r24, 0x26	; 38
     bb6:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nAir conditioner,Room1 is Off now!");
     bba:	8f e0       	ldi	r24, 0x0F	; 15
     bbc:	94 e0       	ldi	r25, 0x04	; 4
     bbe:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM1();
     bc2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
     bc6:	e3 cf       	rjmp	.-58     	; 0xb8e <ROOM1+0x2cc>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     bc8:	89 e9       	ldi	r24, 0x99	; 153
     bca:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								ROOM1();
     bce:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
     bd2:	82 c0       	rjmp	.+260    	; 0xcd8 <ROOM1+0x416>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     bd4:	86 34       	cpi	r24, 0x46	; 70
     bd6:	09 f0       	breq	.+2      	; 0xbda <ROOM1+0x318>
     bd8:	7e c0       	rjmp	.+252    	; 0xcd6 <ROOM1+0x414>
				{
					LCD_Clear();
     bda:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Air-Cond is Off!");
     bde:	82 e3       	ldi	r24, 0x32	; 50
     be0:	94 e0       	ldi	r25, 0x04	; 4
     be2:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     be6:	6d 2f       	mov	r22, r29
     be8:	8e 2d       	mov	r24, r14
     bea:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     bee:	86 ea       	ldi	r24, 0xA6	; 166
     bf0:	93 e0       	ldi	r25, 0x03	; 3
     bf2:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     bf6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     bfa:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     bfc:	88 23       	and	r24, r24
     bfe:	d9 f3       	breq	.-10     	; 0xbf6 <ROOM1+0x334>
     c00:	2f ef       	ldi	r18, 0xFF	; 255
     c02:	81 ee       	ldi	r24, 0xE1	; 225
     c04:	94 e0       	ldi	r25, 0x04	; 4
     c06:	21 50       	subi	r18, 0x01	; 1
     c08:	80 40       	sbci	r24, 0x00	; 0
     c0a:	90 40       	sbci	r25, 0x00	; 0
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <ROOM1+0x344>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <ROOM1+0x34e>
     c10:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     c12:	c1 33       	cpi	r28, 0x31	; 49
     c14:	21 f0       	breq	.+8      	; 0xc1e <ROOM1+0x35c>
     c16:	c2 33       	cpi	r28, 0x32	; 50
     c18:	09 f4       	brne	.+2      	; 0xc1c <ROOM1+0x35a>
     c1a:	53 c0       	rjmp	.+166    	; 0xcc2 <ROOM1+0x400>
     c1c:	58 c0       	rjmp	.+176    	; 0xcce <ROOM1+0x40c>
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
								LCD_Clear();
     c1e:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
								LCD_String("Set Temp:__");
     c22:	83 e4       	ldi	r24, 0x43	; 67
     c24:	94 e0       	ldi	r25, 0x04	; 4
     c26:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
								LCD_Custome_Char(1,customChar); //Degree symbol
     c2a:	60 e6       	ldi	r22, 0x60	; 96
     c2c:	70 e0       	ldi	r23, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	0e 94 2d 0a 	call	0x145a	; 0x145a <LCD_Custome_Char>
								LCD_SetPos(1,11);
     c34:	6b e0       	ldi	r22, 0x0B	; 11
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
								LCD_Char(1);
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
								LCD_Char('C');
     c42:	83 e4       	ldi	r24, 0x43	; 67
     c44:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
								LCD_SetPos(1,9);
     c48:	69 e0       	ldi	r22, 0x09	; 9
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
							_delay_ms(100);
							switch(Key)
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
     c50:	11 e0       	ldi	r17, 0x01	; 1
     c52:	cd 2c       	mov	r12, r13
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     c54:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     c58:	c8 2f       	mov	r28, r24
									if((Key != STD_Low) && (Counter == 1))
     c5a:	88 23       	and	r24, r24
     c5c:	71 f0       	breq	.+28     	; 0xc7a <ROOM1+0x3b8>
     c5e:	11 30       	cpi	r17, 0x01	; 1
     c60:	29 f4       	brne	.+10     	; 0xc6c <ROOM1+0x3aa>
									{
										Tenth = Key;
										LCD_Char(Tenth);
     c62:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     c66:	cc 2e       	mov	r12, r28
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     c68:	1b 2d       	mov	r17, r11
     c6a:	f4 cf       	rjmp	.-24     	; 0xc54 <ROOM1+0x392>
									}
									else if((Key != STD_Low) && (Counter == 2))
     c6c:	12 30       	cpi	r17, 0x02	; 2
     c6e:	49 f4       	brne	.+18     	; 0xc82 <ROOM1+0x3c0>
									{
										Ones = Key;
										LCD_Char(Ones);
     c70:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     c74:	9c 2f       	mov	r25, r28
										Counter++;
									}
									else if((Key != STD_Low) && (Counter == 2))
									{
										Ones = Key;
										LCD_Char(Ones);
     c76:	cd 2d       	mov	r28, r13
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <ROOM1+0x3c2>
								LCD_Custome_Char(1,customChar); //Degree symbol
								LCD_SetPos(1,11);
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
     c7a:	13 30       	cpi	r17, 0x03	; 3
     c7c:	58 f3       	brcs	.-42     	; 0xc54 <ROOM1+0x392>
     c7e:	98 2f       	mov	r25, r24
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <ROOM1+0x3c2>
     c82:	9d 2d       	mov	r25, r13
									else
									{
										//Do Nothing
									}
								}
								Temperature = (unsigned char)((((unsigned char)Tenth - '0') * 10) + (Ones - '0'));
     c84:	8c 2d       	mov	r24, r12
     c86:	88 0f       	add	r24, r24
     c88:	80 56       	subi	r24, 0x60	; 96
     c8a:	f8 2e       	mov	r15, r24
     c8c:	ff 0c       	add	r15, r15
     c8e:	ff 0c       	add	r15, r15
     c90:	f8 0e       	add	r15, r24
     c92:	90 53       	subi	r25, 0x30	; 48
     c94:	f9 0e       	add	r15, r25
     c96:	2f ef       	ldi	r18, 0xFF	; 255
     c98:	81 ee       	ldi	r24, 0xE1	; 225
     c9a:	94 e0       	ldi	r25, 0x04	; 4
     c9c:	21 50       	subi	r18, 0x01	; 1
     c9e:	80 40       	sbci	r24, 0x00	; 0
     ca0:	90 40       	sbci	r25, 0x00	; 0
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <ROOM1+0x3da>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <ROOM1+0x3e4>
     ca6:	00 00       	nop
								_delay_ms(100);
								SPI_TxRx(Air_Cond_TurnOn);
     ca8:	86 e1       	ldi	r24, 0x16	; 22
     caa:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nAir conditioner,Room1 is on now!");
     cae:	8f e4       	ldi	r24, 0x4F	; 79
     cb0:	94 e0       	ldi	r25, 0x04	; 4
     cb2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								SPI_TxRx(Temperature);
     cb6:	8f 2d       	mov	r24, r15
     cb8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								ROOM1();
     cbc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
								break;
     cc0:	06 c0       	rjmp	.+12     	; 0xcce <ROOM1+0x40c>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     cc2:	89 e9       	ldi	r24, 0x99	; 153
     cc4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Key = STD_Low;
								ROOM1();
     cc8:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
     ccc:	94 cf       	rjmp	.-216    	; 0xbf6 <ROOM1+0x334>
					LCD_Clear();
					LCD_String("Air-Cond is Off!");
					LCD_SetPos(2,0);
					LCD_String("1:TurnOn 2:back");
					
					while(Key == STD_Low)
     cce:	cc 23       	and	r28, r28
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <ROOM1+0x412>
     cd2:	91 cf       	rjmp	.-222    	; 0xbf6 <ROOM1+0x334>
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <ROOM1+0x416>
				ROOM1();
				break;
				
				case '3':
				LCD_Clear();
				Key = STD_Low;
     cd6:	cd 2f       	mov	r28, r29
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     cd8:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				ROOM1();
     cdc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <ROOM1>
				break;
     ce0:	15 c0       	rjmp	.+42     	; 0xd0c <ROOM1+0x44a>
				
				case '4':
				LCD_Clear();
     ce2:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				MainMenu();
     ce6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <MainMenu>
     cea:	13 c0       	rjmp	.+38     	; 0xd12 <ROOM1+0x450>
				break;
				
				default:
				LCD_Clear();
     cec:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				LCD_String("Wrong choice!");
     cf0:	81 e7       	ldi	r24, 0x71	; 113
     cf2:	94 e0       	ldi	r25, 0x04	; 4
     cf4:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
     cf8:	2f ef       	ldi	r18, 0xFF	; 255
     cfa:	89 e6       	ldi	r24, 0x69	; 105
     cfc:	98 e1       	ldi	r25, 0x18	; 24
     cfe:	21 50       	subi	r18, 0x01	; 1
     d00:	80 40       	sbci	r24, 0x00	; 0
     d02:	90 40       	sbci	r25, 0x00	; 0
     d04:	e1 f7       	brne	.-8      	; 0xcfe <ROOM1+0x43c>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <ROOM1+0x446>
     d08:	00 00       	nop
				_delay_ms(500);
				Key = STD_Low;
				goto Trylamp;
     d0a:	eb cd       	rjmp	.-1066   	; 0x8e2 <ROOM1+0x20>
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
	LCD_String("3:AC    4:Return");
	
	while(Key == STD_Low)
     d0c:	cc 23       	and	r28, r28
     d0e:	09 f4       	brne	.+2      	; 0xd12 <ROOM1+0x450>
     d10:	f6 cd       	rjmp	.-1044   	; 0x8fe <ROOM1+0x3c>
				goto Trylamp;
				break;
			}
		}
	}
}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	df 90       	pop	r13
     d20:	cf 90       	pop	r12
     d22:	bf 90       	pop	r11
     d24:	af 90       	pop	r10
     d26:	08 95       	ret

00000d28 <ROOM2>:

/*************************************************************
				Room2 Controlling Menu
*************************************************************/
void ROOM2(void)
{
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
     d2e:	10 e0       	ldi	r17, 0x00	; 0
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     d30:	d1 2f       	mov	r29, r17
*************************************************************/
void ROOM2(void)
{
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
     d32:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
	LCD_String("1:Lamp1 2:Lamp2");
     d36:	84 e4       	ldi	r24, 0x44	; 68
     d38:	93 e0       	ldi	r25, 0x03	; 3
     d3a:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
	LCD_SetPos(2,0);
     d3e:	61 2f       	mov	r22, r17
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
	LCD_String("3:Lamp3 4:Return");
     d46:	8f e7       	ldi	r24, 0x7F	; 127
     d48:	94 e0       	ldi	r25, 0x04	; 4
     d4a:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
	
	while(Key == STD_Low)
	{
		Key = GetKey();
     d4e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
		if (Key != STD_Low)
     d52:	88 23       	and	r24, r24
     d54:	e1 f3       	breq	.-8      	; 0xd4e <ROOM2+0x26>
		{
			switch(Key)
     d56:	82 33       	cpi	r24, 0x32	; 50
     d58:	09 f4       	brne	.+2      	; 0xd5c <ROOM2+0x34>
     d5a:	91 c0       	rjmp	.+290    	; 0xe7e <ROOM2+0x156>
     d5c:	18 f4       	brcc	.+6      	; 0xd64 <ROOM2+0x3c>
     d5e:	81 33       	cpi	r24, 0x31	; 49
     d60:	41 f0       	breq	.+16     	; 0xd72 <ROOM2+0x4a>
     d62:	9e c1       	rjmp	.+828    	; 0x10a0 <ROOM2+0x378>
     d64:	83 33       	cpi	r24, 0x33	; 51
     d66:	09 f4       	brne	.+2      	; 0xd6a <ROOM2+0x42>
     d68:	10 c1       	rjmp	.+544    	; 0xf8a <ROOM2+0x262>
     d6a:	84 33       	cpi	r24, 0x34	; 52
     d6c:	09 f4       	brne	.+2      	; 0xd70 <ROOM2+0x48>
     d6e:	93 c1       	rjmp	.+806    	; 0x1096 <ROOM2+0x36e>
     d70:	97 c1       	rjmp	.+814    	; 0x10a0 <ROOM2+0x378>
			{
				case '1':
				LCD_Clear();
     d72:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
     d76:	2f ef       	ldi	r18, 0xFF	; 255
     d78:	80 e7       	ldi	r24, 0x70	; 112
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	21 50       	subi	r18, 0x01	; 1
     d7e:	80 40       	sbci	r24, 0x00	; 0
     d80:	90 40       	sbci	r25, 0x00	; 0
     d82:	e1 f7       	brne	.-8      	; 0xd7c <ROOM2+0x54>
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <ROOM2+0x5e>
     d86:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led3);
     d88:	83 e3       	ldi	r24, 0x33	; 51
     d8a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
     d8e:	2f ef       	ldi	r18, 0xFF	; 255
     d90:	80 e7       	ldi	r24, 0x70	; 112
     d92:	92 e0       	ldi	r25, 0x02	; 2
     d94:	21 50       	subi	r18, 0x01	; 1
     d96:	80 40       	sbci	r24, 0x00	; 0
     d98:	90 40       	sbci	r25, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <ROOM2+0x6c>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <ROOM2+0x76>
     d9e:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
				if(Slave_Status == On)
     da6:	8f 34       	cpi	r24, 0x4F	; 79
     da8:	89 f5       	brne	.+98     	; 0xe0c <ROOM2+0xe4>
				{
					LCD_Clear();
     daa:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Led is On!");
     dae:	85 e6       	ldi	r24, 0x65	; 101
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     db6:	6d 2f       	mov	r22, r29
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     dbe:	80 e7       	ldi	r24, 0x70	; 112
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     dc6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     dca:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     dcc:	88 23       	and	r24, r24
     dce:	d9 f3       	breq	.-10     	; 0xdc6 <ROOM2+0x9e>
     dd0:	2f ef       	ldi	r18, 0xFF	; 255
     dd2:	81 ee       	ldi	r24, 0xE1	; 225
     dd4:	94 e0       	ldi	r25, 0x04	; 4
     dd6:	21 50       	subi	r18, 0x01	; 1
     dd8:	80 40       	sbci	r24, 0x00	; 0
     dda:	90 40       	sbci	r25, 0x00	; 0
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <ROOM2+0xae>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <ROOM2+0xb8>
     de0:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     de2:	c1 33       	cpi	r28, 0x31	; 49
     de4:	19 f0       	breq	.+6      	; 0xdec <ROOM2+0xc4>
     de6:	c2 33       	cpi	r28, 0x32	; 50
     de8:	59 f0       	breq	.+22     	; 0xe00 <ROOM2+0xd8>
     dea:	44 c0       	rjmp	.+136    	; 0xe74 <ROOM2+0x14c>
							{
								case '1':
								SPI_TxRx(Led3_TurnOff);
     dec:	83 e2       	ldi	r24, 0x23	; 35
     dee:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room2 is Off now!");
     df2:	80 e9       	ldi	r24, 0x90	; 144
     df4:	94 e0       	ldi	r25, 0x04	; 4
     df6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2();
     dfa:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
     dfe:	e3 cf       	rjmp	.-58     	; 0xdc6 <ROOM2+0x9e>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     e00:	89 e9       	ldi	r24, 0x99	; 153
     e02:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								ROOM2();
     e06:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
     e0a:	34 c0       	rjmp	.+104    	; 0xe74 <ROOM2+0x14c>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     e0c:	86 34       	cpi	r24, 0x46	; 70
     e0e:	89 f5       	brne	.+98     	; 0xe72 <ROOM2+0x14a>
				{
					LCD_Clear();
     e10:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Led is Off!");
     e14:	8a e9       	ldi	r24, 0x9A	; 154
     e16:	93 e0       	ldi	r25, 0x03	; 3
     e18:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     e1c:	6d 2f       	mov	r22, r29
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     e24:	86 ea       	ldi	r24, 0xA6	; 166
     e26:	93 e0       	ldi	r25, 0x03	; 3
     e28:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     e2c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     e30:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     e32:	88 23       	and	r24, r24
     e34:	d9 f3       	breq	.-10     	; 0xe2c <ROOM2+0x104>
     e36:	2f ef       	ldi	r18, 0xFF	; 255
     e38:	81 ee       	ldi	r24, 0xE1	; 225
     e3a:	94 e0       	ldi	r25, 0x04	; 4
     e3c:	21 50       	subi	r18, 0x01	; 1
     e3e:	80 40       	sbci	r24, 0x00	; 0
     e40:	90 40       	sbci	r25, 0x00	; 0
     e42:	e1 f7       	brne	.-8      	; 0xe3c <ROOM2+0x114>
     e44:	00 c0       	rjmp	.+0      	; 0xe46 <ROOM2+0x11e>
     e46:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     e48:	c1 33       	cpi	r28, 0x31	; 49
     e4a:	19 f0       	breq	.+6      	; 0xe52 <ROOM2+0x12a>
     e4c:	c2 33       	cpi	r28, 0x32	; 50
     e4e:	59 f0       	breq	.+22     	; 0xe66 <ROOM2+0x13e>
     e50:	11 c0       	rjmp	.+34     	; 0xe74 <ROOM2+0x14c>
							{
								case '1':
								SPI_TxRx(Led3_TurnOn);
     e52:	83 e1       	ldi	r24, 0x13	; 19
     e54:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room2 is on now!");
     e58:	89 ea       	ldi	r24, 0xA9	; 169
     e5a:	94 e0       	ldi	r25, 0x04	; 4
     e5c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2();
     e60:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
     e64:	e3 cf       	rjmp	.-58     	; 0xe2c <ROOM2+0x104>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     e66:	89 e9       	ldi	r24, 0x99	; 153
     e68:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								ROOM2();
     e6c:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <ROOM2+0x14c>
		{
			switch(Key)
			{
				case '1':
				LCD_Clear();
				Key = STD_Low;
     e72:	cd 2f       	mov	r28, r29
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     e74:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				ROOM2();
     e78:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
				break;
     e7c:	21 c1       	rjmp	.+578    	; 0x10c0 <ROOM2+0x398>
				
				
				case '2':
				LCD_Clear();
     e7e:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
     e82:	2f ef       	ldi	r18, 0xFF	; 255
     e84:	80 e7       	ldi	r24, 0x70	; 112
     e86:	92 e0       	ldi	r25, 0x02	; 2
     e88:	21 50       	subi	r18, 0x01	; 1
     e8a:	80 40       	sbci	r24, 0x00	; 0
     e8c:	90 40       	sbci	r25, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <ROOM2+0x160>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <ROOM2+0x16a>
     e92:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led4);
     e94:	84 e3       	ldi	r24, 0x34	; 52
     e96:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
     e9a:	2f ef       	ldi	r18, 0xFF	; 255
     e9c:	80 e7       	ldi	r24, 0x70	; 112
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	21 50       	subi	r18, 0x01	; 1
     ea2:	80 40       	sbci	r24, 0x00	; 0
     ea4:	90 40       	sbci	r25, 0x00	; 0
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <ROOM2+0x178>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <ROOM2+0x182>
     eaa:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
				if(Slave_Status == On)
     eb2:	8f 34       	cpi	r24, 0x4F	; 79
     eb4:	89 f5       	brne	.+98     	; 0xf18 <ROOM2+0x1f0>
				{
					LCD_Clear();
     eb6:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Led is On!");
     eba:	85 e6       	ldi	r24, 0x65	; 101
     ebc:	93 e0       	ldi	r25, 0x03	; 3
     ebe:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     ec2:	6d 2f       	mov	r22, r29
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     eca:	80 e7       	ldi	r24, 0x70	; 112
     ecc:	93 e0       	ldi	r25, 0x03	; 3
     ece:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     ed2:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     ed6:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     ed8:	88 23       	and	r24, r24
     eda:	d9 f3       	breq	.-10     	; 0xed2 <ROOM2+0x1aa>
     edc:	2f ef       	ldi	r18, 0xFF	; 255
     ede:	81 ee       	ldi	r24, 0xE1	; 225
     ee0:	94 e0       	ldi	r25, 0x04	; 4
     ee2:	21 50       	subi	r18, 0x01	; 1
     ee4:	80 40       	sbci	r24, 0x00	; 0
     ee6:	90 40       	sbci	r25, 0x00	; 0
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <ROOM2+0x1ba>
     eea:	00 c0       	rjmp	.+0      	; 0xeec <ROOM2+0x1c4>
     eec:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     eee:	c1 33       	cpi	r28, 0x31	; 49
     ef0:	19 f0       	breq	.+6      	; 0xef8 <ROOM2+0x1d0>
     ef2:	c2 33       	cpi	r28, 0x32	; 50
     ef4:	59 f0       	breq	.+22     	; 0xf0c <ROOM2+0x1e4>
     ef6:	44 c0       	rjmp	.+136    	; 0xf80 <ROOM2+0x258>
							{
								case '1':
								SPI_TxRx(Led4_TurnOff);
     ef8:	84 e2       	ldi	r24, 0x24	; 36
     efa:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room2 is Off now!");
     efe:	81 ec       	ldi	r24, 0xC1	; 193
     f00:	94 e0       	ldi	r25, 0x04	; 4
     f02:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2();
     f06:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
     f0a:	e3 cf       	rjmp	.-58     	; 0xed2 <ROOM2+0x1aa>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     f0c:	89 e9       	ldi	r24, 0x99	; 153
     f0e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								ROOM2();
     f12:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
     f16:	34 c0       	rjmp	.+104    	; 0xf80 <ROOM2+0x258>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     f18:	86 34       	cpi	r24, 0x46	; 70
     f1a:	89 f5       	brne	.+98     	; 0xf7e <ROOM2+0x256>
				{
					LCD_Clear();
     f1c:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Led is Off!");
     f20:	8a e9       	ldi	r24, 0x9A	; 154
     f22:	93 e0       	ldi	r25, 0x03	; 3
     f24:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     f28:	6d 2f       	mov	r22, r29
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     f30:	86 ea       	ldi	r24, 0xA6	; 166
     f32:	93 e0       	ldi	r25, 0x03	; 3
     f34:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     f38:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     f3c:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     f3e:	88 23       	and	r24, r24
     f40:	d9 f3       	breq	.-10     	; 0xf38 <ROOM2+0x210>
     f42:	2f ef       	ldi	r18, 0xFF	; 255
     f44:	81 ee       	ldi	r24, 0xE1	; 225
     f46:	94 e0       	ldi	r25, 0x04	; 4
     f48:	21 50       	subi	r18, 0x01	; 1
     f4a:	80 40       	sbci	r24, 0x00	; 0
     f4c:	90 40       	sbci	r25, 0x00	; 0
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <ROOM2+0x220>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <ROOM2+0x22a>
     f52:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     f54:	c1 33       	cpi	r28, 0x31	; 49
     f56:	19 f0       	breq	.+6      	; 0xf5e <ROOM2+0x236>
     f58:	c2 33       	cpi	r28, 0x32	; 50
     f5a:	59 f0       	breq	.+22     	; 0xf72 <ROOM2+0x24a>
     f5c:	11 c0       	rjmp	.+34     	; 0xf80 <ROOM2+0x258>
							{
								case '1':
								SPI_TxRx(Led4_TurnOn);
     f5e:	84 e1       	ldi	r24, 0x14	; 20
     f60:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room2 is on now!");
     f64:	8a ed       	ldi	r24, 0xDA	; 218
     f66:	94 e0       	ldi	r25, 0x04	; 4
     f68:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2();
     f6c:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
								break;
     f70:	e3 cf       	rjmp	.-58     	; 0xf38 <ROOM2+0x210>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     f72:	89 e9       	ldi	r24, 0x99	; 153
     f74:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Key = STD_Low;
								ROOM2();
     f78:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
								break;
     f7c:	dd cf       	rjmp	.-70     	; 0xf38 <ROOM2+0x210>
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     f7e:	cd 2f       	mov	r28, r29
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     f80:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				ROOM2();
     f84:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
				break;
     f88:	9b c0       	rjmp	.+310    	; 0x10c0 <ROOM2+0x398>
				
				case '3':
				LCD_Clear();
     f8a:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
     f8e:	2f ef       	ldi	r18, 0xFF	; 255
     f90:	80 e7       	ldi	r24, 0x70	; 112
     f92:	92 e0       	ldi	r25, 0x02	; 2
     f94:	21 50       	subi	r18, 0x01	; 1
     f96:	80 40       	sbci	r24, 0x00	; 0
     f98:	90 40       	sbci	r25, 0x00	; 0
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <ROOM2+0x26c>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <ROOM2+0x276>
     f9e:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led5);
     fa0:	85 e3       	ldi	r24, 0x35	; 53
     fa2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
     fa6:	2f ef       	ldi	r18, 0xFF	; 255
     fa8:	80 e7       	ldi	r24, 0x70	; 112
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	21 50       	subi	r18, 0x01	; 1
     fae:	80 40       	sbci	r24, 0x00	; 0
     fb0:	90 40       	sbci	r25, 0x00	; 0
     fb2:	e1 f7       	brne	.-8      	; 0xfac <ROOM2+0x284>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <ROOM2+0x28e>
     fb6:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
				if(Slave_Status == On)
     fbe:	8f 34       	cpi	r24, 0x4F	; 79
     fc0:	89 f5       	brne	.+98     	; 0x1024 <ROOM2+0x2fc>
				{
					LCD_Clear();
     fc2:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Led is On!");
     fc6:	85 e6       	ldi	r24, 0x65	; 101
     fc8:	93 e0       	ldi	r25, 0x03	; 3
     fca:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
     fce:	6d 2f       	mov	r22, r29
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     fd6:	80 e7       	ldi	r24, 0x70	; 112
     fd8:	93 e0       	ldi	r25, 0x03	; 3
     fda:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     fde:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
     fe2:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     fe4:	88 23       	and	r24, r24
     fe6:	d9 f3       	breq	.-10     	; 0xfde <ROOM2+0x2b6>
     fe8:	2f ef       	ldi	r18, 0xFF	; 255
     fea:	81 ee       	ldi	r24, 0xE1	; 225
     fec:	94 e0       	ldi	r25, 0x04	; 4
     fee:	21 50       	subi	r18, 0x01	; 1
     ff0:	80 40       	sbci	r24, 0x00	; 0
     ff2:	90 40       	sbci	r25, 0x00	; 0
     ff4:	e1 f7       	brne	.-8      	; 0xfee <ROOM2+0x2c6>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <ROOM2+0x2d0>
     ff8:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     ffa:	c1 33       	cpi	r28, 0x31	; 49
     ffc:	19 f0       	breq	.+6      	; 0x1004 <ROOM2+0x2dc>
     ffe:	c2 33       	cpi	r28, 0x32	; 50
    1000:	59 f0       	breq	.+22     	; 0x1018 <ROOM2+0x2f0>
    1002:	44 c0       	rjmp	.+136    	; 0x108c <ROOM2+0x364>
							{
								case '1':
								SPI_TxRx(Led5_TurnOff);
    1004:	85 e2       	ldi	r24, 0x25	; 37
    1006:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp3,Room2 is Off now!");
    100a:	82 ef       	ldi	r24, 0xF2	; 242
    100c:	94 e0       	ldi	r25, 0x04	; 4
    100e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2();
    1012:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
    1016:	e3 cf       	rjmp	.-58     	; 0xfde <ROOM2+0x2b6>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
    1018:	89 e9       	ldi	r24, 0x99	; 153
    101a:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								ROOM2();
    101e:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
    1022:	34 c0       	rjmp	.+104    	; 0x108c <ROOM2+0x364>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
    1024:	86 34       	cpi	r24, 0x46	; 70
    1026:	89 f5       	brne	.+98     	; 0x108a <ROOM2+0x362>
				{
					LCD_Clear();
    1028:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
					LCD_String("Led is Off!");
    102c:	8a e9       	ldi	r24, 0x9A	; 154
    102e:	93 e0       	ldi	r25, 0x03	; 3
    1030:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					LCD_SetPos(2,0);
    1034:	6d 2f       	mov	r22, r29
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
    103c:	86 ea       	ldi	r24, 0xA6	; 166
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
    1044:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <GetKey>
    1048:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
    104a:	88 23       	and	r24, r24
    104c:	d9 f3       	breq	.-10     	; 0x1044 <ROOM2+0x31c>
    104e:	2f ef       	ldi	r18, 0xFF	; 255
    1050:	81 ee       	ldi	r24, 0xE1	; 225
    1052:	94 e0       	ldi	r25, 0x04	; 4
    1054:	21 50       	subi	r18, 0x01	; 1
    1056:	80 40       	sbci	r24, 0x00	; 0
    1058:	90 40       	sbci	r25, 0x00	; 0
    105a:	e1 f7       	brne	.-8      	; 0x1054 <ROOM2+0x32c>
    105c:	00 c0       	rjmp	.+0      	; 0x105e <ROOM2+0x336>
    105e:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
    1060:	c1 33       	cpi	r28, 0x31	; 49
    1062:	19 f0       	breq	.+6      	; 0x106a <ROOM2+0x342>
    1064:	c2 33       	cpi	r28, 0x32	; 50
    1066:	59 f0       	breq	.+22     	; 0x107e <ROOM2+0x356>
    1068:	11 c0       	rjmp	.+34     	; 0x108c <ROOM2+0x364>
							{
								case '1':
								SPI_TxRx(Led5_TurnOn);
    106a:	85 e1       	ldi	r24, 0x15	; 21
    106c:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp3,Room2 is on now!");
    1070:	8b e0       	ldi	r24, 0x0B	; 11
    1072:	95 e0       	ldi	r25, 0x05	; 5
    1074:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2();
    1078:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
								break;
    107c:	e3 cf       	rjmp	.-58     	; 0x1044 <ROOM2+0x31c>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
    107e:	89 e9       	ldi	r24, 0x99	; 153
    1080:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <SPI_TxRx>
								Key = STD_Low;
								ROOM2();
    1084:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
								break;
    1088:	dd cf       	rjmp	.-70     	; 0x1044 <ROOM2+0x31c>
				ROOM2();
				break;
				
				case '3':
				LCD_Clear();
				Key = STD_Low;
    108a:	cd 2f       	mov	r28, r29
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
    108c:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				ROOM2();
    1090:	0e 94 94 06 	call	0xd28	; 0xd28 <ROOM2>
				break;
    1094:	15 c0       	rjmp	.+42     	; 0x10c0 <ROOM2+0x398>
				
				case '4':
				LCD_Clear();
    1096:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				MainMenu();
    109a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <MainMenu>
    109e:	13 c0       	rjmp	.+38     	; 0x10c6 <ROOM2+0x39e>
				break;
				
				default:
				LCD_Clear();
    10a0:	0e 94 48 0a 	call	0x1490	; 0x1490 <LCD_Clear>
				LCD_String("Wrong choice!");
    10a4:	81 e7       	ldi	r24, 0x71	; 113
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	0e 94 06 0a 	call	0x140c	; 0x140c <LCD_String>
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	89 e6       	ldi	r24, 0x69	; 105
    10b0:	98 e1       	ldi	r25, 0x18	; 24
    10b2:	21 50       	subi	r18, 0x01	; 1
    10b4:	80 40       	sbci	r24, 0x00	; 0
    10b6:	90 40       	sbci	r25, 0x00	; 0
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <ROOM2+0x38a>
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <ROOM2+0x394>
    10bc:	00 00       	nop
				_delay_ms(500);
				Key = STD_Low;
				goto Trylamp;
    10be:	39 ce       	rjmp	.-910    	; 0xd32 <ROOM2+0xa>
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
	LCD_String("3:Lamp3 4:Return");
	
	while(Key == STD_Low)
    10c0:	cc 23       	and	r28, r28
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <ROOM2+0x39e>
    10c4:	44 ce       	rjmp	.-888    	; 0xd4e <ROOM2+0x26>
				goto Trylamp;
				break;
			}
		}
	}
}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	08 95       	ret

000010ce <Bluetooth_Init>:

void Bluetooth_Init(UART_Config * options){
	UART_Init(options);
}
void Bluetooth_Transmait(u8 data){
	UART_Transmait(data);
    10ce:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <UART_Init>
    10d2:	08 95       	ret

000010d4 <Bluetooth_TransmaitString>:
}
void Bluetooth_TransmaitString(s8 * string){
	UART_TransmaitString(string);
    10d4:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_TransmaitString>
    10d8:	08 95       	ret

000010da <Bluetooth_Receive>:
}
u8 Bluetooth_Receive(void){
	return UART_Receive();
    10da:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <UART_Receive>
}
    10de:	08 95       	ret

000010e0 <EEPROM_WriteByte>:
* Created: 5/6/2023 2:33:25 PM
*  Author: user
*/
#include "EEPROM.h"

void EEPROM_WriteByte(u8 DeviceAdd,u8 LocAdd,u8 data){
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	c8 2f       	mov	r28, r24
    10e8:	d6 2f       	mov	r29, r22
    10ea:	14 2f       	mov	r17, r20
	u8 wDeviceAdd = (DeviceAdd & 0xFE);//to clear the first bit
	if (TWI_Start() == 0x08)
    10ec:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_Start>
    10f0:	88 30       	cpi	r24, 0x08	; 8
    10f2:	91 f4       	brne	.+36     	; 0x1118 <EEPROM_WriteByte+0x38>
	{
		if (TWI_Send(wDeviceAdd) == 0x18)
    10f4:	8c 2f       	mov	r24, r28
    10f6:	8e 7f       	andi	r24, 0xFE	; 254
    10f8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_Send>
    10fc:	88 31       	cpi	r24, 0x18	; 24
    10fe:	61 f4       	brne	.+24     	; 0x1118 <EEPROM_WriteByte+0x38>
		{
			if (TWI_Send(LocAdd) == 0x28)
    1100:	8d 2f       	mov	r24, r29
    1102:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_Send>
    1106:	88 32       	cpi	r24, 0x28	; 40
    1108:	39 f4       	brne	.+14     	; 0x1118 <EEPROM_WriteByte+0x38>
			{
				if (TWI_Send(data) == 0x28)
    110a:	81 2f       	mov	r24, r17
    110c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_Send>
    1110:	88 32       	cpi	r24, 0x28	; 40
    1112:	11 f4       	brne	.+4      	; 0x1118 <EEPROM_WriteByte+0x38>
				{
					TWI_Stop();
    1114:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWI_Stop>
				}
			}
		}
	}
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	08 95       	ret

00001120 <EEPROM_ReadByte>:
u8 EEPROM_ReadByte(u8 DeviceAdd,u8 LocAdd){
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	1f 92       	push	r1
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	18 2f       	mov	r17, r24
    1130:	06 2f       	mov	r16, r22
	u8 wDeviceAdd = (DeviceAdd & 0xFE);//to clear the first bit to write
	u8 rDeviceAdd = (DeviceAdd | 0x01);//to set the first bit to read
	u8 data = 0;
    1132:	19 82       	std	Y+1, r1	; 0x01
	if (TWI_Start() == 0x08)
    1134:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_Start>
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	e9 f4       	brne	.+58     	; 0x1176 <EEPROM_ReadByte+0x56>
	{
		if (TWI_Send(wDeviceAdd) == 0x18)
    113c:	81 2f       	mov	r24, r17
    113e:	8e 7f       	andi	r24, 0xFE	; 254
    1140:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_Send>
    1144:	88 31       	cpi	r24, 0x18	; 24
    1146:	b9 f4       	brne	.+46     	; 0x1176 <EEPROM_ReadByte+0x56>
		{
			if (TWI_Send(LocAdd) == 0x28)
    1148:	80 2f       	mov	r24, r16
    114a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_Send>
    114e:	88 32       	cpi	r24, 0x28	; 40
    1150:	91 f4       	brne	.+36     	; 0x1176 <EEPROM_ReadByte+0x56>
			{
				if (TWI_Start() == 0x10)
    1152:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <TWI_Start>
    1156:	80 31       	cpi	r24, 0x10	; 16
    1158:	71 f4       	brne	.+28     	; 0x1176 <EEPROM_ReadByte+0x56>
				{
					if (TWI_Send(rDeviceAdd) == 0x40)
    115a:	81 2f       	mov	r24, r17
    115c:	81 60       	ori	r24, 0x01	; 1
    115e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_Send>
    1162:	80 34       	cpi	r24, 0x40	; 64
    1164:	41 f4       	brne	.+16     	; 0x1176 <EEPROM_ReadByte+0x56>
					{
						//_delay_ms(50);
						if(TWI_Read_NAck(&data) == 0x58){
    1166:	ce 01       	movw	r24, r28
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <TWI_Read_NAck>
    116e:	88 35       	cpi	r24, 0x58	; 88
    1170:	11 f4       	brne	.+4      	; 0x1176 <EEPROM_ReadByte+0x56>
							TWI_Stop();
    1172:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <TWI_Stop>
				}
			}
		}
	}
	return data;
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	0f 90       	pop	r0
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <Keypad_Init>:
*  Author: user
*/
#include "Keypad_Config.h"
#include "Keypad.h"

void Keypad_Init(void){
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	c8 e7       	ldi	r28, 0x78	; 120
    1192:	d0 e0       	ldi	r29, 0x00	; 0
    1194:	0f 2e       	mov	r0, r31
    1196:	fc e7       	ldi	r31, 0x7C	; 124
    1198:	ef 2e       	mov	r14, r31
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	ff 2e       	mov	r15, r31
    119e:	f0 2d       	mov	r31, r0
    11a0:	8e 01       	movw	r16, r28
	//cols input
	for (u8 i=0;i<colsCount;i++)
	{
		DIO_ConfigChannel(keypadCols[i],Input);
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	89 91       	ld	r24, Y+
    11a6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	f8 01       	movw	r30, r16
    11ae:	80 81       	ld	r24, Z
    11b0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
#include "Keypad_Config.h"
#include "Keypad.h"

void Keypad_Init(void){
	//cols input
	for (u8 i=0;i<colsCount;i++)
    11b4:	ce 15       	cp	r28, r14
    11b6:	df 05       	cpc	r29, r15
    11b8:	99 f7       	brne	.-26     	; 0x11a0 <Keypad_Init+0x1c>
    11ba:	cc e7       	ldi	r28, 0x7C	; 124
    11bc:	d0 e0       	ldi	r29, 0x00	; 0
    11be:	0f 2e       	mov	r0, r31
    11c0:	f0 e8       	ldi	r31, 0x80	; 128
    11c2:	ef 2e       	mov	r14, r31
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	ff 2e       	mov	r15, r31
    11c8:	f0 2d       	mov	r31, r0
    11ca:	8e 01       	movw	r16, r28
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
	}
	//rows output
	for (u8 j=0;j<rowsCount;j++)
	{
		DIO_ConfigChannel(keypadRows[j],Output);
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	89 91       	ld	r24, Y+
    11d0:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
    11d4:	61 e0       	ldi	r22, 0x01	; 1
    11d6:	f8 01       	movw	r30, r16
    11d8:	80 81       	ld	r24, Z
    11da:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	{
		DIO_ConfigChannel(keypadCols[i],Input);
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
	}
	//rows output
	for (u8 j=0;j<rowsCount;j++)
    11de:	ce 15       	cp	r28, r14
    11e0:	df 05       	cpc	r29, r15
    11e2:	99 f7       	brne	.-26     	; 0x11ca <Keypad_Init+0x46>
	{
		DIO_ConfigChannel(keypadRows[j],Output);
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
	}
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	08 95       	ret

000011f2 <GetKey>:
u8 GetKey(void){
    11f2:	6f 92       	push	r6
    11f4:	7f 92       	push	r7
    11f6:	8f 92       	push	r8
    11f8:	9f 92       	push	r9
    11fa:	af 92       	push	r10
    11fc:	bf 92       	push	r11
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	0c e7       	ldi	r16, 0x7C	; 124
    1210:	10 e0       	ldi	r17, 0x00	; 0
    1212:	c1 2c       	mov	r12, r1
    1214:	d1 2c       	mov	r13, r1
	for (u8 i=0;i<rowsCount;i++)
	{
		DIO_WriteChannel(keypadRows[i],STD_Low);
    1216:	46 01       	movw	r8, r12
    1218:	58 01       	movw	r10, r16
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	f8 01       	movw	r30, r16
    121e:	80 81       	ld	r24, Z
    1220:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
    1224:	c8 e7       	ldi	r28, 0x78	; 120
    1226:	d0 e0       	ldi	r29, 0x00	; 0
    1228:	61 2c       	mov	r6, r1
    122a:	71 2c       	mov	r7, r1
		for (u8 j=0;j<colsCount;j++)
		{
			if (DIO_ReadChannel(keypadCols[j]) == STD_Low)
    122c:	73 01       	movw	r14, r6
    122e:	89 91       	ld	r24, Y+
    1230:	0e 94 57 0b 	call	0x16ae	; 0x16ae <DIO_ReadChannel>
    1234:	81 11       	cpse	r24, r1
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <GetKey+0x6e>
			{
				while(DIO_ReadChannel(keypadCols[j]) == STD_Low);
    1238:	e3 01       	movw	r28, r6
    123a:	c8 58       	subi	r28, 0x88	; 136
    123c:	df 4f       	sbci	r29, 0xFF	; 255
    123e:	88 81       	ld	r24, Y
    1240:	0e 94 57 0b 	call	0x16ae	; 0x16ae <DIO_ReadChannel>
    1244:	88 23       	and	r24, r24
    1246:	d9 f3       	breq	.-10     	; 0x123e <GetKey+0x4c>
				return keypad[i][j];
    1248:	c4 01       	movw	r24, r8
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	88 59       	subi	r24, 0x98	; 152
    1254:	9f 4f       	sbci	r25, 0xFF	; 255
    1256:	fc 01       	movw	r30, r24
    1258:	ee 0d       	add	r30, r14
    125a:	ff 1d       	adc	r31, r15
    125c:	80 81       	ld	r24, Z
    125e:	16 c0       	rjmp	.+44     	; 0x128c <GetKey+0x9a>
    1260:	ff ef       	ldi	r31, 0xFF	; 255
    1262:	6f 1a       	sub	r6, r31
    1264:	7f 0a       	sbc	r7, r31
}
u8 GetKey(void){
	for (u8 i=0;i<rowsCount;i++)
	{
		DIO_WriteChannel(keypadRows[i],STD_Low);
		for (u8 j=0;j<colsCount;j++)
    1266:	84 e0       	ldi	r24, 0x04	; 4
    1268:	68 16       	cp	r6, r24
    126a:	71 04       	cpc	r7, r1
    126c:	f9 f6       	brne	.-66     	; 0x122c <GetKey+0x3a>
    126e:	0f 5f       	subi	r16, 0xFF	; 255
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				while(DIO_ReadChannel(keypadCols[j]) == STD_Low);
				return keypad[i][j];
			}
		}
		DIO_WriteChannel(keypadRows[i],STD_High);
    1272:	61 e0       	ldi	r22, 0x01	; 1
    1274:	f5 01       	movw	r30, r10
    1276:	80 81       	ld	r24, Z
    1278:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
    127c:	ff ef       	ldi	r31, 0xFF	; 255
    127e:	cf 1a       	sub	r12, r31
    1280:	df 0a       	sbc	r13, r31
		DIO_ConfigChannel(keypadRows[j],Output);
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
	}
}
u8 GetKey(void){
	for (u8 i=0;i<rowsCount;i++)
    1282:	84 e0       	ldi	r24, 0x04	; 4
    1284:	c8 16       	cp	r12, r24
    1286:	d1 04       	cpc	r13, r1
    1288:	31 f6       	brne	.-116    	; 0x1216 <GetKey+0x24>
				return keypad[i][j];
			}
		}
		DIO_WriteChannel(keypadRows[i],STD_High);
	}
	return STD_Low;
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	bf 90       	pop	r11
    129e:	af 90       	pop	r10
    12a0:	9f 90       	pop	r9
    12a2:	8f 90       	pop	r8
    12a4:	7f 90       	pop	r7
    12a6:	6f 90       	pop	r6
    12a8:	08 95       	ret

000012aa <LCD_Cmd>:
	LCD_Cmd(0x32);
	LCD_Cmd(0x28);//Set Function 4Bit & 2Line & 5*8
	LCD_Cmd(0x06);//Entry Mode move to right
	LCD_Cmd(0x0C);//Display ON & Cursor ON & Blink
}
void LCD_Cmd(u8 cmd){
    12aa:	cf 93       	push	r28
    12ac:	c8 2f       	mov	r28, r24
	u8 portValue = STD_Low;
	DIO_WriteChannel(LCD_RS,STD_Low);
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	89 e0       	ldi	r24, 0x09	; 9
    12b2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	portValue = DIO_ReadPort(LCD_DataPort);
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (cmd & 0xF0);
    12bc:	8f 70       	andi	r24, 0x0F	; 15
    12be:	9c 2f       	mov	r25, r28
    12c0:	90 7f       	andi	r25, 0xF0	; 240
    12c2:	68 2f       	mov	r22, r24
    12c4:	69 2b       	or	r22, r25
	DIO_WritePort(LCD_DataPort,portValue);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 1e 0c 	call	0x183c	; 0x183c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	8b e0       	ldi	r24, 0x0B	; 11
    12d0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12d4:	8f e8       	ldi	r24, 0x8F	; 143
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <LCD_Cmd+0x2e>
    12dc:	00 c0       	rjmp	.+0      	; 0x12de <LCD_Cmd+0x34>
    12de:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	8b e0       	ldi	r24, 0x0B	; 11
    12e4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12e8:	8f e1       	ldi	r24, 0x1F	; 31
    12ea:	9e e4       	ldi	r25, 0x4E	; 78
    12ec:	01 97       	sbiw	r24, 0x01	; 1
    12ee:	f1 f7       	brne	.-4      	; 0x12ec <LCD_Cmd+0x42>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <LCD_Cmd+0x48>
    12f2:	00 00       	nop
	
	_delay_ms(5);
	
	portValue = DIO_ReadPort(LCD_DataPort);
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (cmd << 4);
    12fa:	8f 70       	andi	r24, 0x0F	; 15
    12fc:	90 e1       	ldi	r25, 0x10	; 16
    12fe:	c9 9f       	mul	r28, r25
    1300:	90 01       	movw	r18, r0
    1302:	11 24       	eor	r1, r1
    1304:	68 2f       	mov	r22, r24
    1306:	62 2b       	or	r22, r18
	DIO_WritePort(LCD_DataPort,portValue);
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	0e 94 1e 0c 	call	0x183c	; 0x183c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	8b e0       	ldi	r24, 0x0B	; 11
    1312:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1316:	8f e8       	ldi	r24, 0x8F	; 143
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <LCD_Cmd+0x70>
    131e:	00 c0       	rjmp	.+0      	; 0x1320 <LCD_Cmd+0x76>
    1320:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	8b e0       	ldi	r24, 0x0B	; 11
    1326:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    132a:	8f e3       	ldi	r24, 0x3F	; 63
    132c:	9f e1       	ldi	r25, 0x1F	; 31
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <LCD_Cmd+0x84>
    1332:	00 c0       	rjmp	.+0      	; 0x1334 <LCD_Cmd+0x8a>
    1334:	00 00       	nop
	_delay_ms(2);
}
    1336:	cf 91       	pop	r28
    1338:	08 95       	ret

0000133a <LCD_Init>:
*  Author: user
*/
#include "LCD.h"

void LCD_Init(void){
	DIO_WriteChannel(LCD_RW,STD_Low);
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	8a e0       	ldi	r24, 0x0A	; 10
    133e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E,STD_High);
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	8b e0       	ldi	r24, 0x0B	; 11
    1346:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
    134a:	2f ef       	ldi	r18, 0xFF	; 255
    134c:	89 ef       	ldi	r24, 0xF9	; 249
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	80 40       	sbci	r24, 0x00	; 0
    1354:	90 40       	sbci	r25, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <LCD_Init+0x16>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <LCD_Init+0x20>
    135a:	00 00       	nop
	_delay_ms(20);
	LCD_Cmd(0x33);
    135c:	83 e3       	ldi	r24, 0x33	; 51
    135e:	0e 94 55 09 	call	0x12aa	; 0x12aa <LCD_Cmd>
	LCD_Cmd(0x32);
    1362:	82 e3       	ldi	r24, 0x32	; 50
    1364:	0e 94 55 09 	call	0x12aa	; 0x12aa <LCD_Cmd>
	LCD_Cmd(0x28);//Set Function 4Bit & 2Line & 5*8
    1368:	88 e2       	ldi	r24, 0x28	; 40
    136a:	0e 94 55 09 	call	0x12aa	; 0x12aa <LCD_Cmd>
	LCD_Cmd(0x06);//Entry Mode move to right
    136e:	86 e0       	ldi	r24, 0x06	; 6
    1370:	0e 94 55 09 	call	0x12aa	; 0x12aa <LCD_Cmd>
	LCD_Cmd(0x0C);//Display ON & Cursor ON & Blink
    1374:	8c e0       	ldi	r24, 0x0C	; 12
    1376:	0e 94 55 09 	call	0x12aa	; 0x12aa <LCD_Cmd>
    137a:	08 95       	ret

0000137c <LCD_Char>:
	DIO_WriteChannel(LCD_E,STD_Low);
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
	_delay_ms(2);
}
void LCD_Char(s8 data){
    137c:	cf 93       	push	r28
    137e:	c8 2f       	mov	r28, r24
	u8 portValue = STD_Low;
	DIO_WriteChannel(LCD_RS,STD_High);
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	89 e0       	ldi	r24, 0x09	; 9
    1384:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	portValue = DIO_ReadPort(LCD_DataPort);
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (data & 0xF0);
    138e:	8f 70       	andi	r24, 0x0F	; 15
    1390:	9c 2f       	mov	r25, r28
    1392:	90 7f       	andi	r25, 0xF0	; 240
    1394:	68 2f       	mov	r22, r24
    1396:	69 2b       	or	r22, r25
	DIO_WritePort(LCD_DataPort,portValue);
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	0e 94 1e 0c 	call	0x183c	; 0x183c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	8b e0       	ldi	r24, 0x0B	; 11
    13a2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13a6:	8f e8       	ldi	r24, 0x8F	; 143
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <LCD_Char+0x2e>
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <LCD_Char+0x34>
    13b0:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    13b2:	61 e0       	ldi	r22, 0x01	; 1
    13b4:	8b e0       	ldi	r24, 0x0B	; 11
    13b6:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ba:	8f e1       	ldi	r24, 0x1F	; 31
    13bc:	9e e4       	ldi	r25, 0x4E	; 78
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <LCD_Char+0x42>
    13c2:	00 c0       	rjmp	.+0      	; 0x13c4 <LCD_Char+0x48>
    13c4:	00 00       	nop
	
	_delay_ms(5);
	
	portValue = DIO_ReadPort(LCD_DataPort);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (data << 4);
    13cc:	8f 70       	andi	r24, 0x0F	; 15
    13ce:	90 e1       	ldi	r25, 0x10	; 16
    13d0:	c9 9f       	mul	r28, r25
    13d2:	90 01       	movw	r18, r0
    13d4:	11 24       	eor	r1, r1
    13d6:	68 2f       	mov	r22, r24
    13d8:	62 2b       	or	r22, r18
	DIO_WritePort(LCD_DataPort,portValue);
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	0e 94 1e 0c 	call	0x183c	; 0x183c <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	8b e0       	ldi	r24, 0x0B	; 11
    13e4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13e8:	8f e8       	ldi	r24, 0x8F	; 143
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <LCD_Char+0x70>
    13f0:	00 c0       	rjmp	.+0      	; 0x13f2 <LCD_Char+0x76>
    13f2:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	8b e0       	ldi	r24, 0x0B	; 11
    13f8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13fc:	8f e3       	ldi	r24, 0x3F	; 63
    13fe:	9f e1       	ldi	r25, 0x1F	; 31
    1400:	01 97       	sbiw	r24, 0x01	; 1
    1402:	f1 f7       	brne	.-4      	; 0x1400 <LCD_Char+0x84>
    1404:	00 c0       	rjmp	.+0      	; 0x1406 <LCD_Char+0x8a>
    1406:	00 00       	nop
	_delay_ms(2);
}
    1408:	cf 91       	pop	r28
    140a:	08 95       	ret

0000140c <LCD_String>:
void LCD_String(s8 * string){
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	fc 01       	movw	r30, r24
	u8 i = 0;
	while (string[i] != '\0')
    1414:	80 81       	ld	r24, Z
    1416:	88 23       	and	r24, r24
    1418:	59 f0       	breq	.+22     	; 0x1430 <LCD_String+0x24>
    141a:	8f 01       	movw	r16, r30
    141c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_Char(string[i]);
    141e:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
		i++;
    1422:	cf 5f       	subi	r28, 0xFF	; 255
	DIO_WriteChannel(LCD_E,STD_High);
	_delay_ms(2);
}
void LCD_String(s8 * string){
	u8 i = 0;
	while (string[i] != '\0')
    1424:	f8 01       	movw	r30, r16
    1426:	ec 0f       	add	r30, r28
    1428:	f1 1d       	adc	r31, r1
    142a:	80 81       	ld	r24, Z
    142c:	81 11       	cpse	r24, r1
    142e:	f7 cf       	rjmp	.-18     	; 0x141e <LCD_String+0x12>
	{
		LCD_Char(string[i]);
		i++;
	}
}
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	08 95       	ret

00001438 <LCD_SetPos>:
void LCD_SetPos(u8 line,u8 pos){
	switch(line){
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	19 f0       	breq	.+6      	; 0x1442 <LCD_SetPos+0xa>
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	39 f0       	breq	.+14     	; 0x144e <LCD_SetPos+0x16>
    1440:	08 95       	ret
		case 1:
		LCD_Cmd((0x80 | (pos & 0x0F)));
    1442:	86 2f       	mov	r24, r22
    1444:	8f 70       	andi	r24, 0x0F	; 15
    1446:	80 68       	ori	r24, 0x80	; 128
    1448:	0e 94 55 09 	call	0x12aa	; 0x12aa <LCD_Cmd>
		break;
    144c:	08 95       	ret
		case 2:
		LCD_Cmd((0xC0 | (pos & 0x0F)));
    144e:	86 2f       	mov	r24, r22
    1450:	8f 70       	andi	r24, 0x0F	; 15
    1452:	80 6c       	ori	r24, 0xC0	; 192
    1454:	0e 94 55 09 	call	0x12aa	; 0x12aa <LCD_Cmd>
    1458:	08 95       	ret

0000145a <LCD_Custome_Char>:
		break;
	}
}
void LCD_Custome_Char(u8 loc,s8 * msg){
    145a:	0f 93       	push	r16
    145c:	1f 93       	push	r17
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
	if (loc<8)
    1462:	88 30       	cpi	r24, 0x08	; 8
    1464:	80 f4       	brcc	.+32     	; 0x1486 <LCD_Custome_Char+0x2c>
    1466:	8b 01       	movw	r16, r22
	{
		LCD_Cmd((0x40+(loc*8)));
    1468:	88 0f       	add	r24, r24
    146a:	88 0f       	add	r24, r24
    146c:	88 0f       	add	r24, r24
    146e:	80 5c       	subi	r24, 0xC0	; 192
    1470:	0e 94 55 09 	call	0x12aa	; 0x12aa <LCD_Cmd>
    1474:	e8 01       	movw	r28, r16
    1476:	08 5f       	subi	r16, 0xF8	; 248
    1478:	1f 4f       	sbci	r17, 0xFF	; 255
		for (u8 i=0;i<8;i++)
		{
			LCD_Char(msg[i]);
    147a:	89 91       	ld	r24, Y+
    147c:	0e 94 be 09 	call	0x137c	; 0x137c <LCD_Char>
}
void LCD_Custome_Char(u8 loc,s8 * msg){
	if (loc<8)
	{
		LCD_Cmd((0x40+(loc*8)));
		for (u8 i=0;i<8;i++)
    1480:	c0 17       	cp	r28, r16
    1482:	d1 07       	cpc	r29, r17
    1484:	d1 f7       	brne	.-12     	; 0x147a <LCD_Custome_Char+0x20>
		{
			LCD_Char(msg[i]);
		}
	}
}
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	08 95       	ret

00001490 <LCD_Clear>:
void LCD_Clear(void)
{
	LCD_Cmd(0x01);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	0e 94 55 09 	call	0x12aa	; 0x12aa <LCD_Cmd>
    1496:	08 95       	ret

00001498 <ServoMotor>:
 * Created: 4/15/2023 1:44:42 PM
 *  Author: user
 */ 
#include "ServoMotor.h"

void ServoMotor(u16 angle){
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	28 97       	sbiw	r28, 0x08	; 8
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	8c 01       	movw	r16, r24
	DIO_ConfigChannel(DIO_ChannelD5,Output);
    14b2:	61 e0       	ldi	r22, 0x01	; 1
    14b4:	8d e1       	ldi	r24, 0x1D	; 29
    14b6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
	u16 ICR_Value = (u16)4999;
	u16 OCR1A_Value = (u16)(((angle-MiniAngle)*((float)(MaxCount-MiniCount)/(MaxAngle-MiniAngle)))+MiniCount-1);
	TIMER1_ICR_SetValue(ICR_Value);
    14ba:	87 e8       	ldi	r24, 0x87	; 135
    14bc:	93 e1       	ldi	r25, 0x13	; 19
    14be:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <TIMER1_ICR_SetValue>
	TIMER1_OCR1A_SetValue(OCR1A_Value);
    14c2:	b8 01       	movw	r22, r16
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 18 10 	call	0x2030	; 0x2030 <__floatunsisf>
    14cc:	2c e1       	ldi	r18, 0x1C	; 28
    14ce:	37 ec       	ldi	r19, 0xC7	; 199
    14d0:	41 eb       	ldi	r20, 0xB1	; 177
    14d2:	5f e3       	ldi	r21, 0x3F	; 63
    14d4:	0e 94 a6 10 	call	0x214c	; 0x214c <__mulsf3>
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	4a e7       	ldi	r20, 0x7A	; 122
    14de:	53 e4       	ldi	r21, 0x43	; 67
    14e0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__addsf3>
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__subsf3>
    14f0:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__fixunssfsi>
    14f4:	cb 01       	movw	r24, r22
    14f6:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <TIMER1_OCR1A_SetValue>
	TIMER1_InitTypes options = {PWM_Fast,Clock_64,COM1A_Non_Inverting_PWM,COM1B_No_PWM,OC1AInt_Disable,OC1BInt_Disable,ICInt_Disable,TOVInt_Disable};
    14fa:	88 e0       	ldi	r24, 0x08	; 8
    14fc:	e0 ec       	ldi	r30, 0xC0	; 192
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	de 01       	movw	r26, r28
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	01 90       	ld	r0, Z+
    1506:	0d 92       	st	X+, r0
    1508:	8a 95       	dec	r24
    150a:	e1 f7       	brne	.-8      	; 0x1504 <ServoMotor+0x6c>
	TIMER1_Init(&options);
    150c:	ce 01       	movw	r24, r28
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <TIMER1_Init>
    1514:	28 96       	adiw	r28, 0x08	; 8
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	08 95       	ret

0000152a <main>:
#include "EEPROM.h"
#include "APP.h"


int main(void)
{
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	2c 97       	sbiw	r28, 0x0c	; 12
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
	SPI_ConfigTypes options = {Master,MSB,SPIClock_64,DoupleSpeedDisable}; //SPI Config to master
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	1a 82       	std	Y+2, r1	; 0x02
    1544:	82 e0       	ldi	r24, 0x02	; 2
    1546:	8b 83       	std	Y+3, r24	; 0x03
    1548:	1c 82       	std	Y+4, r1	; 0x04
	DIO_Init(); //Initialize DIO with MASTER MCU
    154a:	0e 94 2e 0c 	call	0x185c	; 0x185c <DIO_Init>
	LCD_Init(); //Initialize LCD with MASTER MCU
    154e:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_Init>
	Keypad_Init(); //Initialize keypad with MASTER MCU
    1552:	0e 94 c2 08 	call	0x1184	; 0x1184 <Keypad_Init>
	TWI_Init(0x66); //Setting Master MCU address "I2C COMM."
    1556:	86 e6       	ldi	r24, 0x66	; 102
    1558:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <TWI_Init>
	SPI_Init(&options); //Initialize Master SPI
    155c:	ce 01       	movw	r24, r28
    155e:	01 96       	adiw	r24, 0x01	; 1
    1560:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <SPI_Init>
	UART_Config uartconf = {BaudRate_9600,DoupleSpeedDisable,CharacterSize_8Bits,Stop_1Bit,Parity_Disable,TX_Enable,RX_Enable}; //Configure UART
    1564:	88 e0       	ldi	r24, 0x08	; 8
    1566:	e8 ec       	ldi	r30, 0xC8	; 200
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	de 01       	movw	r26, r28
    156c:	15 96       	adiw	r26, 0x05	; 5
    156e:	01 90       	ld	r0, Z+
    1570:	0d 92       	st	X+, r0
    1572:	8a 95       	dec	r24
    1574:	e1 f7       	brne	.-8      	; 0x156e <main+0x44>
	Bluetooth_Init(&uartconf); //Initialize bluetooth module
    1576:	ce 01       	movw	r24, r28
    1578:	05 96       	adiw	r24, 0x05	; 5
    157a:	0e 94 67 08 	call	0x10ce	; 0x10ce <Bluetooth_Init>
	DIO_ConfigChannel(DIO_ChannelD0,Input); //Make RX pin input for receiving 
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	88 e1       	ldi	r24, 0x18	; 24
    1582:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
    1586:	2f ef       	ldi	r18, 0xFF	; 255
    1588:	81 ee       	ldi	r24, 0xE1	; 225
    158a:	94 e0       	ldi	r25, 0x04	; 4
    158c:	21 50       	subi	r18, 0x01	; 1
    158e:	80 40       	sbci	r24, 0x00	; 0
    1590:	90 40       	sbci	r25, 0x00	; 0
    1592:	e1 f7       	brne	.-8      	; 0x158c <main+0x62>
    1594:	00 c0       	rjmp	.+0      	; 0x1596 <main+0x6c>
    1596:	00 00       	nop
	_delay_ms(100);
	
	ALARM(); //if alarm not set will proceed to menu1
    1598:	0e 94 ae 00 	call	0x15c	; 0x15c <ALARM>
	DoorCheck();
    159c:	0e 94 cb 00 	call	0x196	; 0x196 <DoorCheck>
	
	while (1)
	{
		MainMenu(); //Main menu to control Home
		admin:
		AdminMenu();
    15a0:	0e 94 df 00 	call	0x1be	; 0x1be <AdminMenu>
	Menu1(); //if passed menu1 will proceed to menu2
	Menu2(); //if passed menu2 will proceed to Main Menu
	
	while (1)
	{
		MainMenu(); //Main menu to control Home
    15a4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <MainMenu>
    15a8:	fb cf       	rjmp	.-10     	; 0x15a0 <main+0x76>

000015aa <DIO_WriteChannel>:
		break;
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
		break;
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
    15aa:	98 2f       	mov	r25, r24
    15ac:	97 70       	andi	r25, 0x07	; 7
    15ae:	86 95       	lsr	r24
    15b0:	86 95       	lsr	r24
    15b2:	86 95       	lsr	r24
    15b4:	81 30       	cpi	r24, 0x01	; 1
    15b6:	21 f1       	breq	.+72     	; 0x1600 <DIO_WriteChannel+0x56>
    15b8:	30 f0       	brcs	.+12     	; 0x15c6 <DIO_WriteChannel+0x1c>
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	f1 f1       	breq	.+124    	; 0x163a <DIO_WriteChannel+0x90>
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <DIO_WriteChannel+0x1a>
    15c2:	58 c0       	rjmp	.+176    	; 0x1674 <DIO_WriteChannel+0xca>
    15c4:	08 95       	ret
    15c6:	61 30       	cpi	r22, 0x01	; 1
    15c8:	69 f4       	brne	.+26     	; 0x15e4 <DIO_WriteChannel+0x3a>
    15ca:	4b b3       	in	r20, 0x1b	; 27
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	b9 01       	movw	r22, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <DIO_WriteChannel+0x2e>
    15d4:	66 0f       	add	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	9a 95       	dec	r25
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <DIO_WriteChannel+0x2a>
    15dc:	cb 01       	movw	r24, r22
    15de:	84 2b       	or	r24, r20
    15e0:	8b bb       	out	0x1b, r24	; 27
    15e2:	08 95       	ret
    15e4:	4b b3       	in	r20, 0x1b	; 27
    15e6:	21 e0       	ldi	r18, 0x01	; 1
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	b9 01       	movw	r22, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_WriteChannel+0x48>
    15ee:	66 0f       	add	r22, r22
    15f0:	77 1f       	adc	r23, r23
    15f2:	9a 95       	dec	r25
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_WriteChannel+0x44>
    15f6:	cb 01       	movw	r24, r22
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8b bb       	out	0x1b, r24	; 27
    15fe:	08 95       	ret
    1600:	61 30       	cpi	r22, 0x01	; 1
    1602:	69 f4       	brne	.+26     	; 0x161e <DIO_WriteChannel+0x74>
    1604:	48 b3       	in	r20, 0x18	; 24
    1606:	21 e0       	ldi	r18, 0x01	; 1
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	b9 01       	movw	r22, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_WriteChannel+0x68>
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	9a 95       	dec	r25
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_WriteChannel+0x64>
    1616:	cb 01       	movw	r24, r22
    1618:	84 2b       	or	r24, r20
    161a:	88 bb       	out	0x18, r24	; 24
    161c:	08 95       	ret
    161e:	48 b3       	in	r20, 0x18	; 24
    1620:	21 e0       	ldi	r18, 0x01	; 1
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	b9 01       	movw	r22, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <DIO_WriteChannel+0x82>
    1628:	66 0f       	add	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	9a 95       	dec	r25
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <DIO_WriteChannel+0x7e>
    1630:	cb 01       	movw	r24, r22
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	88 bb       	out	0x18, r24	; 24
    1638:	08 95       	ret
    163a:	61 30       	cpi	r22, 0x01	; 1
    163c:	69 f4       	brne	.+26     	; 0x1658 <DIO_WriteChannel+0xae>
    163e:	45 b3       	in	r20, 0x15	; 21
    1640:	21 e0       	ldi	r18, 0x01	; 1
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	b9 01       	movw	r22, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_WriteChannel+0xa2>
    1648:	66 0f       	add	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	9a 95       	dec	r25
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <DIO_WriteChannel+0x9e>
    1650:	cb 01       	movw	r24, r22
    1652:	84 2b       	or	r24, r20
    1654:	85 bb       	out	0x15, r24	; 21
    1656:	08 95       	ret
    1658:	45 b3       	in	r20, 0x15	; 21
    165a:	21 e0       	ldi	r18, 0x01	; 1
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	b9 01       	movw	r22, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_WriteChannel+0xbc>
    1662:	66 0f       	add	r22, r22
    1664:	77 1f       	adc	r23, r23
    1666:	9a 95       	dec	r25
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_WriteChannel+0xb8>
    166a:	cb 01       	movw	r24, r22
    166c:	80 95       	com	r24
    166e:	84 23       	and	r24, r20
    1670:	85 bb       	out	0x15, r24	; 21
    1672:	08 95       	ret
    1674:	61 30       	cpi	r22, 0x01	; 1
    1676:	69 f4       	brne	.+26     	; 0x1692 <DIO_WriteChannel+0xe8>
    1678:	42 b3       	in	r20, 0x12	; 18
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	b9 01       	movw	r22, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <DIO_WriteChannel+0xdc>
    1682:	66 0f       	add	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	9a 95       	dec	r25
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <DIO_WriteChannel+0xd8>
    168a:	cb 01       	movw	r24, r22
    168c:	84 2b       	or	r24, r20
    168e:	82 bb       	out	0x12, r24	; 18
    1690:	08 95       	ret
    1692:	42 b3       	in	r20, 0x12	; 18
    1694:	21 e0       	ldi	r18, 0x01	; 1
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	b9 01       	movw	r22, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <DIO_WriteChannel+0xf6>
    169c:	66 0f       	add	r22, r22
    169e:	77 1f       	adc	r23, r23
    16a0:	9a 95       	dec	r25
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <DIO_WriteChannel+0xf2>
    16a4:	cb 01       	movw	r24, r22
    16a6:	80 95       	com	r24
    16a8:	84 23       	and	r24, r20
    16aa:	82 bb       	out	0x12, r24	; 18
    16ac:	08 95       	ret

000016ae <DIO_ReadChannel>:
    16ae:	28 2f       	mov	r18, r24
    16b0:	27 70       	andi	r18, 0x07	; 7
    16b2:	86 95       	lsr	r24
    16b4:	86 95       	lsr	r24
    16b6:	86 95       	lsr	r24
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	79 f0       	breq	.+30     	; 0x16da <DIO_ReadChannel+0x2c>
    16bc:	28 f0       	brcs	.+10     	; 0x16c8 <DIO_ReadChannel+0x1a>
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	a9 f0       	breq	.+42     	; 0x16ec <DIO_ReadChannel+0x3e>
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	e1 f0       	breq	.+56     	; 0x16fe <DIO_ReadChannel+0x50>
    16c6:	24 c0       	rjmp	.+72     	; 0x1710 <DIO_ReadChannel+0x62>
    16c8:	89 b3       	in	r24, 0x19	; 25
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_ReadChannel+0x24>
    16ce:	95 95       	asr	r25
    16d0:	87 95       	ror	r24
    16d2:	2a 95       	dec	r18
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DIO_ReadChannel+0x20>
    16d6:	81 70       	andi	r24, 0x01	; 1
    16d8:	08 95       	ret
    16da:	86 b3       	in	r24, 0x16	; 22
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_ReadChannel+0x36>
    16e0:	95 95       	asr	r25
    16e2:	87 95       	ror	r24
    16e4:	2a 95       	dec	r18
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_ReadChannel+0x32>
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	08 95       	ret
    16ec:	83 b3       	in	r24, 0x13	; 19
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_ReadChannel+0x48>
    16f2:	95 95       	asr	r25
    16f4:	87 95       	ror	r24
    16f6:	2a 95       	dec	r18
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_ReadChannel+0x44>
    16fa:	81 70       	andi	r24, 0x01	; 1
    16fc:	08 95       	ret
    16fe:	80 b3       	in	r24, 0x10	; 16
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_ReadChannel+0x5a>
    1704:	95 95       	asr	r25
    1706:	87 95       	ror	r24
    1708:	2a 95       	dec	r18
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_ReadChannel+0x56>
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	08 95       	ret
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	08 95       	ret

00001714 <DIO_ConfigChannel>:
		break;
	}
}
void DIO_ConfigChannel(DIO_ChannelTypes channelId,DIO_DataDir direction){
	DIO_PortTypes Portx = channelId/8;
	DIO_ChannelTypes BitNo = channelId%8;
    1714:	98 2f       	mov	r25, r24
    1716:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
    1718:	86 95       	lsr	r24
    171a:	86 95       	lsr	r24
    171c:	86 95       	lsr	r24
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	21 f1       	breq	.+72     	; 0x176a <DIO_ConfigChannel+0x56>
    1722:	30 f0       	brcs	.+12     	; 0x1730 <DIO_ConfigChannel+0x1c>
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	f1 f1       	breq	.+124    	; 0x17a4 <DIO_ConfigChannel+0x90>
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	09 f4       	brne	.+2      	; 0x172e <DIO_ConfigChannel+0x1a>
    172c:	58 c0       	rjmp	.+176    	; 0x17de <DIO_ConfigChannel+0xca>
    172e:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
    1730:	61 30       	cpi	r22, 0x01	; 1
    1732:	69 f4       	brne	.+26     	; 0x174e <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
    1734:	4a b3       	in	r20, 0x1a	; 26
    1736:	21 e0       	ldi	r18, 0x01	; 1
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	b9 01       	movw	r22, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_ConfigChannel+0x2e>
    173e:	66 0f       	add	r22, r22
    1740:	77 1f       	adc	r23, r23
    1742:	9a 95       	dec	r25
    1744:	e2 f7       	brpl	.-8      	; 0x173e <DIO_ConfigChannel+0x2a>
    1746:	cb 01       	movw	r24, r22
    1748:	84 2b       	or	r24, r20
    174a:	8a bb       	out	0x1a, r24	; 26
    174c:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
    174e:	4a b3       	in	r20, 0x1a	; 26
    1750:	21 e0       	ldi	r18, 0x01	; 1
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	b9 01       	movw	r22, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <DIO_ConfigChannel+0x48>
    1758:	66 0f       	add	r22, r22
    175a:	77 1f       	adc	r23, r23
    175c:	9a 95       	dec	r25
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <DIO_ConfigChannel+0x44>
    1760:	cb 01       	movw	r24, r22
    1762:	80 95       	com	r24
    1764:	84 23       	and	r24, r20
    1766:	8a bb       	out	0x1a, r24	; 26
    1768:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (direction == Output)
    176a:	61 30       	cpi	r22, 0x01	; 1
    176c:	69 f4       	brne	.+26     	; 0x1788 <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
    176e:	47 b3       	in	r20, 0x17	; 23
    1770:	21 e0       	ldi	r18, 0x01	; 1
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	b9 01       	movw	r22, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_ConfigChannel+0x68>
    1778:	66 0f       	add	r22, r22
    177a:	77 1f       	adc	r23, r23
    177c:	9a 95       	dec	r25
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_ConfigChannel+0x64>
    1780:	cb 01       	movw	r24, r22
    1782:	84 2b       	or	r24, r20
    1784:	87 bb       	out	0x17, r24	; 23
    1786:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
    1788:	47 b3       	in	r20, 0x17	; 23
    178a:	21 e0       	ldi	r18, 0x01	; 1
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	b9 01       	movw	r22, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_ConfigChannel+0x82>
    1792:	66 0f       	add	r22, r22
    1794:	77 1f       	adc	r23, r23
    1796:	9a 95       	dec	r25
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_ConfigChannel+0x7e>
    179a:	cb 01       	movw	r24, r22
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	87 bb       	out	0x17, r24	; 23
    17a2:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (direction == Output)
    17a4:	61 30       	cpi	r22, 0x01	; 1
    17a6:	69 f4       	brne	.+26     	; 0x17c2 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
    17a8:	44 b3       	in	r20, 0x14	; 20
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	b9 01       	movw	r22, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <DIO_ConfigChannel+0xa2>
    17b2:	66 0f       	add	r22, r22
    17b4:	77 1f       	adc	r23, r23
    17b6:	9a 95       	dec	r25
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <DIO_ConfigChannel+0x9e>
    17ba:	cb 01       	movw	r24, r22
    17bc:	84 2b       	or	r24, r20
    17be:	84 bb       	out	0x14, r24	; 20
    17c0:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
    17c2:	44 b3       	in	r20, 0x14	; 20
    17c4:	21 e0       	ldi	r18, 0x01	; 1
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	b9 01       	movw	r22, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <DIO_ConfigChannel+0xbc>
    17cc:	66 0f       	add	r22, r22
    17ce:	77 1f       	adc	r23, r23
    17d0:	9a 95       	dec	r25
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <DIO_ConfigChannel+0xb8>
    17d4:	cb 01       	movw	r24, r22
    17d6:	80 95       	com	r24
    17d8:	84 23       	and	r24, r20
    17da:	84 bb       	out	0x14, r24	; 20
    17dc:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (direction == Output)
    17de:	61 30       	cpi	r22, 0x01	; 1
    17e0:	69 f4       	brne	.+26     	; 0x17fc <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
    17e2:	41 b3       	in	r20, 0x11	; 17
    17e4:	21 e0       	ldi	r18, 0x01	; 1
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	b9 01       	movw	r22, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_ConfigChannel+0xdc>
    17ec:	66 0f       	add	r22, r22
    17ee:	77 1f       	adc	r23, r23
    17f0:	9a 95       	dec	r25
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_ConfigChannel+0xd8>
    17f4:	cb 01       	movw	r24, r22
    17f6:	84 2b       	or	r24, r20
    17f8:	81 bb       	out	0x11, r24	; 17
    17fa:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
    17fc:	41 b3       	in	r20, 0x11	; 17
    17fe:	21 e0       	ldi	r18, 0x01	; 1
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	b9 01       	movw	r22, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_ConfigChannel+0xf6>
    1806:	66 0f       	add	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	9a 95       	dec	r25
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_ConfigChannel+0xf2>
    180e:	cb 01       	movw	r24, r22
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	81 bb       	out	0x11, r24	; 17
    1816:	08 95       	ret

00001818 <DIO_ReadPort>:
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
	switch(portId){
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	41 f0       	breq	.+16     	; 0x182c <DIO_ReadPort+0x14>
    181c:	28 f0       	brcs	.+10     	; 0x1828 <DIO_ReadPort+0x10>
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	39 f0       	breq	.+14     	; 0x1830 <DIO_ReadPort+0x18>
    1822:	83 30       	cpi	r24, 0x03	; 3
    1824:	39 f0       	breq	.+14     	; 0x1834 <DIO_ReadPort+0x1c>
    1826:	08 c0       	rjmp	.+16     	; 0x1838 <DIO_ReadPort+0x20>
		case DIO_PortA:
		portValue = PORTA_Reg;
    1828:	8b b3       	in	r24, 0x1b	; 27
		break;
    182a:	08 95       	ret
		case DIO_PortB:
		portValue = PORTB_Reg;
    182c:	88 b3       	in	r24, 0x18	; 24
		break;
    182e:	08 95       	ret
		case DIO_PortC:
		portValue = PORTC_Reg;
    1830:	85 b3       	in	r24, 0x15	; 21
		break;
    1832:	08 95       	ret
		case DIO_PortD:
		portValue = PORTD_Reg;
    1834:	82 b3       	in	r24, 0x12	; 18
		break;
    1836:	08 95       	ret
		}
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
    1838:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		portValue = PORTD_Reg;
		break;
	}
	return portValue;
}
    183a:	08 95       	ret

0000183c <DIO_WritePort>:
void DIO_WritePort(DIO_PortTypes portId,u8 portValue){
	switch(portId){
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	41 f0       	breq	.+16     	; 0x1850 <DIO_WritePort+0x14>
    1840:	28 f0       	brcs	.+10     	; 0x184c <DIO_WritePort+0x10>
    1842:	82 30       	cpi	r24, 0x02	; 2
    1844:	39 f0       	breq	.+14     	; 0x1854 <DIO_WritePort+0x18>
    1846:	83 30       	cpi	r24, 0x03	; 3
    1848:	39 f0       	breq	.+14     	; 0x1858 <DIO_WritePort+0x1c>
    184a:	08 95       	ret
		case DIO_PortA:
		PORTA_Reg = portValue;
    184c:	6b bb       	out	0x1b, r22	; 27
		break;
    184e:	08 95       	ret
		case DIO_PortB:
		PORTB_Reg = portValue;
    1850:	68 bb       	out	0x18, r22	; 24
		break;
    1852:	08 95       	ret
		case DIO_PortC:
		PORTC_Reg = portValue;
    1854:	65 bb       	out	0x15, r22	; 21
		break;
    1856:	08 95       	ret
		case DIO_PortD:
		PORTD_Reg = portValue;
    1858:	62 bb       	out	0x12, r22	; 18
    185a:	08 95       	ret

0000185c <DIO_Init>:
	{Output,STD_High},
	{Output,STD_High},
	{Output,STD_High}
};

void DIO_Init(){
    185c:	e0 e8       	ldi	r30, 0x80	; 128
    185e:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
    1860:	80 e0       	ldi	r24, 0x00	; 0
			{
				SetBit(DDRB_Reg,BitNo);
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	50 e0       	ldi	r21, 0x00	; 0
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
	{
		Portx = count/8;
		BitNo = count%8;
    1866:	28 2f       	mov	r18, r24
    1868:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
    186a:	98 2f       	mov	r25, r24
    186c:	96 95       	lsr	r25
    186e:	96 95       	lsr	r25
    1870:	96 95       	lsr	r25
    1872:	91 30       	cpi	r25, 0x01	; 1
    1874:	09 f1       	breq	.+66     	; 0x18b8 <DIO_Init+0x5c>
    1876:	30 f0       	brcs	.+12     	; 0x1884 <DIO_Init+0x28>
    1878:	92 30       	cpi	r25, 0x02	; 2
    187a:	c1 f1       	breq	.+112    	; 0x18ec <DIO_Init+0x90>
    187c:	93 30       	cpi	r25, 0x03	; 3
    187e:	09 f4       	brne	.+2      	; 0x1882 <DIO_Init+0x26>
    1880:	4f c0       	rjmp	.+158    	; 0x1920 <DIO_Init+0xc4>
    1882:	67 c0       	rjmp	.+206    	; 0x1952 <DIO_Init+0xf6>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
    1884:	90 81       	ld	r25, Z
    1886:	91 30       	cpi	r25, 0x01	; 1
    1888:	59 f4       	brne	.+22     	; 0x18a0 <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg,BitNo);
    188a:	9a b3       	in	r25, 0x1a	; 26
    188c:	ba 01       	movw	r22, r20
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <DIO_Init+0x38>
    1890:	66 0f       	add	r22, r22
    1892:	77 1f       	adc	r23, r23
    1894:	2a 95       	dec	r18
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <DIO_Init+0x34>
    1898:	9b 01       	movw	r18, r22
    189a:	29 2b       	or	r18, r25
    189c:	2a bb       	out	0x1a, r18	; 26
    189e:	59 c0       	rjmp	.+178    	; 0x1952 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
    18a0:	3a b3       	in	r19, 0x1a	; 26
    18a2:	ba 01       	movw	r22, r20
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <DIO_Init+0x4e>
    18a6:	66 0f       	add	r22, r22
    18a8:	77 1f       	adc	r23, r23
    18aa:	2a 95       	dec	r18
    18ac:	e2 f7       	brpl	.-8      	; 0x18a6 <DIO_Init+0x4a>
    18ae:	96 2f       	mov	r25, r22
    18b0:	90 95       	com	r25
    18b2:	93 23       	and	r25, r19
    18b4:	9a bb       	out	0x1a, r25	; 26
    18b6:	4d c0       	rjmp	.+154    	; 0x1952 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
    18b8:	90 81       	ld	r25, Z
    18ba:	91 30       	cpi	r25, 0x01	; 1
    18bc:	59 f4       	brne	.+22     	; 0x18d4 <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg,BitNo);
    18be:	97 b3       	in	r25, 0x17	; 23
    18c0:	ba 01       	movw	r22, r20
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_Init+0x6c>
    18c4:	66 0f       	add	r22, r22
    18c6:	77 1f       	adc	r23, r23
    18c8:	2a 95       	dec	r18
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <DIO_Init+0x68>
    18cc:	9b 01       	movw	r18, r22
    18ce:	29 2b       	or	r18, r25
    18d0:	27 bb       	out	0x17, r18	; 23
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
    18d4:	37 b3       	in	r19, 0x17	; 23
    18d6:	ba 01       	movw	r22, r20
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <DIO_Init+0x82>
    18da:	66 0f       	add	r22, r22
    18dc:	77 1f       	adc	r23, r23
    18de:	2a 95       	dec	r18
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <DIO_Init+0x7e>
    18e2:	96 2f       	mov	r25, r22
    18e4:	90 95       	com	r25
    18e6:	93 23       	and	r25, r19
    18e8:	97 bb       	out	0x17, r25	; 23
    18ea:	33 c0       	rjmp	.+102    	; 0x1952 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
    18ec:	90 81       	ld	r25, Z
    18ee:	91 30       	cpi	r25, 0x01	; 1
    18f0:	59 f4       	brne	.+22     	; 0x1908 <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg,BitNo);
    18f2:	94 b3       	in	r25, 0x14	; 20
    18f4:	ba 01       	movw	r22, r20
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_Init+0xa0>
    18f8:	66 0f       	add	r22, r22
    18fa:	77 1f       	adc	r23, r23
    18fc:	2a 95       	dec	r18
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_Init+0x9c>
    1900:	9b 01       	movw	r18, r22
    1902:	29 2b       	or	r18, r25
    1904:	24 bb       	out	0x14, r18	; 20
    1906:	25 c0       	rjmp	.+74     	; 0x1952 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
    1908:	34 b3       	in	r19, 0x14	; 20
    190a:	ba 01       	movw	r22, r20
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_Init+0xb6>
    190e:	66 0f       	add	r22, r22
    1910:	77 1f       	adc	r23, r23
    1912:	2a 95       	dec	r18
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_Init+0xb2>
    1916:	96 2f       	mov	r25, r22
    1918:	90 95       	com	r25
    191a:	93 23       	and	r25, r19
    191c:	94 bb       	out	0x14, r25	; 20
    191e:	19 c0       	rjmp	.+50     	; 0x1952 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
    1920:	90 81       	ld	r25, Z
    1922:	91 30       	cpi	r25, 0x01	; 1
    1924:	59 f4       	brne	.+22     	; 0x193c <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg,BitNo);
    1926:	91 b3       	in	r25, 0x11	; 17
    1928:	ba 01       	movw	r22, r20
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_Init+0xd4>
    192c:	66 0f       	add	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	2a 95       	dec	r18
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_Init+0xd0>
    1934:	9b 01       	movw	r18, r22
    1936:	29 2b       	or	r18, r25
    1938:	21 bb       	out	0x11, r18	; 17
    193a:	0b c0       	rjmp	.+22     	; 0x1952 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
    193c:	31 b3       	in	r19, 0x11	; 17
    193e:	ba 01       	movw	r22, r20
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_Init+0xea>
    1942:	66 0f       	add	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	2a 95       	dec	r18
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_Init+0xe6>
    194a:	96 2f       	mov	r25, r22
    194c:	90 95       	com	r25
    194e:	93 23       	and	r25, r19
    1950:	91 bb       	out	0x11, r25	; 17

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
    1952:	8f 5f       	subi	r24, 0xFF	; 255
    1954:	32 96       	adiw	r30, 0x02	; 2
    1956:	80 32       	cpi	r24, 0x20	; 32
    1958:	09 f0       	breq	.+2      	; 0x195c <DIO_Init+0x100>
    195a:	85 cf       	rjmp	.-246    	; 0x1866 <DIO_Init+0xa>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
    195c:	08 95       	ret

0000195e <__vector_1>:
		break;
	}
}


ISR(INT0_vect){
    195e:	1f 92       	push	r1
    1960:	0f 92       	push	r0
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	0f 92       	push	r0
    1966:	11 24       	eor	r1, r1
    1968:	2f 93       	push	r18
    196a:	3f 93       	push	r19
    196c:	4f 93       	push	r20
    196e:	5f 93       	push	r21
    1970:	6f 93       	push	r22
    1972:	7f 93       	push	r23
    1974:	8f 93       	push	r24
    1976:	9f 93       	push	r25
    1978:	af 93       	push	r26
    197a:	bf 93       	push	r27
    197c:	ef 93       	push	r30
    197e:	ff 93       	push	r31
	ExtInt0FunPtr();
    1980:	e0 91 c8 05 	lds	r30, 0x05C8	; 0x8005c8 <ExtInt0FunPtr>
    1984:	f0 91 c9 05 	lds	r31, 0x05C9	; 0x8005c9 <ExtInt0FunPtr+0x1>
    1988:	09 95       	icall
}
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	bf 91       	pop	r27
    1990:	af 91       	pop	r26
    1992:	9f 91       	pop	r25
    1994:	8f 91       	pop	r24
    1996:	7f 91       	pop	r23
    1998:	6f 91       	pop	r22
    199a:	5f 91       	pop	r21
    199c:	4f 91       	pop	r20
    199e:	3f 91       	pop	r19
    19a0:	2f 91       	pop	r18
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti

000019ac <__vector_2>:

ISR(INT1_vect){
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	2f 93       	push	r18
    19b8:	3f 93       	push	r19
    19ba:	4f 93       	push	r20
    19bc:	5f 93       	push	r21
    19be:	6f 93       	push	r22
    19c0:	7f 93       	push	r23
    19c2:	8f 93       	push	r24
    19c4:	9f 93       	push	r25
    19c6:	af 93       	push	r26
    19c8:	bf 93       	push	r27
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
	ExtInt1FunPtr();
    19ce:	e0 91 c6 05 	lds	r30, 0x05C6	; 0x8005c6 <ExtInt1FunPtr>
    19d2:	f0 91 c7 05 	lds	r31, 0x05C7	; 0x8005c7 <ExtInt1FunPtr+0x1>
    19d6:	09 95       	icall
}
    19d8:	ff 91       	pop	r31
    19da:	ef 91       	pop	r30
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	7f 91       	pop	r23
    19e6:	6f 91       	pop	r22
    19e8:	5f 91       	pop	r21
    19ea:	4f 91       	pop	r20
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	0f 90       	pop	r0
    19f6:	1f 90       	pop	r1
    19f8:	18 95       	reti

000019fa <__vector_3>:

ISR(INT2_vect){
    19fa:	1f 92       	push	r1
    19fc:	0f 92       	push	r0
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	0f 92       	push	r0
    1a02:	11 24       	eor	r1, r1
    1a04:	2f 93       	push	r18
    1a06:	3f 93       	push	r19
    1a08:	4f 93       	push	r20
    1a0a:	5f 93       	push	r21
    1a0c:	6f 93       	push	r22
    1a0e:	7f 93       	push	r23
    1a10:	8f 93       	push	r24
    1a12:	9f 93       	push	r25
    1a14:	af 93       	push	r26
    1a16:	bf 93       	push	r27
    1a18:	ef 93       	push	r30
    1a1a:	ff 93       	push	r31
	ExtInt2FunPtr();
    1a1c:	e0 91 c4 05 	lds	r30, 0x05C4	; 0x8005c4 <__data_end>
    1a20:	f0 91 c5 05 	lds	r31, 0x05C5	; 0x8005c5 <__data_end+0x1>
    1a24:	09 95       	icall
    1a26:	ff 91       	pop	r31
    1a28:	ef 91       	pop	r30
    1a2a:	bf 91       	pop	r27
    1a2c:	af 91       	pop	r26
    1a2e:	9f 91       	pop	r25
    1a30:	8f 91       	pop	r24
    1a32:	7f 91       	pop	r23
    1a34:	6f 91       	pop	r22
    1a36:	5f 91       	pop	r21
    1a38:	4f 91       	pop	r20
    1a3a:	3f 91       	pop	r19
    1a3c:	2f 91       	pop	r18
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	0f 90       	pop	r0
    1a44:	1f 90       	pop	r1
    1a46:	18 95       	reti

00001a48 <SPI_Init>:
*  Author: user
*/
#include "SPI.h"


void SPI_Init(SPI_ConfigTypes * options){
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	ec 01       	movw	r28, r24
	switch(options->stateMode){
    1a4e:	88 81       	ld	r24, Y
    1a50:	88 23       	and	r24, r24
    1a52:	a9 f0       	breq	.+42     	; 0x1a7e <SPI_Init+0x36>
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	29 f5       	brne	.+74     	; 0x1aa2 <SPI_Init+0x5a>
		case Master:
		DIO_ConfigChannel(SPI_SSPin,Output);
    1a58:	61 e0       	ldi	r22, 0x01	; 1
    1a5a:	8c e0       	ldi	r24, 0x0C	; 12
    1a5c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Output);
    1a60:	61 e0       	ldi	r22, 0x01	; 1
    1a62:	8d e0       	ldi	r24, 0x0D	; 13
    1a64:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Input);
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	8e e0       	ldi	r24, 0x0E	; 14
    1a6c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Output);
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	8f e0       	ldi	r24, 0x0F	; 15
    1a74:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 1;
    1a78:	6c 9a       	sbi	0x0d, 4	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
    1a7a:	6e 9a       	sbi	0x0d, 6	; 13
		break;
    1a7c:	12 c0       	rjmp	.+36     	; 0x1aa2 <SPI_Init+0x5a>
		case Slave:
		DIO_ConfigChannel(SPI_SSPin,Input);
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	8c e0       	ldi	r24, 0x0C	; 12
    1a82:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Input);
    1a86:	60 e0       	ldi	r22, 0x00	; 0
    1a88:	8d e0       	ldi	r24, 0x0D	; 13
    1a8a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Output);
    1a8e:	61 e0       	ldi	r22, 0x01	; 1
    1a90:	8e e0       	ldi	r24, 0x0E	; 14
    1a92:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Input);
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	8f e0       	ldi	r24, 0x0F	; 15
    1a9a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 0;
    1a9e:	6c 98       	cbi	0x0d, 4	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
    1aa0:	6e 9a       	sbi	0x0d, 6	; 13
		break;
	}
	SPI->SPCR_Reg.AllRegister |= (options->dataOrderMode<<5);
    1aa2:	2d b1       	in	r18, 0x0d	; 13
    1aa4:	99 81       	ldd	r25, Y+1	; 0x01
    1aa6:	30 e2       	ldi	r19, 0x20	; 32
    1aa8:	93 9f       	mul	r25, r19
    1aaa:	c0 01       	movw	r24, r0
    1aac:	11 24       	eor	r1, r1
    1aae:	82 2b       	or	r24, r18
    1ab0:	8d b9       	out	0x0d, r24	; 13
	if (options->doubleSpeedMode == DoupleSpeedEnable)
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	31 f4       	brne	.+12     	; 0x1ac4 <SPI_Init+0x7c>
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 1;
    1ab8:	70 9a       	sbi	0x0e, 0	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
    1aba:	9d b1       	in	r25, 0x0d	; 13
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	89 2b       	or	r24, r25
    1ac0:	8d b9       	out	0x0d, r24	; 13
    1ac2:	05 c0       	rjmp	.+10     	; 0x1ace <SPI_Init+0x86>
	}
	else
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 0;
    1ac4:	70 98       	cbi	0x0e, 0	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
    1ac6:	9d b1       	in	r25, 0x0d	; 13
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	89 2b       	or	r24, r25
    1acc:	8d b9       	out	0x0d, r24	; 13
	}
}
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <SPI_TxRx>:
u8 SPI_TxRx(u8 data){
	SPI->SPDR_Reg = data;
    1ad4:	8f b9       	out	0x0f, r24	; 15
	while(SPI->SPSR_Reg.Bits.SPIF_Bit == 0);
    1ad6:	77 9b       	sbis	0x0e, 7	; 14
    1ad8:	fe cf       	rjmp	.-4      	; 0x1ad6 <SPI_TxRx+0x2>
	return SPI->SPDR_Reg;
    1ada:	8f b1       	in	r24, 0x0f	; 15
}
    1adc:	08 95       	ret

00001ade <TIMER1_Init>:
}
void TIMER1_OCR1A_SetValue(u16 value){
	TIMER1_OCR1A_Reg = value;
}
void TIMER1_OCR1B_SetValue(u16 value){
	TIMER1_OCR1B_Reg = value;
    1ade:	fc 01       	movw	r30, r24
    1ae0:	80 81       	ld	r24, Z
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	99 f0       	breq	.+38     	; 0x1b0c <TIMER1_Init+0x2e>
    1ae6:	28 f0       	brcs	.+10     	; 0x1af2 <TIMER1_Init+0x14>
    1ae8:	82 30       	cpi	r24, 0x02	; 2
    1aea:	e9 f0       	breq	.+58     	; 0x1b26 <TIMER1_Init+0x48>
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	41 f1       	breq	.+80     	; 0x1b40 <TIMER1_Init+0x62>
    1af0:	33 c0       	rjmp	.+102    	; 0x1b58 <TIMER1_Init+0x7a>
    1af2:	8f b5       	in	r24, 0x2f	; 47
    1af4:	8e 7f       	andi	r24, 0xFE	; 254
    1af6:	8f bd       	out	0x2f, r24	; 47
    1af8:	8f b5       	in	r24, 0x2f	; 47
    1afa:	8d 7f       	andi	r24, 0xFD	; 253
    1afc:	8f bd       	out	0x2f, r24	; 47
    1afe:	8e b5       	in	r24, 0x2e	; 46
    1b00:	87 7f       	andi	r24, 0xF7	; 247
    1b02:	8e bd       	out	0x2e, r24	; 46
    1b04:	8e b5       	in	r24, 0x2e	; 46
    1b06:	8f 7e       	andi	r24, 0xEF	; 239
    1b08:	8e bd       	out	0x2e, r24	; 46
    1b0a:	26 c0       	rjmp	.+76     	; 0x1b58 <TIMER1_Init+0x7a>
    1b0c:	8f b5       	in	r24, 0x2f	; 47
    1b0e:	8e 7f       	andi	r24, 0xFE	; 254
    1b10:	8f bd       	out	0x2f, r24	; 47
    1b12:	8f b5       	in	r24, 0x2f	; 47
    1b14:	8d 7f       	andi	r24, 0xFD	; 253
    1b16:	8f bd       	out	0x2f, r24	; 47
    1b18:	8e b5       	in	r24, 0x2e	; 46
    1b1a:	88 60       	ori	r24, 0x08	; 8
    1b1c:	8e bd       	out	0x2e, r24	; 46
    1b1e:	8e b5       	in	r24, 0x2e	; 46
    1b20:	8f 7e       	andi	r24, 0xEF	; 239
    1b22:	8e bd       	out	0x2e, r24	; 46
    1b24:	19 c0       	rjmp	.+50     	; 0x1b58 <TIMER1_Init+0x7a>
    1b26:	8f b5       	in	r24, 0x2f	; 47
    1b28:	8e 7f       	andi	r24, 0xFE	; 254
    1b2a:	8f bd       	out	0x2f, r24	; 47
    1b2c:	8f b5       	in	r24, 0x2f	; 47
    1b2e:	82 60       	ori	r24, 0x02	; 2
    1b30:	8f bd       	out	0x2f, r24	; 47
    1b32:	8e b5       	in	r24, 0x2e	; 46
    1b34:	88 60       	ori	r24, 0x08	; 8
    1b36:	8e bd       	out	0x2e, r24	; 46
    1b38:	8e b5       	in	r24, 0x2e	; 46
    1b3a:	80 61       	ori	r24, 0x10	; 16
    1b3c:	8e bd       	out	0x2e, r24	; 46
    1b3e:	0c c0       	rjmp	.+24     	; 0x1b58 <TIMER1_Init+0x7a>
    1b40:	8f b5       	in	r24, 0x2f	; 47
    1b42:	8e 7f       	andi	r24, 0xFE	; 254
    1b44:	8f bd       	out	0x2f, r24	; 47
    1b46:	8f b5       	in	r24, 0x2f	; 47
    1b48:	82 60       	ori	r24, 0x02	; 2
    1b4a:	8f bd       	out	0x2f, r24	; 47
    1b4c:	8e b5       	in	r24, 0x2e	; 46
    1b4e:	87 7f       	andi	r24, 0xF7	; 247
    1b50:	8e bd       	out	0x2e, r24	; 46
    1b52:	8e b5       	in	r24, 0x2e	; 46
    1b54:	80 61       	ori	r24, 0x10	; 16
    1b56:	8e bd       	out	0x2e, r24	; 46
    1b58:	81 81       	ldd	r24, Z+1	; 0x01
    1b5a:	82 30       	cpi	r24, 0x02	; 2
    1b5c:	01 f1       	breq	.+64     	; 0x1b9e <TIMER1_Init+0xc0>
    1b5e:	28 f4       	brcc	.+10     	; 0x1b6a <TIMER1_Init+0x8c>
    1b60:	88 23       	and	r24, r24
    1b62:	49 f0       	breq	.+18     	; 0x1b76 <TIMER1_Init+0x98>
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	89 f0       	breq	.+34     	; 0x1b8a <TIMER1_Init+0xac>
    1b68:	41 c0       	rjmp	.+130    	; 0x1bec <TIMER1_Init+0x10e>
    1b6a:	84 30       	cpi	r24, 0x04	; 4
    1b6c:	61 f1       	breq	.+88     	; 0x1bc6 <TIMER1_Init+0xe8>
    1b6e:	08 f1       	brcs	.+66     	; 0x1bb2 <TIMER1_Init+0xd4>
    1b70:	85 30       	cpi	r24, 0x05	; 5
    1b72:	99 f1       	breq	.+102    	; 0x1bda <TIMER1_Init+0xfc>
    1b74:	3b c0       	rjmp	.+118    	; 0x1bec <TIMER1_Init+0x10e>
    1b76:	8e b5       	in	r24, 0x2e	; 46
    1b78:	8e 7f       	andi	r24, 0xFE	; 254
    1b7a:	8e bd       	out	0x2e, r24	; 46
    1b7c:	8e b5       	in	r24, 0x2e	; 46
    1b7e:	8d 7f       	andi	r24, 0xFD	; 253
    1b80:	8e bd       	out	0x2e, r24	; 46
    1b82:	8e b5       	in	r24, 0x2e	; 46
    1b84:	8b 7f       	andi	r24, 0xFB	; 251
    1b86:	8e bd       	out	0x2e, r24	; 46
    1b88:	31 c0       	rjmp	.+98     	; 0x1bec <TIMER1_Init+0x10e>
    1b8a:	8e b5       	in	r24, 0x2e	; 46
    1b8c:	81 60       	ori	r24, 0x01	; 1
    1b8e:	8e bd       	out	0x2e, r24	; 46
    1b90:	8e b5       	in	r24, 0x2e	; 46
    1b92:	8d 7f       	andi	r24, 0xFD	; 253
    1b94:	8e bd       	out	0x2e, r24	; 46
    1b96:	8e b5       	in	r24, 0x2e	; 46
    1b98:	8b 7f       	andi	r24, 0xFB	; 251
    1b9a:	8e bd       	out	0x2e, r24	; 46
    1b9c:	27 c0       	rjmp	.+78     	; 0x1bec <TIMER1_Init+0x10e>
    1b9e:	8e b5       	in	r24, 0x2e	; 46
    1ba0:	8e 7f       	andi	r24, 0xFE	; 254
    1ba2:	8e bd       	out	0x2e, r24	; 46
    1ba4:	8e b5       	in	r24, 0x2e	; 46
    1ba6:	82 60       	ori	r24, 0x02	; 2
    1ba8:	8e bd       	out	0x2e, r24	; 46
    1baa:	8e b5       	in	r24, 0x2e	; 46
    1bac:	8b 7f       	andi	r24, 0xFB	; 251
    1bae:	8e bd       	out	0x2e, r24	; 46
    1bb0:	1d c0       	rjmp	.+58     	; 0x1bec <TIMER1_Init+0x10e>
    1bb2:	8e b5       	in	r24, 0x2e	; 46
    1bb4:	81 60       	ori	r24, 0x01	; 1
    1bb6:	8e bd       	out	0x2e, r24	; 46
    1bb8:	8e b5       	in	r24, 0x2e	; 46
    1bba:	82 60       	ori	r24, 0x02	; 2
    1bbc:	8e bd       	out	0x2e, r24	; 46
    1bbe:	8e b5       	in	r24, 0x2e	; 46
    1bc0:	8b 7f       	andi	r24, 0xFB	; 251
    1bc2:	8e bd       	out	0x2e, r24	; 46
    1bc4:	13 c0       	rjmp	.+38     	; 0x1bec <TIMER1_Init+0x10e>
    1bc6:	8e b5       	in	r24, 0x2e	; 46
    1bc8:	8e 7f       	andi	r24, 0xFE	; 254
    1bca:	8e bd       	out	0x2e, r24	; 46
    1bcc:	8e b5       	in	r24, 0x2e	; 46
    1bce:	8d 7f       	andi	r24, 0xFD	; 253
    1bd0:	8e bd       	out	0x2e, r24	; 46
    1bd2:	8e b5       	in	r24, 0x2e	; 46
    1bd4:	84 60       	ori	r24, 0x04	; 4
    1bd6:	8e bd       	out	0x2e, r24	; 46
    1bd8:	09 c0       	rjmp	.+18     	; 0x1bec <TIMER1_Init+0x10e>
    1bda:	8e b5       	in	r24, 0x2e	; 46
    1bdc:	81 60       	ori	r24, 0x01	; 1
    1bde:	8e bd       	out	0x2e, r24	; 46
    1be0:	8e b5       	in	r24, 0x2e	; 46
    1be2:	8d 7f       	andi	r24, 0xFD	; 253
    1be4:	8e bd       	out	0x2e, r24	; 46
    1be6:	8e b5       	in	r24, 0x2e	; 46
    1be8:	84 60       	ori	r24, 0x04	; 4
    1bea:	8e bd       	out	0x2e, r24	; 46
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	82 30       	cpi	r24, 0x02	; 2
    1bf0:	59 f0       	breq	.+22     	; 0x1c08 <TIMER1_Init+0x12a>
    1bf2:	83 30       	cpi	r24, 0x03	; 3
    1bf4:	81 f0       	breq	.+32     	; 0x1c16 <TIMER1_Init+0x138>
    1bf6:	81 11       	cpse	r24, r1
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <TIMER1_Init+0x144>
    1bfa:	8f b5       	in	r24, 0x2f	; 47
    1bfc:	8f 7b       	andi	r24, 0xBF	; 191
    1bfe:	8f bd       	out	0x2f, r24	; 47
    1c00:	8f b5       	in	r24, 0x2f	; 47
    1c02:	8f 77       	andi	r24, 0x7F	; 127
    1c04:	8f bd       	out	0x2f, r24	; 47
    1c06:	0d c0       	rjmp	.+26     	; 0x1c22 <TIMER1_Init+0x144>
    1c08:	8f b5       	in	r24, 0x2f	; 47
    1c0a:	8f 7b       	andi	r24, 0xBF	; 191
    1c0c:	8f bd       	out	0x2f, r24	; 47
    1c0e:	8f b5       	in	r24, 0x2f	; 47
    1c10:	80 68       	ori	r24, 0x80	; 128
    1c12:	8f bd       	out	0x2f, r24	; 47
    1c14:	06 c0       	rjmp	.+12     	; 0x1c22 <TIMER1_Init+0x144>
    1c16:	8f b5       	in	r24, 0x2f	; 47
    1c18:	8f 7b       	andi	r24, 0xBF	; 191
    1c1a:	8f bd       	out	0x2f, r24	; 47
    1c1c:	8f b5       	in	r24, 0x2f	; 47
    1c1e:	8f 77       	andi	r24, 0x7F	; 127
    1c20:	8f bd       	out	0x2f, r24	; 47
    1c22:	99 b7       	in	r25, 0x39	; 57
    1c24:	87 81       	ldd	r24, Z+7	; 0x07
    1c26:	88 0f       	add	r24, r24
    1c28:	88 0f       	add	r24, r24
    1c2a:	89 2b       	or	r24, r25
    1c2c:	89 bf       	out	0x39, r24	; 57
    1c2e:	08 95       	ret

00001c30 <TIMER1_OCR1A_SetValue>:
    1c30:	9b bd       	out	0x2b, r25	; 43
    1c32:	8a bd       	out	0x2a, r24	; 42
    1c34:	08 95       	ret

00001c36 <TIMER1_ICR_SetValue>:
}
void TIMER1_ICR_SetValue(u16 value){
	TIMER1_ICR1_Reg = value;
    1c36:	97 bd       	out	0x27, r25	; 39
    1c38:	86 bd       	out	0x26, r24	; 38
    1c3a:	08 95       	ret

00001c3c <__vector_7>:
}

ISR(TIMER1_COMPA_vect){
    1c3c:	1f 92       	push	r1
    1c3e:	0f 92       	push	r0
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	0f 92       	push	r0
    1c44:	11 24       	eor	r1, r1
    1c46:	2f 93       	push	r18
    1c48:	3f 93       	push	r19
    1c4a:	4f 93       	push	r20
    1c4c:	5f 93       	push	r21
    1c4e:	6f 93       	push	r22
    1c50:	7f 93       	push	r23
    1c52:	8f 93       	push	r24
    1c54:	9f 93       	push	r25
    1c56:	af 93       	push	r26
    1c58:	bf 93       	push	r27
    1c5a:	ef 93       	push	r30
    1c5c:	ff 93       	push	r31
	Timer1Oc1aIntFunPtr();
    1c5e:	e0 91 ce 05 	lds	r30, 0x05CE	; 0x8005ce <Timer1Oc1aIntFunPtr>
    1c62:	f0 91 cf 05 	lds	r31, 0x05CF	; 0x8005cf <Timer1Oc1aIntFunPtr+0x1>
    1c66:	09 95       	icall
}
    1c68:	ff 91       	pop	r31
    1c6a:	ef 91       	pop	r30
    1c6c:	bf 91       	pop	r27
    1c6e:	af 91       	pop	r26
    1c70:	9f 91       	pop	r25
    1c72:	8f 91       	pop	r24
    1c74:	7f 91       	pop	r23
    1c76:	6f 91       	pop	r22
    1c78:	5f 91       	pop	r21
    1c7a:	4f 91       	pop	r20
    1c7c:	3f 91       	pop	r19
    1c7e:	2f 91       	pop	r18
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	0f 90       	pop	r0
    1c86:	1f 90       	pop	r1
    1c88:	18 95       	reti

00001c8a <__vector_8>:

ISR(TIMER1_COMPB_vect){
    1c8a:	1f 92       	push	r1
    1c8c:	0f 92       	push	r0
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	0f 92       	push	r0
    1c92:	11 24       	eor	r1, r1
    1c94:	2f 93       	push	r18
    1c96:	3f 93       	push	r19
    1c98:	4f 93       	push	r20
    1c9a:	5f 93       	push	r21
    1c9c:	6f 93       	push	r22
    1c9e:	7f 93       	push	r23
    1ca0:	8f 93       	push	r24
    1ca2:	9f 93       	push	r25
    1ca4:	af 93       	push	r26
    1ca6:	bf 93       	push	r27
    1ca8:	ef 93       	push	r30
    1caa:	ff 93       	push	r31
	Timer1Oc1bIntFunPtr();
    1cac:	e0 91 cc 05 	lds	r30, 0x05CC	; 0x8005cc <Timer1Oc1bIntFunPtr>
    1cb0:	f0 91 cd 05 	lds	r31, 0x05CD	; 0x8005cd <Timer1Oc1bIntFunPtr+0x1>
    1cb4:	09 95       	icall
}
    1cb6:	ff 91       	pop	r31
    1cb8:	ef 91       	pop	r30
    1cba:	bf 91       	pop	r27
    1cbc:	af 91       	pop	r26
    1cbe:	9f 91       	pop	r25
    1cc0:	8f 91       	pop	r24
    1cc2:	7f 91       	pop	r23
    1cc4:	6f 91       	pop	r22
    1cc6:	5f 91       	pop	r21
    1cc8:	4f 91       	pop	r20
    1cca:	3f 91       	pop	r19
    1ccc:	2f 91       	pop	r18
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <__vector_9>:

ISR(TIMER1_OVF_vect){
    1cd8:	1f 92       	push	r1
    1cda:	0f 92       	push	r0
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	0f 92       	push	r0
    1ce0:	11 24       	eor	r1, r1
    1ce2:	2f 93       	push	r18
    1ce4:	3f 93       	push	r19
    1ce6:	4f 93       	push	r20
    1ce8:	5f 93       	push	r21
    1cea:	6f 93       	push	r22
    1cec:	7f 93       	push	r23
    1cee:	8f 93       	push	r24
    1cf0:	9f 93       	push	r25
    1cf2:	af 93       	push	r26
    1cf4:	bf 93       	push	r27
    1cf6:	ef 93       	push	r30
    1cf8:	ff 93       	push	r31
	Timer1TovIntFunPtr();
    1cfa:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <Timer1TovIntFunPtr>
    1cfe:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <Timer1TovIntFunPtr+0x1>
    1d02:	09 95       	icall
}
    1d04:	ff 91       	pop	r31
    1d06:	ef 91       	pop	r30
    1d08:	bf 91       	pop	r27
    1d0a:	af 91       	pop	r26
    1d0c:	9f 91       	pop	r25
    1d0e:	8f 91       	pop	r24
    1d10:	7f 91       	pop	r23
    1d12:	6f 91       	pop	r22
    1d14:	5f 91       	pop	r21
    1d16:	4f 91       	pop	r20
    1d18:	3f 91       	pop	r19
    1d1a:	2f 91       	pop	r18
    1d1c:	0f 90       	pop	r0
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	0f 90       	pop	r0
    1d22:	1f 90       	pop	r1
    1d24:	18 95       	reti

00001d26 <TWI_Init>:
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
	while(TWI->TWCR_Reg.Bits.TWINT_Bit == 0);//Waiting the flag
	*data = TWI->TWDR_Reg;
	return TWI_Status();
}
    1d26:	82 b9       	out	0x02, r24	; 2
    1d28:	8e e0       	ldi	r24, 0x0E	; 14
    1d2a:	80 b9       	out	0x00, r24	; 0
    1d2c:	08 95       	ret

00001d2e <TWI_Start>:
    1d2e:	86 b7       	in	r24, 0x36	; 54
    1d30:	80 62       	ori	r24, 0x20	; 32
    1d32:	86 bf       	out	0x36, r24	; 54
    1d34:	86 b7       	in	r24, 0x36	; 54
    1d36:	8f 7e       	andi	r24, 0xEF	; 239
    1d38:	86 bf       	out	0x36, r24	; 54
    1d3a:	86 b7       	in	r24, 0x36	; 54
    1d3c:	8f 7b       	andi	r24, 0xBF	; 191
    1d3e:	86 bf       	out	0x36, r24	; 54
    1d40:	86 b7       	in	r24, 0x36	; 54
    1d42:	84 60       	ori	r24, 0x04	; 4
    1d44:	86 bf       	out	0x36, r24	; 54
    1d46:	86 b7       	in	r24, 0x36	; 54
    1d48:	80 68       	ori	r24, 0x80	; 128
    1d4a:	86 bf       	out	0x36, r24	; 54
    1d4c:	06 b6       	in	r0, 0x36	; 54
    1d4e:	07 fe       	sbrs	r0, 7
    1d50:	fd cf       	rjmp	.-6      	; 0x1d4c <TWI_Start+0x1e>
    1d52:	81 b1       	in	r24, 0x01	; 1
    1d54:	88 7f       	andi	r24, 0xF8	; 248
    1d56:	08 95       	ret

00001d58 <TWI_Send>:
    1d58:	83 b9       	out	0x03, r24	; 3
    1d5a:	86 b7       	in	r24, 0x36	; 54
    1d5c:	8f 7d       	andi	r24, 0xDF	; 223
    1d5e:	86 bf       	out	0x36, r24	; 54
    1d60:	86 b7       	in	r24, 0x36	; 54
    1d62:	8f 7e       	andi	r24, 0xEF	; 239
    1d64:	86 bf       	out	0x36, r24	; 54
    1d66:	86 b7       	in	r24, 0x36	; 54
    1d68:	8f 7b       	andi	r24, 0xBF	; 191
    1d6a:	86 bf       	out	0x36, r24	; 54
    1d6c:	86 b7       	in	r24, 0x36	; 54
    1d6e:	84 60       	ori	r24, 0x04	; 4
    1d70:	86 bf       	out	0x36, r24	; 54
    1d72:	86 b7       	in	r24, 0x36	; 54
    1d74:	80 68       	ori	r24, 0x80	; 128
    1d76:	86 bf       	out	0x36, r24	; 54
    1d78:	06 b6       	in	r0, 0x36	; 54
    1d7a:	07 fe       	sbrs	r0, 7
    1d7c:	fd cf       	rjmp	.-6      	; 0x1d78 <TWI_Send+0x20>
    1d7e:	81 b1       	in	r24, 0x01	; 1
    1d80:	88 7f       	andi	r24, 0xF8	; 248
    1d82:	08 95       	ret

00001d84 <TWI_Read_NAck>:
u8 TWI_Read_NAck(u8 * data){
    1d84:	fc 01       	movw	r30, r24
	TWI->TWCR_Reg.Bits.TWSTA_Bit = 0;//Enable/Disable Start
    1d86:	96 b7       	in	r25, 0x36	; 54
    1d88:	9f 7d       	andi	r25, 0xDF	; 223
    1d8a:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWSTO_Bit = 0;//Enable/Disable Stop at the End
    1d8c:	96 b7       	in	r25, 0x36	; 54
    1d8e:	9f 7e       	andi	r25, 0xEF	; 239
    1d90:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWEA_Bit = 0;//Read with Ack. Bit
    1d92:	96 b7       	in	r25, 0x36	; 54
    1d94:	9f 7b       	andi	r25, 0xBF	; 191
    1d96:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
    1d98:	96 b7       	in	r25, 0x36	; 54
    1d9a:	94 60       	ori	r25, 0x04	; 4
    1d9c:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
    1d9e:	96 b7       	in	r25, 0x36	; 54
    1da0:	90 68       	ori	r25, 0x80	; 128
    1da2:	96 bf       	out	0x36, r25	; 54
	while(TWI->TWCR_Reg.Bits.TWINT_Bit == 0);//Waiting the flag
    1da4:	06 b6       	in	r0, 0x36	; 54
    1da6:	07 fe       	sbrs	r0, 7
    1da8:	fd cf       	rjmp	.-6      	; 0x1da4 <TWI_Read_NAck+0x20>
	*data = TWI->TWDR_Reg;
    1daa:	83 b1       	in	r24, 0x03	; 3
    1dac:	80 83       	st	Z, r24
void TWI_Init(u8 address){
	TWI->TWAR_Reg = address;
	TWI->TWBR_Reg = MyTWBR;
}
u8 TWI_Status(void){
	return (TWI->TWSR_Reg & 0xF8);
    1dae:	81 b1       	in	r24, 0x01	; 1
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
	while(TWI->TWCR_Reg.Bits.TWINT_Bit == 0);//Waiting the flag
	*data = TWI->TWDR_Reg;
	return TWI_Status();
}
    1db0:	88 7f       	andi	r24, 0xF8	; 248
    1db2:	08 95       	ret

00001db4 <TWI_Stop>:
void TWI_Stop(void){
	TWI->TWCR_Reg.Bits.TWSTA_Bit = 0;//Enable/Disable Start
    1db4:	86 b7       	in	r24, 0x36	; 54
    1db6:	8f 7d       	andi	r24, 0xDF	; 223
    1db8:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWSTO_Bit = 1;//Enable/Disable Stop at the End
    1dba:	86 b7       	in	r24, 0x36	; 54
    1dbc:	80 61       	ori	r24, 0x10	; 16
    1dbe:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWEA_Bit = 0;//Read with Ack. Bit
    1dc0:	86 b7       	in	r24, 0x36	; 54
    1dc2:	8f 7b       	andi	r24, 0xBF	; 191
    1dc4:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
    1dc6:	86 b7       	in	r24, 0x36	; 54
    1dc8:	84 60       	ori	r24, 0x04	; 4
    1dca:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
    1dcc:	86 b7       	in	r24, 0x36	; 54
    1dce:	80 68       	ori	r24, 0x80	; 128
    1dd0:	86 bf       	out	0x36, r24	; 54
    1dd2:	08 95       	ret

00001dd4 <UART_Init>:
 * Created: 4/28/2023 3:23:54 PM
 *  Author: user
 */ 
#include "UART.h"

void UART_Init(UART_Config * options){
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	ec 01       	movw	r28, r24
	u16 MyUBRR = 0;
	if (options->speedMode == DoupleSpeed_Enable)
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	81 30       	cpi	r24, 0x01	; 1
    1dde:	e9 f4       	brne	.+58     	; 0x1e1a <UART_Init+0x46>
	{
		UART->UCSRA_Reg.Bits.U2X_Bit = 1;
    1de0:	59 9a       	sbi	0x0b, 1	; 11
		MyUBRR = (F_CPU/(8UL*options->baudRate))-1;
    1de2:	28 81       	ld	r18, Y
    1de4:	39 81       	ldd	r19, Y+1	; 0x01
    1de6:	c9 01       	movw	r24, r18
    1de8:	a0 e0       	ldi	r26, 0x00	; 0
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	aa 1f       	adc	r26, r26
    1df2:	bb 1f       	adc	r27, r27
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	aa 1f       	adc	r26, r26
    1dfa:	bb 1f       	adc	r27, r27
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	ad 01       	movw	r20, r26
    1e00:	22 0f       	add	r18, r18
    1e02:	33 1f       	adc	r19, r19
    1e04:	44 1f       	adc	r20, r20
    1e06:	55 1f       	adc	r21, r21
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	74 e2       	ldi	r23, 0x24	; 36
    1e0c:	84 ef       	ldi	r24, 0xF4	; 244
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodsi4>
    1e14:	21 50       	subi	r18, 0x01	; 1
    1e16:	31 09       	sbc	r19, r1
    1e18:	20 c0       	rjmp	.+64     	; 0x1e5a <UART_Init+0x86>
	} 
	else
	{
		UART->UCSRA_Reg.Bits.U2X_Bit = 0;
    1e1a:	59 98       	cbi	0x0b, 1	; 11
		MyUBRR = (F_CPU/(16UL*options->baudRate))-1;
    1e1c:	28 81       	ld	r18, Y
    1e1e:	39 81       	ldd	r19, Y+1	; 0x01
    1e20:	c9 01       	movw	r24, r18
    1e22:	a0 e0       	ldi	r26, 0x00	; 0
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	aa 1f       	adc	r26, r26
    1e2c:	bb 1f       	adc	r27, r27
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	aa 1f       	adc	r26, r26
    1e34:	bb 1f       	adc	r27, r27
    1e36:	9c 01       	movw	r18, r24
    1e38:	ad 01       	movw	r20, r26
    1e3a:	22 0f       	add	r18, r18
    1e3c:	33 1f       	adc	r19, r19
    1e3e:	44 1f       	adc	r20, r20
    1e40:	55 1f       	adc	r21, r21
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	44 1f       	adc	r20, r20
    1e48:	55 1f       	adc	r21, r21
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	74 e2       	ldi	r23, 0x24	; 36
    1e4e:	84 ef       	ldi	r24, 0xF4	; 244
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodsi4>
    1e56:	21 50       	subi	r18, 0x01	; 1
    1e58:	31 09       	sbc	r19, r1
	}
	UART->UBRRL_Reg = MyUBRR;
    1e5a:	29 b9       	out	0x09, r18	; 9
	UART->UCSRC_UBRRH_Reg.UBRRH_AllRegister = MyUBRR>>8;
    1e5c:	30 bd       	out	0x20, r19	; 32
	
	if (options->characterSize == CharacterSize_9Bits)
    1e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e60:	97 30       	cpi	r25, 0x07	; 7
    1e62:	41 f4       	brne	.+16     	; 0x1e74 <UART_Init+0xa0>
	{
		UART->UCSRC_UBRRH_Reg.UCSRC_Bits.UCSZ0_Bit = 1;
    1e64:	80 b5       	in	r24, 0x20	; 32
    1e66:	82 60       	ori	r24, 0x02	; 2
    1e68:	80 bd       	out	0x20, r24	; 32
		UART->UCSRC_UBRRH_Reg.UCSRC_Bits.UCSZ1_Bit = 1;
    1e6a:	80 b5       	in	r24, 0x20	; 32
    1e6c:	84 60       	ori	r24, 0x04	; 4
    1e6e:	80 bd       	out	0x20, r24	; 32
		UART->UCSRB_Reg.Bits.UCSZ2_Bit = 1;
    1e70:	52 9a       	sbi	0x0a, 2	; 10
    1e72:	05 c0       	rjmp	.+10     	; 0x1e7e <UART_Init+0xaa>
	} 
	else
	{
		UART->UCSRC_UBRRH_Reg.UCSRC_AllRegister |= (UCSRC_SelectEnable)|(options->characterSize<<1);
    1e74:	80 b5       	in	r24, 0x20	; 32
    1e76:	99 0f       	add	r25, r25
    1e78:	80 68       	ori	r24, 0x80	; 128
    1e7a:	89 2b       	or	r24, r25
    1e7c:	80 bd       	out	0x20, r24	; 32
	}
	UART->UCSRC_UBRRH_Reg.UCSRC_AllRegister |= (UCSRC_SelectEnable)|(options->stopBits<<3);
    1e7e:	80 b5       	in	r24, 0x20	; 32
    1e80:	9c 81       	ldd	r25, Y+4	; 0x04
    1e82:	99 0f       	add	r25, r25
    1e84:	99 0f       	add	r25, r25
    1e86:	99 0f       	add	r25, r25
    1e88:	80 68       	ori	r24, 0x80	; 128
    1e8a:	89 2b       	or	r24, r25
    1e8c:	80 bd       	out	0x20, r24	; 32
	UART->UCSRC_UBRRH_Reg.UCSRC_AllRegister |= (UCSRC_SelectEnable)|(options->parityMode<<4);
    1e8e:	20 b5       	in	r18, 0x20	; 32
    1e90:	9d 81       	ldd	r25, Y+5	; 0x05
    1e92:	30 e1       	ldi	r19, 0x10	; 16
    1e94:	93 9f       	mul	r25, r19
    1e96:	c0 01       	movw	r24, r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	92 2f       	mov	r25, r18
    1e9c:	90 68       	ori	r25, 0x80	; 128
    1e9e:	89 2b       	or	r24, r25
    1ea0:	80 bd       	out	0x20, r24	; 32
	UART->UCSRB_Reg.Bits.TXEN_Bit = options->txMode;
    1ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea4:	80 fd       	sbrc	r24, 0
    1ea6:	53 9a       	sbi	0x0a, 3	; 10
    1ea8:	80 ff       	sbrs	r24, 0
    1eaa:	53 98       	cbi	0x0a, 3	; 10
	UART->UCSRB_Reg.Bits.RXEN_Bit = options->rxMode;
    1eac:	8f 81       	ldd	r24, Y+7	; 0x07
    1eae:	80 fd       	sbrc	r24, 0
    1eb0:	54 9a       	sbi	0x0a, 4	; 10
    1eb2:	80 ff       	sbrs	r24, 0
    1eb4:	54 98       	cbi	0x0a, 4	; 10
}
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <UART_Transmait>:
void UART_Transmait(u8 data){
	while(UART->UCSRA_Reg.Bits.UDRE_Bit == 0);
    1ebc:	5d 9b       	sbis	0x0b, 5	; 11
    1ebe:	fe cf       	rjmp	.-4      	; 0x1ebc <UART_Transmait>
	UART->UDR_Reg = data;
    1ec0:	8c b9       	out	0x0c, r24	; 12
    1ec2:	08 95       	ret

00001ec4 <UART_TransmaitString>:
}
void UART_TransmaitString(s8 * string){
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	fc 01       	movw	r30, r24
	u8 i = 0;
	while(string[i] != '\0'){
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 23       	and	r24, r24
    1ed0:	59 f0       	breq	.+22     	; 0x1ee8 <UART_TransmaitString+0x24>
    1ed2:	8f 01       	movw	r16, r30
    1ed4:	c0 e0       	ldi	r28, 0x00	; 0
		UART_Transmait(string[i]);
    1ed6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_Transmait>
		i++;
    1eda:	cf 5f       	subi	r28, 0xFF	; 255
	while(UART->UCSRA_Reg.Bits.UDRE_Bit == 0);
	UART->UDR_Reg = data;
}
void UART_TransmaitString(s8 * string){
	u8 i = 0;
	while(string[i] != '\0'){
    1edc:	f8 01       	movw	r30, r16
    1ede:	ec 0f       	add	r30, r28
    1ee0:	f1 1d       	adc	r31, r1
    1ee2:	80 81       	ld	r24, Z
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	f7 cf       	rjmp	.-18     	; 0x1ed6 <UART_TransmaitString+0x12>
		UART_Transmait(string[i]);
		i++;
	}
}
    1ee8:	cf 91       	pop	r28
    1eea:	1f 91       	pop	r17
    1eec:	0f 91       	pop	r16
    1eee:	08 95       	ret

00001ef0 <UART_Receive>:
u8 UART_Receive(void){
	while (UART->UCSRA_Reg.Bits.RXC_Bit == 0);
    1ef0:	5f 9b       	sbis	0x0b, 7	; 11
    1ef2:	fe cf       	rjmp	.-4      	; 0x1ef0 <UART_Receive>
	return UART->UDR_Reg;
    1ef4:	8c b1       	in	r24, 0x0c	; 12
    1ef6:	08 95       	ret

00001ef8 <__subsf3>:
    1ef8:	50 58       	subi	r21, 0x80	; 128

00001efa <__addsf3>:
    1efa:	bb 27       	eor	r27, r27
    1efc:	aa 27       	eor	r26, r26
    1efe:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__addsf3x>
    1f02:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__fp_round>
    1f06:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_pscA>
    1f0a:	38 f0       	brcs	.+14     	; 0x1f1a <__addsf3+0x20>
    1f0c:	0e 94 65 10 	call	0x20ca	; 0x20ca <__fp_pscB>
    1f10:	20 f0       	brcs	.+8      	; 0x1f1a <__addsf3+0x20>
    1f12:	39 f4       	brne	.+14     	; 0x1f22 <__addsf3+0x28>
    1f14:	9f 3f       	cpi	r25, 0xFF	; 255
    1f16:	19 f4       	brne	.+6      	; 0x1f1e <__addsf3+0x24>
    1f18:	26 f4       	brtc	.+8      	; 0x1f22 <__addsf3+0x28>
    1f1a:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__fp_nan>
    1f1e:	0e f4       	brtc	.+2      	; 0x1f22 <__addsf3+0x28>
    1f20:	e0 95       	com	r30
    1f22:	e7 fb       	bst	r30, 7
    1f24:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>

00001f28 <__addsf3x>:
    1f28:	e9 2f       	mov	r30, r25
    1f2a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__fp_split3>
    1f2e:	58 f3       	brcs	.-42     	; 0x1f06 <__addsf3+0xc>
    1f30:	ba 17       	cp	r27, r26
    1f32:	62 07       	cpc	r22, r18
    1f34:	73 07       	cpc	r23, r19
    1f36:	84 07       	cpc	r24, r20
    1f38:	95 07       	cpc	r25, r21
    1f3a:	20 f0       	brcs	.+8      	; 0x1f44 <__addsf3x+0x1c>
    1f3c:	79 f4       	brne	.+30     	; 0x1f5c <__addsf3x+0x34>
    1f3e:	a6 f5       	brtc	.+104    	; 0x1fa8 <__addsf3x+0x80>
    1f40:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__fp_zero>
    1f44:	0e f4       	brtc	.+2      	; 0x1f48 <__addsf3x+0x20>
    1f46:	e0 95       	com	r30
    1f48:	0b 2e       	mov	r0, r27
    1f4a:	ba 2f       	mov	r27, r26
    1f4c:	a0 2d       	mov	r26, r0
    1f4e:	0b 01       	movw	r0, r22
    1f50:	b9 01       	movw	r22, r18
    1f52:	90 01       	movw	r18, r0
    1f54:	0c 01       	movw	r0, r24
    1f56:	ca 01       	movw	r24, r20
    1f58:	a0 01       	movw	r20, r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	ff 27       	eor	r31, r31
    1f5e:	59 1b       	sub	r21, r25
    1f60:	99 f0       	breq	.+38     	; 0x1f88 <__addsf3x+0x60>
    1f62:	59 3f       	cpi	r21, 0xF9	; 249
    1f64:	50 f4       	brcc	.+20     	; 0x1f7a <__addsf3x+0x52>
    1f66:	50 3e       	cpi	r21, 0xE0	; 224
    1f68:	68 f1       	brcs	.+90     	; 0x1fc4 <__addsf3x+0x9c>
    1f6a:	1a 16       	cp	r1, r26
    1f6c:	f0 40       	sbci	r31, 0x00	; 0
    1f6e:	a2 2f       	mov	r26, r18
    1f70:	23 2f       	mov	r18, r19
    1f72:	34 2f       	mov	r19, r20
    1f74:	44 27       	eor	r20, r20
    1f76:	58 5f       	subi	r21, 0xF8	; 248
    1f78:	f3 cf       	rjmp	.-26     	; 0x1f60 <__addsf3x+0x38>
    1f7a:	46 95       	lsr	r20
    1f7c:	37 95       	ror	r19
    1f7e:	27 95       	ror	r18
    1f80:	a7 95       	ror	r26
    1f82:	f0 40       	sbci	r31, 0x00	; 0
    1f84:	53 95       	inc	r21
    1f86:	c9 f7       	brne	.-14     	; 0x1f7a <__addsf3x+0x52>
    1f88:	7e f4       	brtc	.+30     	; 0x1fa8 <__addsf3x+0x80>
    1f8a:	1f 16       	cp	r1, r31
    1f8c:	ba 0b       	sbc	r27, r26
    1f8e:	62 0b       	sbc	r22, r18
    1f90:	73 0b       	sbc	r23, r19
    1f92:	84 0b       	sbc	r24, r20
    1f94:	ba f0       	brmi	.+46     	; 0x1fc4 <__addsf3x+0x9c>
    1f96:	91 50       	subi	r25, 0x01	; 1
    1f98:	a1 f0       	breq	.+40     	; 0x1fc2 <__addsf3x+0x9a>
    1f9a:	ff 0f       	add	r31, r31
    1f9c:	bb 1f       	adc	r27, r27
    1f9e:	66 1f       	adc	r22, r22
    1fa0:	77 1f       	adc	r23, r23
    1fa2:	88 1f       	adc	r24, r24
    1fa4:	c2 f7       	brpl	.-16     	; 0x1f96 <__addsf3x+0x6e>
    1fa6:	0e c0       	rjmp	.+28     	; 0x1fc4 <__addsf3x+0x9c>
    1fa8:	ba 0f       	add	r27, r26
    1faa:	62 1f       	adc	r22, r18
    1fac:	73 1f       	adc	r23, r19
    1fae:	84 1f       	adc	r24, r20
    1fb0:	48 f4       	brcc	.+18     	; 0x1fc4 <__addsf3x+0x9c>
    1fb2:	87 95       	ror	r24
    1fb4:	77 95       	ror	r23
    1fb6:	67 95       	ror	r22
    1fb8:	b7 95       	ror	r27
    1fba:	f7 95       	ror	r31
    1fbc:	9e 3f       	cpi	r25, 0xFE	; 254
    1fbe:	08 f0       	brcs	.+2      	; 0x1fc2 <__addsf3x+0x9a>
    1fc0:	b0 cf       	rjmp	.-160    	; 0x1f22 <__addsf3+0x28>
    1fc2:	93 95       	inc	r25
    1fc4:	88 0f       	add	r24, r24
    1fc6:	08 f0       	brcs	.+2      	; 0x1fca <__addsf3x+0xa2>
    1fc8:	99 27       	eor	r25, r25
    1fca:	ee 0f       	add	r30, r30
    1fcc:	97 95       	ror	r25
    1fce:	87 95       	ror	r24
    1fd0:	08 95       	ret

00001fd2 <__fixunssfsi>:
    1fd2:	0e 94 85 10 	call	0x210a	; 0x210a <__fp_splitA>
    1fd6:	88 f0       	brcs	.+34     	; 0x1ffa <__fixunssfsi+0x28>
    1fd8:	9f 57       	subi	r25, 0x7F	; 127
    1fda:	98 f0       	brcs	.+38     	; 0x2002 <__fixunssfsi+0x30>
    1fdc:	b9 2f       	mov	r27, r25
    1fde:	99 27       	eor	r25, r25
    1fe0:	b7 51       	subi	r27, 0x17	; 23
    1fe2:	b0 f0       	brcs	.+44     	; 0x2010 <__fixunssfsi+0x3e>
    1fe4:	e1 f0       	breq	.+56     	; 0x201e <__fixunssfsi+0x4c>
    1fe6:	66 0f       	add	r22, r22
    1fe8:	77 1f       	adc	r23, r23
    1fea:	88 1f       	adc	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	1a f0       	brmi	.+6      	; 0x1ff6 <__fixunssfsi+0x24>
    1ff0:	ba 95       	dec	r27
    1ff2:	c9 f7       	brne	.-14     	; 0x1fe6 <__fixunssfsi+0x14>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <__fixunssfsi+0x4c>
    1ff6:	b1 30       	cpi	r27, 0x01	; 1
    1ff8:	91 f0       	breq	.+36     	; 0x201e <__fixunssfsi+0x4c>
    1ffa:	0e 94 9f 10 	call	0x213e	; 0x213e <__fp_zero>
    1ffe:	b1 e0       	ldi	r27, 0x01	; 1
    2000:	08 95       	ret
    2002:	0c 94 9f 10 	jmp	0x213e	; 0x213e <__fp_zero>
    2006:	67 2f       	mov	r22, r23
    2008:	78 2f       	mov	r23, r24
    200a:	88 27       	eor	r24, r24
    200c:	b8 5f       	subi	r27, 0xF8	; 248
    200e:	39 f0       	breq	.+14     	; 0x201e <__fixunssfsi+0x4c>
    2010:	b9 3f       	cpi	r27, 0xF9	; 249
    2012:	cc f3       	brlt	.-14     	; 0x2006 <__fixunssfsi+0x34>
    2014:	86 95       	lsr	r24
    2016:	77 95       	ror	r23
    2018:	67 95       	ror	r22
    201a:	b3 95       	inc	r27
    201c:	d9 f7       	brne	.-10     	; 0x2014 <__fixunssfsi+0x42>
    201e:	3e f4       	brtc	.+14     	; 0x202e <__fixunssfsi+0x5c>
    2020:	90 95       	com	r25
    2022:	80 95       	com	r24
    2024:	70 95       	com	r23
    2026:	61 95       	neg	r22
    2028:	7f 4f       	sbci	r23, 0xFF	; 255
    202a:	8f 4f       	sbci	r24, 0xFF	; 255
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	08 95       	ret

00002030 <__floatunsisf>:
    2030:	e8 94       	clt
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <__floatsisf+0x12>

00002034 <__floatsisf>:
    2034:	97 fb       	bst	r25, 7
    2036:	3e f4       	brtc	.+14     	; 0x2046 <__floatsisf+0x12>
    2038:	90 95       	com	r25
    203a:	80 95       	com	r24
    203c:	70 95       	com	r23
    203e:	61 95       	neg	r22
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	8f 4f       	sbci	r24, 0xFF	; 255
    2044:	9f 4f       	sbci	r25, 0xFF	; 255
    2046:	99 23       	and	r25, r25
    2048:	a9 f0       	breq	.+42     	; 0x2074 <__floatsisf+0x40>
    204a:	f9 2f       	mov	r31, r25
    204c:	96 e9       	ldi	r25, 0x96	; 150
    204e:	bb 27       	eor	r27, r27
    2050:	93 95       	inc	r25
    2052:	f6 95       	lsr	r31
    2054:	87 95       	ror	r24
    2056:	77 95       	ror	r23
    2058:	67 95       	ror	r22
    205a:	b7 95       	ror	r27
    205c:	f1 11       	cpse	r31, r1
    205e:	f8 cf       	rjmp	.-16     	; 0x2050 <__floatsisf+0x1c>
    2060:	fa f4       	brpl	.+62     	; 0x20a0 <__floatsisf+0x6c>
    2062:	bb 0f       	add	r27, r27
    2064:	11 f4       	brne	.+4      	; 0x206a <__floatsisf+0x36>
    2066:	60 ff       	sbrs	r22, 0
    2068:	1b c0       	rjmp	.+54     	; 0x20a0 <__floatsisf+0x6c>
    206a:	6f 5f       	subi	r22, 0xFF	; 255
    206c:	7f 4f       	sbci	r23, 0xFF	; 255
    206e:	8f 4f       	sbci	r24, 0xFF	; 255
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	16 c0       	rjmp	.+44     	; 0x20a0 <__floatsisf+0x6c>
    2074:	88 23       	and	r24, r24
    2076:	11 f0       	breq	.+4      	; 0x207c <__floatsisf+0x48>
    2078:	96 e9       	ldi	r25, 0x96	; 150
    207a:	11 c0       	rjmp	.+34     	; 0x209e <__floatsisf+0x6a>
    207c:	77 23       	and	r23, r23
    207e:	21 f0       	breq	.+8      	; 0x2088 <__floatsisf+0x54>
    2080:	9e e8       	ldi	r25, 0x8E	; 142
    2082:	87 2f       	mov	r24, r23
    2084:	76 2f       	mov	r23, r22
    2086:	05 c0       	rjmp	.+10     	; 0x2092 <__floatsisf+0x5e>
    2088:	66 23       	and	r22, r22
    208a:	71 f0       	breq	.+28     	; 0x20a8 <__floatsisf+0x74>
    208c:	96 e8       	ldi	r25, 0x86	; 134
    208e:	86 2f       	mov	r24, r22
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	2a f0       	brmi	.+10     	; 0x20a0 <__floatsisf+0x6c>
    2096:	9a 95       	dec	r25
    2098:	66 0f       	add	r22, r22
    209a:	77 1f       	adc	r23, r23
    209c:	88 1f       	adc	r24, r24
    209e:	da f7       	brpl	.-10     	; 0x2096 <__floatsisf+0x62>
    20a0:	88 0f       	add	r24, r24
    20a2:	96 95       	lsr	r25
    20a4:	87 95       	ror	r24
    20a6:	97 f9       	bld	r25, 7
    20a8:	08 95       	ret

000020aa <__fp_inf>:
    20aa:	97 f9       	bld	r25, 7
    20ac:	9f 67       	ori	r25, 0x7F	; 127
    20ae:	80 e8       	ldi	r24, 0x80	; 128
    20b0:	70 e0       	ldi	r23, 0x00	; 0
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	08 95       	ret

000020b6 <__fp_nan>:
    20b6:	9f ef       	ldi	r25, 0xFF	; 255
    20b8:	80 ec       	ldi	r24, 0xC0	; 192
    20ba:	08 95       	ret

000020bc <__fp_pscA>:
    20bc:	00 24       	eor	r0, r0
    20be:	0a 94       	dec	r0
    20c0:	16 16       	cp	r1, r22
    20c2:	17 06       	cpc	r1, r23
    20c4:	18 06       	cpc	r1, r24
    20c6:	09 06       	cpc	r0, r25
    20c8:	08 95       	ret

000020ca <__fp_pscB>:
    20ca:	00 24       	eor	r0, r0
    20cc:	0a 94       	dec	r0
    20ce:	12 16       	cp	r1, r18
    20d0:	13 06       	cpc	r1, r19
    20d2:	14 06       	cpc	r1, r20
    20d4:	05 06       	cpc	r0, r21
    20d6:	08 95       	ret

000020d8 <__fp_round>:
    20d8:	09 2e       	mov	r0, r25
    20da:	03 94       	inc	r0
    20dc:	00 0c       	add	r0, r0
    20de:	11 f4       	brne	.+4      	; 0x20e4 <__fp_round+0xc>
    20e0:	88 23       	and	r24, r24
    20e2:	52 f0       	brmi	.+20     	; 0x20f8 <__fp_round+0x20>
    20e4:	bb 0f       	add	r27, r27
    20e6:	40 f4       	brcc	.+16     	; 0x20f8 <__fp_round+0x20>
    20e8:	bf 2b       	or	r27, r31
    20ea:	11 f4       	brne	.+4      	; 0x20f0 <__fp_round+0x18>
    20ec:	60 ff       	sbrs	r22, 0
    20ee:	04 c0       	rjmp	.+8      	; 0x20f8 <__fp_round+0x20>
    20f0:	6f 5f       	subi	r22, 0xFF	; 255
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255
    20f4:	8f 4f       	sbci	r24, 0xFF	; 255
    20f6:	9f 4f       	sbci	r25, 0xFF	; 255
    20f8:	08 95       	ret

000020fa <__fp_split3>:
    20fa:	57 fd       	sbrc	r21, 7
    20fc:	90 58       	subi	r25, 0x80	; 128
    20fe:	44 0f       	add	r20, r20
    2100:	55 1f       	adc	r21, r21
    2102:	59 f0       	breq	.+22     	; 0x211a <__fp_splitA+0x10>
    2104:	5f 3f       	cpi	r21, 0xFF	; 255
    2106:	71 f0       	breq	.+28     	; 0x2124 <__fp_splitA+0x1a>
    2108:	47 95       	ror	r20

0000210a <__fp_splitA>:
    210a:	88 0f       	add	r24, r24
    210c:	97 fb       	bst	r25, 7
    210e:	99 1f       	adc	r25, r25
    2110:	61 f0       	breq	.+24     	; 0x212a <__fp_splitA+0x20>
    2112:	9f 3f       	cpi	r25, 0xFF	; 255
    2114:	79 f0       	breq	.+30     	; 0x2134 <__fp_splitA+0x2a>
    2116:	87 95       	ror	r24
    2118:	08 95       	ret
    211a:	12 16       	cp	r1, r18
    211c:	13 06       	cpc	r1, r19
    211e:	14 06       	cpc	r1, r20
    2120:	55 1f       	adc	r21, r21
    2122:	f2 cf       	rjmp	.-28     	; 0x2108 <__fp_split3+0xe>
    2124:	46 95       	lsr	r20
    2126:	f1 df       	rcall	.-30     	; 0x210a <__fp_splitA>
    2128:	08 c0       	rjmp	.+16     	; 0x213a <__fp_splitA+0x30>
    212a:	16 16       	cp	r1, r22
    212c:	17 06       	cpc	r1, r23
    212e:	18 06       	cpc	r1, r24
    2130:	99 1f       	adc	r25, r25
    2132:	f1 cf       	rjmp	.-30     	; 0x2116 <__fp_splitA+0xc>
    2134:	86 95       	lsr	r24
    2136:	71 05       	cpc	r23, r1
    2138:	61 05       	cpc	r22, r1
    213a:	08 94       	sec
    213c:	08 95       	ret

0000213e <__fp_zero>:
    213e:	e8 94       	clt

00002140 <__fp_szero>:
    2140:	bb 27       	eor	r27, r27
    2142:	66 27       	eor	r22, r22
    2144:	77 27       	eor	r23, r23
    2146:	cb 01       	movw	r24, r22
    2148:	97 f9       	bld	r25, 7
    214a:	08 95       	ret

0000214c <__mulsf3>:
    214c:	0e 94 b9 10 	call	0x2172	; 0x2172 <__mulsf3x>
    2150:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <__fp_round>
    2154:	0e 94 5e 10 	call	0x20bc	; 0x20bc <__fp_pscA>
    2158:	38 f0       	brcs	.+14     	; 0x2168 <__mulsf3+0x1c>
    215a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__fp_pscB>
    215e:	20 f0       	brcs	.+8      	; 0x2168 <__mulsf3+0x1c>
    2160:	95 23       	and	r25, r21
    2162:	11 f0       	breq	.+4      	; 0x2168 <__mulsf3+0x1c>
    2164:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>
    2168:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <__fp_nan>
    216c:	11 24       	eor	r1, r1
    216e:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__fp_szero>

00002172 <__mulsf3x>:
    2172:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__fp_split3>
    2176:	70 f3       	brcs	.-36     	; 0x2154 <__mulsf3+0x8>

00002178 <__mulsf3_pse>:
    2178:	95 9f       	mul	r25, r21
    217a:	c1 f3       	breq	.-16     	; 0x216c <__mulsf3+0x20>
    217c:	95 0f       	add	r25, r21
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	55 1f       	adc	r21, r21
    2182:	62 9f       	mul	r22, r18
    2184:	f0 01       	movw	r30, r0
    2186:	72 9f       	mul	r23, r18
    2188:	bb 27       	eor	r27, r27
    218a:	f0 0d       	add	r31, r0
    218c:	b1 1d       	adc	r27, r1
    218e:	63 9f       	mul	r22, r19
    2190:	aa 27       	eor	r26, r26
    2192:	f0 0d       	add	r31, r0
    2194:	b1 1d       	adc	r27, r1
    2196:	aa 1f       	adc	r26, r26
    2198:	64 9f       	mul	r22, r20
    219a:	66 27       	eor	r22, r22
    219c:	b0 0d       	add	r27, r0
    219e:	a1 1d       	adc	r26, r1
    21a0:	66 1f       	adc	r22, r22
    21a2:	82 9f       	mul	r24, r18
    21a4:	22 27       	eor	r18, r18
    21a6:	b0 0d       	add	r27, r0
    21a8:	a1 1d       	adc	r26, r1
    21aa:	62 1f       	adc	r22, r18
    21ac:	73 9f       	mul	r23, r19
    21ae:	b0 0d       	add	r27, r0
    21b0:	a1 1d       	adc	r26, r1
    21b2:	62 1f       	adc	r22, r18
    21b4:	83 9f       	mul	r24, r19
    21b6:	a0 0d       	add	r26, r0
    21b8:	61 1d       	adc	r22, r1
    21ba:	22 1f       	adc	r18, r18
    21bc:	74 9f       	mul	r23, r20
    21be:	33 27       	eor	r19, r19
    21c0:	a0 0d       	add	r26, r0
    21c2:	61 1d       	adc	r22, r1
    21c4:	23 1f       	adc	r18, r19
    21c6:	84 9f       	mul	r24, r20
    21c8:	60 0d       	add	r22, r0
    21ca:	21 1d       	adc	r18, r1
    21cc:	82 2f       	mov	r24, r18
    21ce:	76 2f       	mov	r23, r22
    21d0:	6a 2f       	mov	r22, r26
    21d2:	11 24       	eor	r1, r1
    21d4:	9f 57       	subi	r25, 0x7F	; 127
    21d6:	50 40       	sbci	r21, 0x00	; 0
    21d8:	9a f0       	brmi	.+38     	; 0x2200 <__mulsf3_pse+0x88>
    21da:	f1 f0       	breq	.+60     	; 0x2218 <__mulsf3_pse+0xa0>
    21dc:	88 23       	and	r24, r24
    21de:	4a f0       	brmi	.+18     	; 0x21f2 <__mulsf3_pse+0x7a>
    21e0:	ee 0f       	add	r30, r30
    21e2:	ff 1f       	adc	r31, r31
    21e4:	bb 1f       	adc	r27, r27
    21e6:	66 1f       	adc	r22, r22
    21e8:	77 1f       	adc	r23, r23
    21ea:	88 1f       	adc	r24, r24
    21ec:	91 50       	subi	r25, 0x01	; 1
    21ee:	50 40       	sbci	r21, 0x00	; 0
    21f0:	a9 f7       	brne	.-22     	; 0x21dc <__mulsf3_pse+0x64>
    21f2:	9e 3f       	cpi	r25, 0xFE	; 254
    21f4:	51 05       	cpc	r21, r1
    21f6:	80 f0       	brcs	.+32     	; 0x2218 <__mulsf3_pse+0xa0>
    21f8:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <__fp_inf>
    21fc:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__fp_szero>
    2200:	5f 3f       	cpi	r21, 0xFF	; 255
    2202:	e4 f3       	brlt	.-8      	; 0x21fc <__mulsf3_pse+0x84>
    2204:	98 3e       	cpi	r25, 0xE8	; 232
    2206:	d4 f3       	brlt	.-12     	; 0x21fc <__mulsf3_pse+0x84>
    2208:	86 95       	lsr	r24
    220a:	77 95       	ror	r23
    220c:	67 95       	ror	r22
    220e:	b7 95       	ror	r27
    2210:	f7 95       	ror	r31
    2212:	e7 95       	ror	r30
    2214:	9f 5f       	subi	r25, 0xFF	; 255
    2216:	c1 f7       	brne	.-16     	; 0x2208 <__mulsf3_pse+0x90>
    2218:	fe 2b       	or	r31, r30
    221a:	88 0f       	add	r24, r24
    221c:	91 1d       	adc	r25, r1
    221e:	96 95       	lsr	r25
    2220:	87 95       	ror	r24
    2222:	97 f9       	bld	r25, 7
    2224:	08 95       	ret

00002226 <__udivmodsi4>:
    2226:	a1 e2       	ldi	r26, 0x21	; 33
    2228:	1a 2e       	mov	r1, r26
    222a:	aa 1b       	sub	r26, r26
    222c:	bb 1b       	sub	r27, r27
    222e:	fd 01       	movw	r30, r26
    2230:	0d c0       	rjmp	.+26     	; 0x224c <__udivmodsi4_ep>

00002232 <__udivmodsi4_loop>:
    2232:	aa 1f       	adc	r26, r26
    2234:	bb 1f       	adc	r27, r27
    2236:	ee 1f       	adc	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	a2 17       	cp	r26, r18
    223c:	b3 07       	cpc	r27, r19
    223e:	e4 07       	cpc	r30, r20
    2240:	f5 07       	cpc	r31, r21
    2242:	20 f0       	brcs	.+8      	; 0x224c <__udivmodsi4_ep>
    2244:	a2 1b       	sub	r26, r18
    2246:	b3 0b       	sbc	r27, r19
    2248:	e4 0b       	sbc	r30, r20
    224a:	f5 0b       	sbc	r31, r21

0000224c <__udivmodsi4_ep>:
    224c:	66 1f       	adc	r22, r22
    224e:	77 1f       	adc	r23, r23
    2250:	88 1f       	adc	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	1a 94       	dec	r1
    2256:	69 f7       	brne	.-38     	; 0x2232 <__udivmodsi4_loop>
    2258:	60 95       	com	r22
    225a:	70 95       	com	r23
    225c:	80 95       	com	r24
    225e:	90 95       	com	r25
    2260:	9b 01       	movw	r18, r22
    2262:	ac 01       	movw	r20, r24
    2264:	bd 01       	movw	r22, r26
    2266:	cf 01       	movw	r24, r30
    2268:	08 95       	ret

0000226a <__tablejump2__>:
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	05 90       	lpm	r0, Z+
    2270:	f4 91       	lpm	r31, Z
    2272:	e0 2d       	mov	r30, r0
    2274:	09 94       	ijmp

00002276 <_exit>:
    2276:	f8 94       	cli

00002278 <__stop_program>:
    2278:	ff cf       	rjmp	.-2      	; 0x2278 <__stop_program>
