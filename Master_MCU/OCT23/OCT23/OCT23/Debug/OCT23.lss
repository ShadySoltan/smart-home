
OCT23.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000050e  00800060  000023ce  00002462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080056e  0080056e  00002970  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002970  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000029a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  000029dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000699e  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001570  00000000  00000000  000096ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029ce  00000000  00000000  0000ac5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000093c  00000000  00000000  0000d628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016f7  00000000  00000000  0000df64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003def  00000000  00000000  0000f65b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0001344a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__vector_1>
       8:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__vector_2>
       c:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__vector_7>
      20:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__vector_8>
      24:	0c 94 16 0f 	jmp	0x1e2c	; 0x1e2c <__vector_9>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	3a 08       	sbc	r3, r10
      56:	5c 08       	sbc	r5, r12
      58:	73 08       	sbc	r7, r3
      5a:	8e 08       	sbc	r8, r14
      5c:	a6 08       	sbc	r10, r6
      5e:	be 08       	sbc	r11, r14
      60:	d6 08       	sbc	r13, r6
      62:	0a 09       	sbc	r16, r10

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	15 e0       	ldi	r17, 0x05	; 5
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee ec       	ldi	r30, 0xCE	; 206
      78:	f3 e2       	ldi	r31, 0x23	; 35
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	25 e0       	ldi	r18, 0x05	; 5
      88:	ae e6       	ldi	r26, 0x6E	; 110
      8a:	b5 e0       	ldi	r27, 0x05	; 5
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	aa 37       	cpi	r26, 0x7A	; 122
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 3f 0b 	call	0x167e	; 0x167e <main>
      9a:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Password_Exist>:
	0x00,
	0x00
}; //Degree Symbol for LCD

u8 Password_Exist(u8 location)
{
      a2:	cf 92       	push	r12
      a4:	df 92       	push	r13
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	00 d0       	rcall	.+0      	; 0xb4 <Password_Exist+0x12>
      b4:	00 d0       	rcall	.+0      	; 0xb6 <Password_Exist+0x14>
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
      ba:	08 2f       	mov	r16, r24
	u8 passWord[PASSWORD_LENGTH] = {STD_Low}, password_counter = 0;
      bc:	19 82       	std	Y+1, r1	; 0x01
      be:	1a 82       	std	Y+2, r1	; 0x02
      c0:	1b 82       	std	Y+3, r1	; 0x03
      c2:	1c 82       	std	Y+4, r1	; 0x04
      c4:	ce 01       	movw	r24, r28
      c6:	01 96       	adiw	r24, 0x01	; 1
      c8:	7c 01       	movw	r14, r24
      ca:	6c 01       	movw	r12, r24
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
      cc:	10 e0       	ldi	r17, 0x00	; 0
	{
		passWord[i] = EEPROM_ReadByte(location,i);
      ce:	61 2f       	mov	r22, r17
      d0:	80 2f       	mov	r24, r16
      d2:	0e 94 3a 09 	call	0x1274	; 0x1274 <EEPROM_ReadByte>
      d6:	f6 01       	movw	r30, r12
      d8:	81 93       	st	Z+, r24
      da:	6f 01       	movw	r12, r30

u8 Password_Exist(u8 location)
{
	u8 passWord[PASSWORD_LENGTH] = {STD_Low}, password_counter = 0;
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
      dc:	1f 5f       	subi	r17, 0xFF	; 255
      de:	14 30       	cpi	r17, 0x04	; 4
      e0:	b1 f7       	brne	.-20     	; 0xce <Password_Exist+0x2c>
      e2:	9e 01       	movw	r18, r28
      e4:	2b 5f       	subi	r18, 0xFB	; 251
      e6:	3f 4f       	sbci	r19, 0xFF	; 255
      e8:	90 e0       	ldi	r25, 0x00	; 0
		passWord[i] = EEPROM_ReadByte(location,i);
	}
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
	{
		if(passWord[i] == 0xFF)
      ea:	f7 01       	movw	r30, r14
      ec:	81 91       	ld	r24, Z+
      ee:	7f 01       	movw	r14, r30
      f0:	8f 3f       	cpi	r24, 0xFF	; 255
      f2:	09 f4       	brne	.+2      	; 0xf6 <Password_Exist+0x54>
		{
			password_counter++;
      f4:	9f 5f       	subi	r25, 0xFF	; 255
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
	{
		passWord[i] = EEPROM_ReadByte(location,i);
	}
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
      f6:	e2 16       	cp	r14, r18
      f8:	f3 06       	cpc	r15, r19
      fa:	b9 f7       	brne	.-18     	; 0xea <Password_Exist+0x48>
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	09 f4       	brne	.+2      	; 0x104 <Password_Exist+0x62>
     102:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 1;
	}
}
     104:	0f 90       	pop	r0
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	0f 90       	pop	r0
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	1f 91       	pop	r17
     112:	0f 91       	pop	r16
     114:	ff 90       	pop	r15
     116:	ef 90       	pop	r14
     118:	df 90       	pop	r13
     11a:	cf 90       	pop	r12
     11c:	08 95       	ret

0000011e <getPassword>:

void getPassword(u8 location, s8* Store)
{
     11e:	0f 93       	push	r16
     120:	1f 93       	push	r17
     122:	cf 93       	push	r28
     124:	df 93       	push	r29
     126:	d8 2f       	mov	r29, r24
     128:	8b 01       	movw	r16, r22
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     12a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Store[i] = EEPROM_ReadByte(location,i);
     12c:	6c 2f       	mov	r22, r28
     12e:	8d 2f       	mov	r24, r29
     130:	0e 94 3a 09 	call	0x1274	; 0x1274 <EEPROM_ReadByte>
     134:	f8 01       	movw	r30, r16
     136:	81 93       	st	Z+, r24
     138:	8f 01       	movw	r16, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     13a:	ff ef       	ldi	r31, 0xFF	; 255
     13c:	20 e7       	ldi	r18, 0x70	; 112
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	f1 50       	subi	r31, 0x01	; 1
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	80 40       	sbci	r24, 0x00	; 0
     146:	e1 f7       	brne	.-8      	; 0x140 <getPassword+0x22>
     148:	00 c0       	rjmp	.+0      	; 0x14a <getPassword+0x2c>
     14a:	00 00       	nop
	}
}

void getPassword(u8 location, s8* Store)
{
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     14c:	cf 5f       	subi	r28, 0xFF	; 255
     14e:	c4 30       	cpi	r28, 0x04	; 4
     150:	69 f7       	brne	.-38     	; 0x12c <getPassword+0xe>
	{
		Store[i] = EEPROM_ReadByte(location,i);
		_delay_ms(50);
	}
}
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	1f 91       	pop	r17
     158:	0f 91       	pop	r16
     15a:	08 95       	ret

0000015c <ALARM>:
	}
}

void ALARM(void)
{
	if(EEPROM_ReadByte(ALARM_LOC,0) != 0xFF)
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	82 ea       	ldi	r24, 0xA2	; 162
     160:	0e 94 3a 09 	call	0x1274	; 0x1274 <EEPROM_ReadByte>
     164:	8f 3f       	cpi	r24, 0xFF	; 255
     166:	b1 f0       	breq	.+44     	; 0x194 <ALARM+0x38>
	{
		while(1)
		{
			LCD_Clear();
     168:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
			LCD_String("ALARM!!!!");
     16c:	80 ed       	ldi	r24, 0xD0	; 208
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     174:	2f ef       	ldi	r18, 0xFF	; 255
     176:	83 ec       	ldi	r24, 0xC3	; 195
     178:	99 e0       	ldi	r25, 0x09	; 9
     17a:	21 50       	subi	r18, 0x01	; 1
     17c:	80 40       	sbci	r24, 0x00	; 0
     17e:	90 40       	sbci	r25, 0x00	; 0
     180:	e1 f7       	brne	.-8      	; 0x17a <ALARM+0x1e>
     182:	00 c0       	rjmp	.+0      	; 0x184 <ALARM+0x28>
     184:	00 00       	nop
			_delay_ms(200);
			LCD_Clear();
     186:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
			DIO_WriteChannel(DIO_ChannelB0,STD_High);
     18a:	61 e0       	ldi	r22, 0x01	; 1
     18c:	88 e0       	ldi	r24, 0x08	; 8
     18e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
     192:	ea cf       	rjmp	.-44     	; 0x168 <ALARM+0xc>
     194:	08 95       	ret

00000196 <Menu2>:
		Menu2();
	}
}

void Menu2(void)
{
     196:	8f 92       	push	r8
     198:	9f 92       	push	r9
     19a:	bf 92       	push	r11
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
     1b0:	28 97       	sbiw	r28, 0x08	; 8
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	de bf       	out	0x3e, r29	; 62
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	cd bf       	out	0x3d, r28	; 61
	s8 Password_User[PASSWORD_LENGTH] = {STD_Low};
     1bc:	19 82       	std	Y+1, r1	; 0x01
     1be:	1a 82       	std	Y+2, r1	; 0x02
     1c0:	1b 82       	std	Y+3, r1	; 0x03
     1c2:	1c 82       	std	Y+4, r1	; 0x04
	s8 SavedPassword[PASSWORD_LENGTH] = {STD_Low};
     1c4:	1d 82       	std	Y+5, r1	; 0x05
     1c6:	1e 82       	std	Y+6, r1	; 0x06
     1c8:	1f 82       	std	Y+7, r1	; 0x07
     1ca:	18 86       	std	Y+8, r1	; 0x08
	u8 password_trials = 0;
	s8 LCD_TRIALS_CHAR = '3';
	u8 Password_Counter = 0;
	
	getPassword(USER_PASS_LOC,SavedPassword);
     1cc:	be 01       	movw	r22, r28
     1ce:	6b 5f       	subi	r22, 0xFB	; 251
     1d0:	7f 4f       	sbci	r23, 0xFF	; 255
     1d2:	80 ea       	ldi	r24, 0xA0	; 160
     1d4:	0e 94 8f 00 	call	0x11e	; 0x11e <getPassword>
     1d8:	2f ef       	ldi	r18, 0xFF	; 255
     1da:	80 e7       	ldi	r24, 0x70	; 112
     1dc:	92 e0       	ldi	r25, 0x02	; 2
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	80 40       	sbci	r24, 0x00	; 0
     1e2:	90 40       	sbci	r25, 0x00	; 0
     1e4:	e1 f7       	brne	.-8      	; 0x1de <Menu2+0x48>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <Menu2+0x52>
     1e8:	00 00       	nop
void Menu2(void)
{
	s8 Password_User[PASSWORD_LENGTH] = {STD_Low};
	s8 SavedPassword[PASSWORD_LENGTH] = {STD_Low};
	u8 password_trials = 0;
	s8 LCD_TRIALS_CHAR = '3';
     1ea:	0f 2e       	mov	r0, r31
     1ec:	f3 e3       	ldi	r31, 0x33	; 51
     1ee:	bf 2e       	mov	r11, r31
     1f0:	f0 2d       	mov	r31, r0
     1f2:	6e 01       	movw	r12, r28
     1f4:	a9 e0       	ldi	r26, 0x09	; 9
     1f6:	ca 0e       	add	r12, r26
     1f8:	d1 1c       	adc	r13, r1
	getPassword(USER_PASS_LOC,SavedPassword);
	_delay_ms(50);
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
	LCD_Clear();
     1fa:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
	LCD_String("Password:");
     1fe:	82 e6       	ldi	r24, 0x62	; 98
     200:	91 e0       	ldi	r25, 0x01	; 1
     202:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     206:	8e 01       	movw	r16, r28
     208:	0f 5f       	subi	r16, 0xFF	; 255
     20a:	1f 4f       	sbci	r17, 0xFF	; 255
     20c:	48 01       	movw	r8, r16
	
	getPassword(USER_PASS_LOC,SavedPassword);
	_delay_ms(50);
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
     20e:	e1 2c       	mov	r14, r1
	LCD_Clear();
	LCD_String("Password:");
	while(Password_Counter<PASSWORD_LENGTH)
	{
		u8 keypad = STD_Low;
		keypad = GetKey();
     210:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     214:	f8 2e       	mov	r15, r24
		if(keypad != STD_Low)
     216:	88 23       	and	r24, r24
     218:	e1 f0       	breq	.+56     	; 0x252 <Menu2+0xbc>
		{
			LCD_Char(keypad);
     21a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
     21e:	bf ef       	ldi	r27, 0xFF	; 255
     220:	ea e6       	ldi	r30, 0x6A	; 106
     222:	f3 e0       	ldi	r31, 0x03	; 3
     224:	b1 50       	subi	r27, 0x01	; 1
     226:	e0 40       	sbci	r30, 0x00	; 0
     228:	f0 40       	sbci	r31, 0x00	; 0
     22a:	e1 f7       	brne	.-8      	; 0x224 <Menu2+0x8e>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <Menu2+0x98>
     22e:	00 00       	nop
			_delay_ms(70);
			LCD_SetPos(1,9+Password_Counter);
     230:	69 e0       	ldi	r22, 0x09	; 9
     232:	6e 0d       	add	r22, r14
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
			LCD_Char('*');
     23a:	8a e2       	ldi	r24, 0x2A	; 42
     23c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
			Password_User[Password_Counter] = keypad;
     240:	d4 01       	movw	r26, r8
     242:	fd 92       	st	X+, r15
     244:	4d 01       	movw	r8, r26
			Password_Counter++;
     246:	e3 94       	inc	r14
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
	LCD_Clear();
	LCD_String("Password:");
	while(Password_Counter<PASSWORD_LENGTH)
     248:	b4 e0       	ldi	r27, 0x04	; 4
     24a:	eb 16       	cp	r14, r27
     24c:	09 f4       	brne	.+2      	; 0x250 <Menu2+0xba>
     24e:	81 c0       	rjmp	.+258    	; 0x352 <Menu2+0x1bc>
     250:	df cf       	rjmp	.-66     	; 0x210 <Menu2+0x7a>
     252:	e3 e0       	ldi	r30, 0x03	; 3
     254:	ee 15       	cp	r30, r14
     256:	e0 f6       	brcc	.-72     	; 0x210 <Menu2+0x7a>
     258:	7c c0       	rjmp	.+248    	; 0x352 <Menu2+0x1bc>
	
	
	Password_Counter = 0;
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
	{
		if(SavedPassword[i] == Password_User[i])
     25a:	91 91       	ld	r25, Z+
     25c:	d8 01       	movw	r26, r16
     25e:	8d 91       	ld	r24, X+
     260:	8d 01       	movw	r16, r26
     262:	98 13       	cpse	r25, r24
     264:	01 c0       	rjmp	.+2      	; 0x268 <Menu2+0xd2>
		{
			Password_Counter++;
     266:	2f 5f       	subi	r18, 0xFF	; 255
		}
	}
	
	
	Password_Counter = 0;
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     268:	ce 16       	cp	r12, r30
     26a:	df 06       	cpc	r13, r31
     26c:	b1 f7       	brne	.-20     	; 0x25a <Menu2+0xc4>
		{
			Password_Counter++;
		}
	}
	
	if(Password_Counter == 4)
     26e:	24 30       	cpi	r18, 0x04	; 4
     270:	19 f5       	brne	.+70     	; 0x2b8 <Menu2+0x122>
	{
		LCD_Clear();
     272:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
		LCD_String("Correct Password!");
     276:	8a ed       	ldi	r24, 0xDA	; 218
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     27e:	bf ef       	ldi	r27, 0xFF	; 255
     280:	ef e0       	ldi	r30, 0x0F	; 15
     282:	f7 e2       	ldi	r31, 0x27	; 39
     284:	b1 50       	subi	r27, 0x01	; 1
     286:	e0 40       	sbci	r30, 0x00	; 0
     288:	f0 40       	sbci	r31, 0x00	; 0
     28a:	e1 f7       	brne	.-8      	; 0x284 <Menu2+0xee>
     28c:	00 c0       	rjmp	.+0      	; 0x28e <Menu2+0xf8>
     28e:	00 00       	nop
		_delay_ms(800);
		LCD_SetPos(2,1);
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
		LCD_String("!HomeSweetHome!");
     298:	8c ee       	ldi	r24, 0xEC	; 236
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     2a0:	2f ef       	ldi	r18, 0xFF	; 255
     2a2:	8f e0       	ldi	r24, 0x0F	; 15
     2a4:	97 e2       	ldi	r25, 0x27	; 39
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	80 40       	sbci	r24, 0x00	; 0
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <Menu2+0x110>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <Menu2+0x11a>
     2b0:	00 00       	nop
		_delay_ms(800);
		LCD_Clear();
     2b2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
     2b6:	51 c0       	rjmp	.+162    	; 0x35a <Menu2+0x1c4>
	}
	else
	{
		LCD_Clear();
     2b8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
		LCD_String("Wrong Password!");
     2bc:	8c ef       	ldi	r24, 0xFC	; 252
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
		password_trials++;
		LCD_TRIALS_CHAR--;
		if(password_trials == PASSWORD_TRIALS)
     2c4:	a1 e3       	ldi	r26, 0x31	; 49
     2c6:	ba 12       	cpse	r11, r26
     2c8:	2c c0       	rjmp	.+88     	; 0x322 <Menu2+0x18c>
		{
			LCD_Clear();
     2ca:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
			LCD_String("System Blocked!");
     2ce:	8c e0       	ldi	r24, 0x0C	; 12
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
			LCD_SetPos(2,0);
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	82 e0       	ldi	r24, 0x02	; 2
     2da:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
			LCD_String("Firing Alarm!!!");
     2de:	8c e1       	ldi	r24, 0x1C	; 28
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
			EEPROM_WriteByte(ALARM_LOC,0,'1');
     2e6:	41 e3       	ldi	r20, 0x31	; 49
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	82 ea       	ldi	r24, 0xA2	; 162
     2ec:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_WriteByte>
     2f0:	bf ef       	ldi	r27, 0xFF	; 255
     2f2:	e0 e7       	ldi	r30, 0x70	; 112
     2f4:	f2 e0       	ldi	r31, 0x02	; 2
     2f6:	b1 50       	subi	r27, 0x01	; 1
     2f8:	e0 40       	sbci	r30, 0x00	; 0
     2fa:	f0 40       	sbci	r31, 0x00	; 0
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <Menu2+0x160>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <Menu2+0x16a>
     300:	00 00       	nop
			_delay_ms(50);
			DIO_WriteChannel(DIO_ChannelB0,STD_High);
     302:	61 e0       	ldi	r22, 0x01	; 1
     304:	88 e0       	ldi	r24, 0x08	; 8
     306:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
     30a:	2f ef       	ldi	r18, 0xFF	; 255
     30c:	8d e2       	ldi	r24, 0x2D	; 45
     30e:	92 e2       	ldi	r25, 0x22	; 34
     310:	21 50       	subi	r18, 0x01	; 1
     312:	80 40       	sbci	r24, 0x00	; 0
     314:	90 40       	sbci	r25, 0x00	; 0
     316:	e1 f7       	brne	.-8      	; 0x310 <Menu2+0x17a>
     318:	00 c0       	rjmp	.+0      	; 0x31a <Menu2+0x184>
     31a:	00 00       	nop
			_delay_ms(700);
			ALARM();
     31c:	0e 94 ae 00 	call	0x15c	; 0x15c <ALARM>
     320:	1c c0       	rjmp	.+56     	; 0x35a <Menu2+0x1c4>
	else
	{
		LCD_Clear();
		LCD_String("Wrong Password!");
		password_trials++;
		LCD_TRIALS_CHAR--;
     322:	ba 94       	dec	r11
			_delay_ms(700);
			ALARM();
		}
		else
		{
			LCD_SetPos(2,0);
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	82 e0       	ldi	r24, 0x02	; 2
     328:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
			LCD_String("Trials left: ");
     32c:	8c e2       	ldi	r24, 0x2C	; 44
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
			LCD_Char(LCD_TRIALS_CHAR);
     334:	8b 2d       	mov	r24, r11
     336:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
     33a:	af ef       	ldi	r26, 0xFF	; 255
     33c:	bf e0       	ldi	r27, 0x0F	; 15
     33e:	e7 e2       	ldi	r30, 0x27	; 39
     340:	a1 50       	subi	r26, 0x01	; 1
     342:	b0 40       	sbci	r27, 0x00	; 0
     344:	e0 40       	sbci	r30, 0x00	; 0
     346:	e1 f7       	brne	.-8      	; 0x340 <Menu2+0x1aa>
     348:	00 c0       	rjmp	.+0      	; 0x34a <Menu2+0x1b4>
     34a:	00 00       	nop
			_delay_ms(800);
			LCD_Clear();
     34c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
			goto Retry;
     350:	54 cf       	rjmp	.-344    	; 0x1fa <Menu2+0x64>
     352:	fe 01       	movw	r30, r28
     354:	35 96       	adiw	r30, 0x05	; 5
	
	getPassword(USER_PASS_LOC,SavedPassword);
	_delay_ms(50);
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	80 cf       	rjmp	.-256    	; 0x25a <Menu2+0xc4>
			_delay_ms(800);
			LCD_Clear();
			goto Retry;
		}
	}
}
     35a:	28 96       	adiw	r28, 0x08	; 8
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	bf 90       	pop	r11
     378:	9f 90       	pop	r9
     37a:	8f 90       	pop	r8
     37c:	08 95       	ret

0000037e <Menu1>:
		_delay_ms(50);
	}
}

void Menu1(void)
{
     37e:	8f 92       	push	r8
     380:	9f 92       	push	r9
     382:	af 92       	push	r10
     384:	bf 92       	push	r11
     386:	cf 92       	push	r12
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	28 97       	sbiw	r28, 0x08	; 8
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	f8 94       	cli
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	cd bf       	out	0x3d, r28	; 61
	LCD_SetPos(1,3);
     3a6:	63 e0       	ldi	r22, 0x03	; 3
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
	LCD_String("Smart-Home");
     3ae:	8a e3       	ldi	r24, 0x3A	; 58
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
	LCD_SetPos(2,3);
     3b6:	63 e0       	ldi	r22, 0x03	; 3
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
	LCD_String("Project!");
     3be:	85 e4       	ldi	r24, 0x45	; 69
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     3c6:	2f ef       	ldi	r18, 0xFF	; 255
     3c8:	8b e4       	ldi	r24, 0x4B	; 75
     3ca:	9d e1       	ldi	r25, 0x1D	; 29
     3cc:	21 50       	subi	r18, 0x01	; 1
     3ce:	80 40       	sbci	r24, 0x00	; 0
     3d0:	90 40       	sbci	r25, 0x00	; 0
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <Menu1+0x4e>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Menu1+0x58>
     3d6:	00 00       	nop
	_delay_ms(600);
	LCD_Clear();
     3d8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
	
	if(Password_Exist(USER_PASS_LOC) == 0)
     3dc:	80 ea       	ldi	r24, 0xA0	; 160
     3de:	0e 94 51 00 	call	0xa2	; 0xa2 <Password_Exist>
     3e2:	81 11       	cpse	r24, r1
     3e4:	cb c0       	rjmp	.+406    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
	{
		s8 Password_User[PASSWORD_LENGTH] = {STD_Low};
     3e6:	1d 82       	std	Y+5, r1	; 0x05
     3e8:	1e 82       	std	Y+6, r1	; 0x06
     3ea:	1f 82       	std	Y+7, r1	; 0x07
     3ec:	18 86       	std	Y+8, r1	; 0x08
		s8 Password_Confirm[PASSWORD_LENGTH] = {STD_Low};
     3ee:	19 82       	std	Y+1, r1	; 0x01
     3f0:	1a 82       	std	Y+2, r1	; 0x02
     3f2:	1b 82       	std	Y+3, r1	; 0x03
     3f4:	1c 82       	std	Y+4, r1	; 0x04
		
		LCD_String("Login first time");
     3f6:	8e e4       	ldi	r24, 0x4E	; 78
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     3fe:	af ef       	ldi	r26, 0xFF	; 255
     400:	bb e4       	ldi	r27, 0x4B	; 75
     402:	ed e1       	ldi	r30, 0x1D	; 29
     404:	a1 50       	subi	r26, 0x01	; 1
     406:	b0 40       	sbci	r27, 0x00	; 0
     408:	e0 40       	sbci	r30, 0x00	; 0
     40a:	e1 f7       	brne	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
		_delay_ms(600);
		LCD_Clear();
     410:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
     414:	6e 01       	movw	r12, r28
     416:	f9 e0       	ldi	r31, 0x09	; 9
     418:	cf 0e       	add	r12, r31
     41a:	d1 1c       	adc	r13, r1
		
		RetryPassword:LCD_String("SetPassword:");
     41c:	8f e5       	ldi	r24, 0x5F	; 95
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     424:	5e 01       	movw	r10, r28
     426:	25 e0       	ldi	r18, 0x05	; 5
     428:	a2 0e       	add	r10, r18
     42a:	b1 1c       	adc	r11, r1
     42c:	75 01       	movw	r14, r10
		u8 Password_Counter = 0;
     42e:	00 e0       	ldi	r16, 0x00	; 0
		while(Password_Counter<PASSWORD_LENGTH)
		{
			u8 keypad = STD_Low;
			keypad = GetKey();
     430:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     434:	18 2f       	mov	r17, r24
			if(keypad != STD_Low)
     436:	88 23       	and	r24, r24
     438:	d1 f0       	breq	.+52     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			{
				LCD_Char(keypad);
     43a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	9a e6       	ldi	r25, 0x6A	; 106
     442:	a3 e0       	ldi	r26, 0x03	; 3
     444:	81 50       	subi	r24, 0x01	; 1
     446:	90 40       	sbci	r25, 0x00	; 0
     448:	a0 40       	sbci	r26, 0x00	; 0
     44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44e:	00 00       	nop
				_delay_ms(70);
				LCD_SetPos(1,12+Password_Counter);
     450:	6c e0       	ldi	r22, 0x0C	; 12
     452:	60 0f       	add	r22, r16
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
				LCD_Char('*');
     45a:	8a e2       	ldi	r24, 0x2A	; 42
     45c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
				Password_User[Password_Counter] = keypad;
     460:	f7 01       	movw	r30, r14
     462:	11 93       	st	Z+, r17
     464:	7f 01       	movw	r14, r30
				Password_Counter++;
     466:	0f 5f       	subi	r16, 0xFF	; 255
		_delay_ms(600);
		LCD_Clear();
		
		RetryPassword:LCD_String("SetPassword:");
		u8 Password_Counter = 0;
		while(Password_Counter<PASSWORD_LENGTH)
     468:	04 30       	cpi	r16, 0x04	; 4
     46a:	19 f0       	breq	.+6      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     46c:	e1 cf       	rjmp	.-62     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     46e:	04 30       	cpi	r16, 0x04	; 4
     470:	f8 f2       	brcs	.-66     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
				Password_User[Password_Counter] = keypad;
				Password_Counter++;
			}
		}
		
		LCD_Clear();
     472:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
		LCD_String("Confirm:");
     476:	8c e6       	ldi	r24, 0x6C	; 108
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     47e:	8e 01       	movw	r16, r28
     480:	0f 5f       	subi	r16, 0xFF	; 255
     482:	1f 4f       	sbci	r17, 0xFF	; 255
     484:	48 01       	movw	r8, r16
		Password_Counter = 0;
     486:	e1 2c       	mov	r14, r1
		while(Password_Counter<PASSWORD_LENGTH)
		{
			u8 keypad = STD_Low;
			keypad = GetKey();
     488:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     48c:	f8 2e       	mov	r15, r24
			if(keypad != STD_Low)
     48e:	88 23       	and	r24, r24
     490:	d9 f0       	breq	.+54     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			{
				LCD_Char(keypad);
     492:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
     496:	ff ef       	ldi	r31, 0xFF	; 255
     498:	2a e6       	ldi	r18, 0x6A	; 106
     49a:	83 e0       	ldi	r24, 0x03	; 3
     49c:	f1 50       	subi	r31, 0x01	; 1
     49e:	20 40       	sbci	r18, 0x00	; 0
     4a0:	80 40       	sbci	r24, 0x00	; 0
     4a2:	e1 f7       	brne	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a6:	00 00       	nop
				_delay_ms(70);
				LCD_SetPos(1,8+Password_Counter);
     4a8:	68 e0       	ldi	r22, 0x08	; 8
     4aa:	6e 0d       	add	r22, r14
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
				LCD_Char('*');
     4b2:	8a e2       	ldi	r24, 0x2A	; 42
     4b4:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
				Password_Confirm[Password_Counter] = keypad;
     4b8:	d4 01       	movw	r26, r8
     4ba:	fd 92       	st	X+, r15
     4bc:	4d 01       	movw	r8, r26
				Password_Counter++;
     4be:	e3 94       	inc	r14
		}
		
		LCD_Clear();
		LCD_String("Confirm:");
		Password_Counter = 0;
		while(Password_Counter<PASSWORD_LENGTH)
     4c0:	b4 e0       	ldi	r27, 0x04	; 4
     4c2:	eb 16       	cp	r14, r27
     4c4:	21 f0       	breq	.+8      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4c6:	e0 cf       	rjmp	.-64     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     4c8:	e3 e0       	ldi	r30, 0x03	; 3
     4ca:	ee 15       	cp	r30, r14
     4cc:	e8 f6       	brcc	.-70     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
				Password_Counter++;
			}
		}
		
		Password_Counter = 0;
		LCD_Clear();
     4ce:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
     4d2:	f5 01       	movw	r30, r10
				Password_Confirm[Password_Counter] = keypad;
				Password_Counter++;
			}
		}
		
		Password_Counter = 0;
     4d4:	20 e0       	ldi	r18, 0x00	; 0
		LCD_Clear();
		for(u8 i = 0; i < PASSWORD_LENGTH; i++)
		{
			if(Password_User[i] == Password_Confirm[i])
     4d6:	91 91       	ld	r25, Z+
     4d8:	d8 01       	movw	r26, r16
     4da:	8d 91       	ld	r24, X+
     4dc:	8d 01       	movw	r16, r26
     4de:	98 13       	cpse	r25, r24
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			{
				Password_Counter++;
     4e2:	2f 5f       	subi	r18, 0xFF	; 255
			}
		}
		
		Password_Counter = 0;
		LCD_Clear();
		for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     4e4:	ce 16       	cp	r12, r30
     4e6:	df 06       	cpc	r13, r31
     4e8:	b1 f7       	brne	.-20     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			{
				Password_Counter++;
			}
		}
		
		if(Password_Counter == 4)
     4ea:	24 30       	cpi	r18, 0x04	; 4
     4ec:	31 f5       	brne	.+76     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     4ee:	10 e0       	ldi	r17, 0x00	; 0
		{
			for(u8 i = 0; i < PASSWORD_LENGTH; i++)
			{
				EEPROM_WriteByte(USER_PASS_LOC,i,Password_User[i]);
     4f0:	f5 01       	movw	r30, r10
     4f2:	41 91       	ld	r20, Z+
     4f4:	5f 01       	movw	r10, r30
     4f6:	61 2f       	mov	r22, r17
     4f8:	80 ea       	ldi	r24, 0xA0	; 160
     4fa:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_WriteByte>
     4fe:	ff ef       	ldi	r31, 0xFF	; 255
     500:	23 ec       	ldi	r18, 0xC3	; 195
     502:	89 e0       	ldi	r24, 0x09	; 9
     504:	f1 50       	subi	r31, 0x01	; 1
     506:	20 40       	sbci	r18, 0x00	; 0
     508:	80 40       	sbci	r24, 0x00	; 0
     50a:	e1 f7       	brne	.-8      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
     50e:	00 00       	nop
			}
		}
		
		if(Password_Counter == 4)
		{
			for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     510:	1f 5f       	subi	r17, 0xFF	; 255
     512:	14 30       	cpi	r17, 0x04	; 4
     514:	69 f7       	brne	.-38     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			{
				EEPROM_WriteByte(USER_PASS_LOC,i,Password_User[i]);
				_delay_ms(200);
			}
			LCD_String("Password Saved!");
     516:	85 e7       	ldi	r24, 0x75	; 117
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     51e:	9f ef       	ldi	r25, 0xFF	; 255
     520:	ab e4       	ldi	r26, 0x4B	; 75
     522:	bd e1       	ldi	r27, 0x1D	; 29
     524:	91 50       	subi	r25, 0x01	; 1
     526:	a0 40       	sbci	r26, 0x00	; 0
     528:	b0 40       	sbci	r27, 0x00	; 0
     52a:	e1 f7       	brne	.-8      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     52e:	00 00       	nop
			_delay_ms(600);
			LCD_Clear();
     530:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
			Menu2();
     534:	0e 94 cb 00 	call	0x196	; 0x196 <Menu2>
     538:	38 c0       	rjmp	.+112    	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
		}
		else
		{
			LCD_String("Pass mismatch!");
     53a:	85 e8       	ldi	r24, 0x85	; 133
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     542:	ef ef       	ldi	r30, 0xFF	; 255
     544:	f3 ec       	ldi	r31, 0xC3	; 195
     546:	29 e0       	ldi	r18, 0x09	; 9
     548:	e1 50       	subi	r30, 0x01	; 1
     54a:	f0 40       	sbci	r31, 0x00	; 0
     54c:	20 40       	sbci	r18, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     550:	00 c0       	rjmp	.+0      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     552:	00 00       	nop
			_delay_ms(200);
			LCD_SetPos(2,0);
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
			LCD_String("Try again!");
     55c:	84 e9       	ldi	r24, 0x94	; 148
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     564:	8f ef       	ldi	r24, 0xFF	; 255
     566:	93 ec       	ldi	r25, 0xC3	; 195
     568:	a9 e0       	ldi	r26, 0x09	; 9
     56a:	81 50       	subi	r24, 0x01	; 1
     56c:	90 40       	sbci	r25, 0x00	; 0
     56e:	a0 40       	sbci	r26, 0x00	; 0
     570:	e1 f7       	brne	.-8      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     572:	00 c0       	rjmp	.+0      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     574:	00 00       	nop
			_delay_ms(200);
			LCD_Clear();
     576:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
			goto RetryPassword;
     57a:	50 cf       	rjmp	.-352    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	}
	else
	{
		//Already have an account
		//Greetings
		LCD_Clear();
     57c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
		LCD_SetPos(1,2);
     580:	62 e0       	ldi	r22, 0x02	; 2
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
		LCD_String("Welcome Home");
     588:	8f e9       	ldi	r24, 0x9F	; 159
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     590:	bf ef       	ldi	r27, 0xFF	; 255
     592:	ef e0       	ldi	r30, 0x0F	; 15
     594:	f7 e2       	ldi	r31, 0x27	; 39
     596:	b1 50       	subi	r27, 0x01	; 1
     598:	e0 40       	sbci	r30, 0x00	; 0
     59a:	f0 40       	sbci	r31, 0x00	; 0
     59c:	e1 f7       	brne	.-8      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     5a0:	00 00       	nop
		_delay_ms(800);
		LCD_Clear();
     5a2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
		Menu2();
     5a6:	0e 94 cb 00 	call	0x196	; 0x196 <Menu2>
	}
}
     5aa:	28 96       	adiw	r28, 0x08	; 8
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	08 95       	ret

000005d0 <DoorCheck>:
}

void DoorCheck(void)
{
	u8 Door_Status = STD_Low;
	Door_Status = EEPROM_ReadByte(DOOR_Status_Loc,0);
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	84 ea       	ldi	r24, 0xA4	; 164
     5d4:	0e 94 3a 09 	call	0x1274	; 0x1274 <EEPROM_ReadByte>
     5d8:	2f ef       	ldi	r18, 0xFF	; 255
     5da:	30 e7       	ldi	r19, 0x70	; 112
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	21 50       	subi	r18, 0x01	; 1
     5e0:	30 40       	sbci	r19, 0x00	; 0
     5e2:	90 40       	sbci	r25, 0x00	; 0
     5e4:	e1 f7       	brne	.-8      	; 0x5de <DoorCheck+0xe>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <DoorCheck+0x18>
     5e8:	00 00       	nop
	_delay_ms(50);
	if(Door_Status != 0xFF)
     5ea:	8f 3f       	cpi	r24, 0xFF	; 255
     5ec:	21 f0       	breq	.+8      	; 0x5f6 <DoorCheck+0x26>
	{
		ServoMotor(90);
     5ee:	8a e5       	ldi	r24, 0x5A	; 90
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <ServoMotor>
     5f6:	08 95       	ret

000005f8 <ROOM2>:
		}
	}
}

void ROOM2(void)
{
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
     5fe:	d0 e0       	ldi	r29, 0x00	; 0
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     600:	1d 2f       	mov	r17, r29

void ROOM2(void)
{
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
     602:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
	LCD_String("1:Lamp1 2:Lamp2");
     606:	8c ea       	ldi	r24, 0xAC	; 172
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
	LCD_SetPos(2,0);
     60e:	6d 2f       	mov	r22, r29
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
	LCD_String("3:Lamp3");
     616:	8c eb       	ldi	r24, 0xBC	; 188
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
	
	while(Key == STD_Low)
	{
		Key = GetKey();
     61e:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
		if (Key != STD_Low)
     622:	88 23       	and	r24, r24
     624:	e1 f3       	breq	.-8      	; 0x61e <ROOM2+0x26>
		{
			switch(Key)
     626:	82 33       	cpi	r24, 0x32	; 50
     628:	09 f4       	brne	.+2      	; 0x62c <ROOM2+0x34>
     62a:	8c c0       	rjmp	.+280    	; 0x744 <ROOM2+0x14c>
     62c:	83 33       	cpi	r24, 0x33	; 51
     62e:	09 f4       	brne	.+2      	; 0x632 <ROOM2+0x3a>
     630:	0f c1       	rjmp	.+542    	; 0x850 <ROOM2+0x258>
     632:	81 33       	cpi	r24, 0x31	; 49
     634:	09 f0       	breq	.+2      	; 0x638 <ROOM2+0x40>
     636:	92 c1       	rjmp	.+804    	; 0x95c <__stack+0xfd>
			{
				case '1':
				LCD_Clear();
     638:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
     63c:	2f ef       	ldi	r18, 0xFF	; 255
     63e:	80 e7       	ldi	r24, 0x70	; 112
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	21 50       	subi	r18, 0x01	; 1
     644:	80 40       	sbci	r24, 0x00	; 0
     646:	90 40       	sbci	r25, 0x00	; 0
     648:	e1 f7       	brne	.-8      	; 0x642 <ROOM2+0x4a>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <ROOM2+0x54>
     64c:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led3);
     64e:	83 e3       	ldi	r24, 0x33	; 51
     650:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
     654:	2f ef       	ldi	r18, 0xFF	; 255
     656:	80 e7       	ldi	r24, 0x70	; 112
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	21 50       	subi	r18, 0x01	; 1
     65c:	80 40       	sbci	r24, 0x00	; 0
     65e:	90 40       	sbci	r25, 0x00	; 0
     660:	e1 f7       	brne	.-8      	; 0x65a <ROOM2+0x62>
     662:	00 c0       	rjmp	.+0      	; 0x664 <ROOM2+0x6c>
     664:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
				if(Slave_Status == On)
     66c:	8f 34       	cpi	r24, 0x4F	; 79
     66e:	89 f5       	brne	.+98     	; 0x6d2 <ROOM2+0xda>
				{
					LCD_Clear();
     670:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Led is On!");
     674:	84 ec       	ldi	r24, 0xC4	; 196
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     67c:	61 2f       	mov	r22, r17
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     684:	8f ec       	ldi	r24, 0xCF	; 207
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     68c:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     690:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     692:	88 23       	and	r24, r24
     694:	d9 f3       	breq	.-10     	; 0x68c <ROOM2+0x94>
     696:	2f ef       	ldi	r18, 0xFF	; 255
     698:	81 ee       	ldi	r24, 0xE1	; 225
     69a:	94 e0       	ldi	r25, 0x04	; 4
     69c:	21 50       	subi	r18, 0x01	; 1
     69e:	80 40       	sbci	r24, 0x00	; 0
     6a0:	90 40       	sbci	r25, 0x00	; 0
     6a2:	e1 f7       	brne	.-8      	; 0x69c <ROOM2+0xa4>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <ROOM2+0xae>
     6a6:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     6a8:	c1 33       	cpi	r28, 0x31	; 49
     6aa:	19 f0       	breq	.+6      	; 0x6b2 <ROOM2+0xba>
     6ac:	c2 33       	cpi	r28, 0x32	; 50
     6ae:	59 f0       	breq	.+22     	; 0x6c6 <ROOM2+0xce>
     6b0:	44 c0       	rjmp	.+136    	; 0x73a <ROOM2+0x142>
							{
								case '1':
								SPI_TxRx(Led3_TurnOff);
     6b2:	83 e2       	ldi	r24, 0x23	; 35
     6b4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room2 is Off now!");
     6b8:	80 ee       	ldi	r24, 0xE0	; 224
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     6c0:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     6c4:	e3 cf       	rjmp	.-58     	; 0x68c <ROOM2+0x94>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     6c6:	89 e9       	ldi	r24, 0x99	; 153
     6c8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								MainMenu();
     6cc:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     6d0:	34 c0       	rjmp	.+104    	; 0x73a <ROOM2+0x142>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     6d2:	86 34       	cpi	r24, 0x46	; 70
     6d4:	89 f5       	brne	.+98     	; 0x738 <ROOM2+0x140>
				{
					LCD_Clear();
     6d6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Led is Off!");
     6da:	89 ef       	ldi	r24, 0xF9	; 249
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     6e2:	61 2f       	mov	r22, r17
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     6ea:	85 e0       	ldi	r24, 0x05	; 5
     6ec:	92 e0       	ldi	r25, 0x02	; 2
     6ee:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     6f2:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     6f6:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     6f8:	88 23       	and	r24, r24
     6fa:	d9 f3       	breq	.-10     	; 0x6f2 <ROOM2+0xfa>
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	81 ee       	ldi	r24, 0xE1	; 225
     700:	94 e0       	ldi	r25, 0x04	; 4
     702:	21 50       	subi	r18, 0x01	; 1
     704:	80 40       	sbci	r24, 0x00	; 0
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	e1 f7       	brne	.-8      	; 0x702 <ROOM2+0x10a>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <ROOM2+0x114>
     70c:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     70e:	c1 33       	cpi	r28, 0x31	; 49
     710:	19 f0       	breq	.+6      	; 0x718 <ROOM2+0x120>
     712:	c2 33       	cpi	r28, 0x32	; 50
     714:	59 f0       	breq	.+22     	; 0x72c <ROOM2+0x134>
     716:	11 c0       	rjmp	.+34     	; 0x73a <ROOM2+0x142>
							{
								case '1':
								SPI_TxRx(Led3_TurnOn);
     718:	83 e1       	ldi	r24, 0x13	; 19
     71a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room2 is on now!");
     71e:	85 e1       	ldi	r24, 0x15	; 21
     720:	92 e0       	ldi	r25, 0x02	; 2
     722:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     726:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     72a:	e3 cf       	rjmp	.-58     	; 0x6f2 <ROOM2+0xfa>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     72c:	89 e9       	ldi	r24, 0x99	; 153
     72e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								MainMenu();
     732:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     736:	01 c0       	rjmp	.+2      	; 0x73a <ROOM2+0x142>
		{
			switch(Key)
			{
				case '1':
				LCD_Clear();
				Key = STD_Low;
     738:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     73a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				MainMenu();
     73e:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
				break;
     742:	1c c1       	rjmp	.+568    	; 0x97c <__stack+0x11d>
				
				
				case '2':
				LCD_Clear();
     744:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
     748:	2f ef       	ldi	r18, 0xFF	; 255
     74a:	80 e7       	ldi	r24, 0x70	; 112
     74c:	92 e0       	ldi	r25, 0x02	; 2
     74e:	21 50       	subi	r18, 0x01	; 1
     750:	80 40       	sbci	r24, 0x00	; 0
     752:	90 40       	sbci	r25, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <ROOM2+0x156>
     756:	00 c0       	rjmp	.+0      	; 0x758 <ROOM2+0x160>
     758:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led4);
     75a:	84 e3       	ldi	r24, 0x34	; 52
     75c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
     760:	2f ef       	ldi	r18, 0xFF	; 255
     762:	80 e7       	ldi	r24, 0x70	; 112
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	21 50       	subi	r18, 0x01	; 1
     768:	80 40       	sbci	r24, 0x00	; 0
     76a:	90 40       	sbci	r25, 0x00	; 0
     76c:	e1 f7       	brne	.-8      	; 0x766 <ROOM2+0x16e>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <ROOM2+0x178>
     770:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
				if(Slave_Status == On)
     778:	8f 34       	cpi	r24, 0x4F	; 79
     77a:	89 f5       	brne	.+98     	; 0x7de <ROOM2+0x1e6>
				{
					LCD_Clear();
     77c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Led is On!");
     780:	84 ec       	ldi	r24, 0xC4	; 196
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     788:	61 2f       	mov	r22, r17
     78a:	82 e0       	ldi	r24, 0x02	; 2
     78c:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     790:	8f ec       	ldi	r24, 0xCF	; 207
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     798:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     79c:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     79e:	88 23       	and	r24, r24
     7a0:	d9 f3       	breq	.-10     	; 0x798 <ROOM2+0x1a0>
     7a2:	2f ef       	ldi	r18, 0xFF	; 255
     7a4:	81 ee       	ldi	r24, 0xE1	; 225
     7a6:	94 e0       	ldi	r25, 0x04	; 4
     7a8:	21 50       	subi	r18, 0x01	; 1
     7aa:	80 40       	sbci	r24, 0x00	; 0
     7ac:	90 40       	sbci	r25, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <ROOM2+0x1b0>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <ROOM2+0x1ba>
     7b2:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     7b4:	c1 33       	cpi	r28, 0x31	; 49
     7b6:	19 f0       	breq	.+6      	; 0x7be <ROOM2+0x1c6>
     7b8:	c2 33       	cpi	r28, 0x32	; 50
     7ba:	59 f0       	breq	.+22     	; 0x7d2 <ROOM2+0x1da>
     7bc:	44 c0       	rjmp	.+136    	; 0x846 <ROOM2+0x24e>
							{
								case '1':
								SPI_TxRx(Led4_TurnOff);
     7be:	84 e2       	ldi	r24, 0x24	; 36
     7c0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room2 is Off now!");
     7c4:	8d e2       	ldi	r24, 0x2D	; 45
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     7cc:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     7d0:	e3 cf       	rjmp	.-58     	; 0x798 <ROOM2+0x1a0>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     7d2:	89 e9       	ldi	r24, 0x99	; 153
     7d4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								MainMenu();
     7d8:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     7dc:	34 c0       	rjmp	.+104    	; 0x846 <ROOM2+0x24e>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     7de:	86 34       	cpi	r24, 0x46	; 70
     7e0:	89 f5       	brne	.+98     	; 0x844 <ROOM2+0x24c>
				{
					LCD_Clear();
     7e2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Led is Off!");
     7e6:	89 ef       	ldi	r24, 0xF9	; 249
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     7ee:	61 2f       	mov	r22, r17
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     7fe:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     802:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     804:	88 23       	and	r24, r24
     806:	d9 f3       	breq	.-10     	; 0x7fe <ROOM2+0x206>
     808:	2f ef       	ldi	r18, 0xFF	; 255
     80a:	81 ee       	ldi	r24, 0xE1	; 225
     80c:	94 e0       	ldi	r25, 0x04	; 4
     80e:	21 50       	subi	r18, 0x01	; 1
     810:	80 40       	sbci	r24, 0x00	; 0
     812:	90 40       	sbci	r25, 0x00	; 0
     814:	e1 f7       	brne	.-8      	; 0x80e <ROOM2+0x216>
     816:	00 c0       	rjmp	.+0      	; 0x818 <ROOM2+0x220>
     818:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     81a:	c1 33       	cpi	r28, 0x31	; 49
     81c:	19 f0       	breq	.+6      	; 0x824 <ROOM2+0x22c>
     81e:	c2 33       	cpi	r28, 0x32	; 50
     820:	59 f0       	breq	.+22     	; 0x838 <ROOM2+0x240>
     822:	11 c0       	rjmp	.+34     	; 0x846 <ROOM2+0x24e>
							{
								case '1':
								SPI_TxRx(Led4_TurnOn);
     824:	84 e1       	ldi	r24, 0x14	; 20
     826:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room2 is on now!");
     82a:	86 e4       	ldi	r24, 0x46	; 70
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     832:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
								break;
     836:	e3 cf       	rjmp	.-58     	; 0x7fe <ROOM2+0x206>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     838:	89 e9       	ldi	r24, 0x99	; 153
     83a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Key = STD_Low;
								MainMenu();
     83e:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
								break;
     842:	dd cf       	rjmp	.-70     	; 0x7fe <ROOM2+0x206>
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     844:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     846:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				MainMenu();
     84a:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
				break;
     84e:	96 c0       	rjmp	.+300    	; 0x97c <__stack+0x11d>
				
				case '3':
				LCD_Clear();
     850:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
     854:	2f ef       	ldi	r18, 0xFF	; 255
     856:	80 e7       	ldi	r24, 0x70	; 112
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	21 50       	subi	r18, 0x01	; 1
     85c:	80 40       	sbci	r24, 0x00	; 0
     85e:	90 40       	sbci	r25, 0x00	; 0
     860:	e1 f7       	brne	.-8      	; 0x85a <ROOM2+0x262>
     862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
     864:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led5);
     866:	85 e3       	ldi	r24, 0x35	; 53
     868:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
     86c:	2f ef       	ldi	r18, 0xFF	; 255
     86e:	80 e7       	ldi	r24, 0x70	; 112
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	21 50       	subi	r18, 0x01	; 1
     874:	80 40       	sbci	r24, 0x00	; 0
     876:	90 40       	sbci	r25, 0x00	; 0
     878:	e1 f7       	brne	.-8      	; 0x872 <__stack+0x13>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <__stack+0x1d>
     87c:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
				if(Slave_Status == On)
     884:	8f 34       	cpi	r24, 0x4F	; 79
     886:	89 f5       	brne	.+98     	; 0x8ea <__stack+0x8b>
				{
					LCD_Clear();
     888:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Led is On!");
     88c:	84 ec       	ldi	r24, 0xC4	; 196
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     894:	61 2f       	mov	r22, r17
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     89c:	8f ec       	ldi	r24, 0xCF	; 207
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     8a4:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     8a8:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     8aa:	88 23       	and	r24, r24
     8ac:	d9 f3       	breq	.-10     	; 0x8a4 <__stack+0x45>
     8ae:	2f ef       	ldi	r18, 0xFF	; 255
     8b0:	81 ee       	ldi	r24, 0xE1	; 225
     8b2:	94 e0       	ldi	r25, 0x04	; 4
     8b4:	21 50       	subi	r18, 0x01	; 1
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <__stack+0x55>
     8bc:	00 c0       	rjmp	.+0      	; 0x8be <__stack+0x5f>
     8be:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     8c0:	c1 33       	cpi	r28, 0x31	; 49
     8c2:	19 f0       	breq	.+6      	; 0x8ca <__stack+0x6b>
     8c4:	c2 33       	cpi	r28, 0x32	; 50
     8c6:	59 f0       	breq	.+22     	; 0x8de <__stack+0x7f>
     8c8:	44 c0       	rjmp	.+136    	; 0x952 <__stack+0xf3>
							{
								case '1':
								SPI_TxRx(Led5_TurnOff);
     8ca:	85 e2       	ldi	r24, 0x25	; 37
     8cc:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp3,Room2 is Off now!");
     8d0:	8e e5       	ldi	r24, 0x5E	; 94
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     8d8:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     8dc:	e3 cf       	rjmp	.-58     	; 0x8a4 <__stack+0x45>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     8de:	89 e9       	ldi	r24, 0x99	; 153
     8e0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								MainMenu();
     8e4:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     8e8:	34 c0       	rjmp	.+104    	; 0x952 <__stack+0xf3>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     8ea:	86 34       	cpi	r24, 0x46	; 70
     8ec:	89 f5       	brne	.+98     	; 0x950 <__stack+0xf1>
				{
					LCD_Clear();
     8ee:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Led is Off!");
     8f2:	89 ef       	ldi	r24, 0xF9	; 249
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     8fa:	61 2f       	mov	r22, r17
     8fc:	82 e0       	ldi	r24, 0x02	; 2
     8fe:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     902:	85 e0       	ldi	r24, 0x05	; 5
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     90a:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     90e:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     910:	88 23       	and	r24, r24
     912:	d9 f3       	breq	.-10     	; 0x90a <__stack+0xab>
     914:	2f ef       	ldi	r18, 0xFF	; 255
     916:	81 ee       	ldi	r24, 0xE1	; 225
     918:	94 e0       	ldi	r25, 0x04	; 4
     91a:	21 50       	subi	r18, 0x01	; 1
     91c:	80 40       	sbci	r24, 0x00	; 0
     91e:	90 40       	sbci	r25, 0x00	; 0
     920:	e1 f7       	brne	.-8      	; 0x91a <__stack+0xbb>
     922:	00 c0       	rjmp	.+0      	; 0x924 <__stack+0xc5>
     924:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     926:	c1 33       	cpi	r28, 0x31	; 49
     928:	19 f0       	breq	.+6      	; 0x930 <__stack+0xd1>
     92a:	c2 33       	cpi	r28, 0x32	; 50
     92c:	59 f0       	breq	.+22     	; 0x944 <__stack+0xe5>
     92e:	11 c0       	rjmp	.+34     	; 0x952 <__stack+0xf3>
							{
								case '1':
								SPI_TxRx(Led5_TurnOn);
     930:	85 e1       	ldi	r24, 0x15	; 21
     932:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp3,Room2 is on now!");
     936:	87 e7       	ldi	r24, 0x77	; 119
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     93e:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
								break;
     942:	e3 cf       	rjmp	.-58     	; 0x90a <__stack+0xab>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     944:	89 e9       	ldi	r24, 0x99	; 153
     946:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Key = STD_Low;
								MainMenu();
     94a:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
								break;
     94e:	dd cf       	rjmp	.-70     	; 0x90a <__stack+0xab>
				MainMenu();
				break;
				
				case '3':
				LCD_Clear();
				Key = STD_Low;
     950:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     952:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				MainMenu();
     956:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
				break;
     95a:	10 c0       	rjmp	.+32     	; 0x97c <__stack+0x11d>
				
				default:
				LCD_Clear();
     95c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				LCD_String("Wrong choice!");
     960:	8f e8       	ldi	r24, 0x8F	; 143
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     968:	2f ef       	ldi	r18, 0xFF	; 255
     96a:	89 e6       	ldi	r24, 0x69	; 105
     96c:	98 e1       	ldi	r25, 0x18	; 24
     96e:	21 50       	subi	r18, 0x01	; 1
     970:	80 40       	sbci	r24, 0x00	; 0
     972:	90 40       	sbci	r25, 0x00	; 0
     974:	e1 f7       	brne	.-8      	; 0x96e <__stack+0x10f>
     976:	00 c0       	rjmp	.+0      	; 0x978 <__stack+0x119>
     978:	00 00       	nop
				_delay_ms(500);
				Key = STD_Low;
				goto Trylamp;
     97a:	43 ce       	rjmp	.-890    	; 0x602 <ROOM2+0xa>
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
	LCD_String("3:Lamp3");
	
	while(Key == STD_Low)
     97c:	cc 23       	and	r28, r28
     97e:	09 f4       	brne	.+2      	; 0x982 <__stack+0x123>
     980:	4e ce       	rjmp	.-868    	; 0x61e <ROOM2+0x26>
				goto Trylamp;
				break;
			}
		}
	}
}
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	08 95       	ret

0000098a <MainMenu>:
}

void MainMenu(void) //Main App Menu
{
	u8 PressKey = STD_Low;
	LCD_Clear();
     98a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
	LCD_String("1:ROOM1 2:ROOM2");
     98e:	8d e9       	ldi	r24, 0x9D	; 157
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
	LCD_SetPos(2,0);
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
	LCD_String("3:Main DOOR");
     99e:	8d ea       	ldi	r24, 0xAD	; 173
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
	
	while(PressKey == STD_Low){
		PressKey = GetKey(); //Wait for user Input
     9a6:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
		if(PressKey != STD_Low)
     9aa:	88 23       	and	r24, r24
     9ac:	e1 f3       	breq	.-8      	; 0x9a6 <MainMenu+0x1c>
		{
			switch(PressKey)
     9ae:	82 33       	cpi	r24, 0x32	; 50
     9b0:	49 f0       	breq	.+18     	; 0x9c4 <MainMenu+0x3a>
     9b2:	83 33       	cpi	r24, 0x33	; 51
     9b4:	61 f0       	breq	.+24     	; 0x9ce <MainMenu+0x44>
     9b6:	81 33       	cpi	r24, 0x31	; 49
     9b8:	79 f4       	brne	.+30     	; 0x9d8 <MainMenu+0x4e>
			{
				case '1':
				LCD_Clear();
     9ba:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				PressKey = STD_Low;
				ROOM1();
     9be:	0e 94 f6 05 	call	0xbec	; 0xbec <ROOM1>
				break;
     9c2:	f1 cf       	rjmp	.-30     	; 0x9a6 <MainMenu+0x1c>
				
				case '2':
				LCD_Clear();
     9c4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				PressKey = STD_Low;
				ROOM2();
     9c8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <ROOM2>
				break;
     9cc:	ec cf       	rjmp	.-40     	; 0x9a6 <MainMenu+0x1c>
				
				case '3':
				LCD_Clear();
     9ce:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				PressKey = STD_Low;
				Door();
     9d2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <Door>
				break;
     9d6:	e7 cf       	rjmp	.-50     	; 0x9a6 <MainMenu+0x1c>
				
				default:
				LCD_Clear();
     9d8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				LCD_String("Wrong Choice!");
     9dc:	89 eb       	ldi	r24, 0xB9	; 185
     9de:	92 e0       	ldi	r25, 0x02	; 2
     9e0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     9e4:	2f ef       	ldi	r18, 0xFF	; 255
     9e6:	89 e6       	ldi	r24, 0x69	; 105
     9e8:	98 e1       	ldi	r25, 0x18	; 24
     9ea:	21 50       	subi	r18, 0x01	; 1
     9ec:	80 40       	sbci	r24, 0x00	; 0
     9ee:	90 40       	sbci	r25, 0x00	; 0
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <MainMenu+0x60>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <MainMenu+0x6a>
     9f4:	00 00       	nop
				_delay_ms(500);
				LCD_Clear();
     9f6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
     9fa:	08 95       	ret

000009fc <Door>:
}


void Door(void)
{
	LCD_Clear();
     9fc:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
	u8 Door_Status = STD_Low;
	u8 Key = STD_Low;
	Door_Status = EEPROM_ReadByte(DOOR_Status_Loc,0);
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	84 ea       	ldi	r24, 0xA4	; 164
     a04:	0e 94 3a 09 	call	0x1274	; 0x1274 <EEPROM_ReadByte>
     a08:	2f ef       	ldi	r18, 0xFF	; 255
     a0a:	30 e7       	ldi	r19, 0x70	; 112
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	21 50       	subi	r18, 0x01	; 1
     a10:	30 40       	sbci	r19, 0x00	; 0
     a12:	90 40       	sbci	r25, 0x00	; 0
     a14:	e1 f7       	brne	.-8      	; 0xa0e <Door+0x12>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <Door+0x1c>
     a18:	00 00       	nop
	_delay_ms(50);
	if(Door_Status == 0xFF)
     a1a:	8f 3f       	cpi	r24, 0xFF	; 255
     a1c:	09 f0       	breq	.+2      	; 0xa20 <Door+0x24>
     a1e:	73 c0       	rjmp	.+230    	; 0xb06 <Door+0x10a>
	{
		LCD_Clear();
     a20:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
		LCD_String("Door is closed!");
     a24:	87 ec       	ldi	r24, 0xC7	; 199
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     a2c:	2f ef       	ldi	r18, 0xFF	; 255
     a2e:	3f e0       	ldi	r19, 0x0F	; 15
     a30:	87 e2       	ldi	r24, 0x27	; 39
     a32:	21 50       	subi	r18, 0x01	; 1
     a34:	30 40       	sbci	r19, 0x00	; 0
     a36:	80 40       	sbci	r24, 0x00	; 0
     a38:	e1 f7       	brne	.-8      	; 0xa32 <Door+0x36>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <Door+0x40>
     a3c:	00 00       	nop
		_delay_ms(800);
		Tryagain1:LCD_Clear();
     a3e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
		LCD_String("press 1 open");
     a42:	87 ed       	ldi	r24, 0xD7	; 215
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
		LCD_SetPos(2,0);
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
		LCD_String("press 0 return");
     a52:	84 ee       	ldi	r24, 0xE4	; 228
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     a5a:	9f ef       	ldi	r25, 0xFF	; 255
     a5c:	29 ef       	ldi	r18, 0xF9	; 249
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	91 50       	subi	r25, 0x01	; 1
     a62:	20 40       	sbci	r18, 0x00	; 0
     a64:	30 40       	sbci	r19, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <Door+0x64>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <Door+0x6e>
     a6a:	00 00       	nop
		_delay_ms(20);
		
		while(Key == STD_Low)
		{
			Key = GetKey();
     a6c:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
			if (Key != STD_Low)
     a70:	88 23       	and	r24, r24
     a72:	e1 f3       	breq	.-8      	; 0xa6c <Door+0x70>
			{
				switch(Key)
     a74:	80 33       	cpi	r24, 0x30	; 48
     a76:	19 f1       	breq	.+70     	; 0xabe <Door+0xc2>
     a78:	81 33       	cpi	r24, 0x31	; 49
     a7a:	a9 f5       	brne	.+106    	; 0xae6 <Door+0xea>
				{
					case '1':
					LCD_Clear();
     a7c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("opening door");
     a80:	83 ef       	ldi	r24, 0xF3	; 243
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					Bluetooth_TransmaitString("\nMain door opened!");
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
					ServoMotor(90);
     a90:	8a e5       	ldi	r24, 0x5A	; 90
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <ServoMotor>
					EEPROM_WriteByte(DOOR_Status_Loc,0,'1');
     a98:	41 e3       	ldi	r20, 0x31	; 49
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	84 ea       	ldi	r24, 0xA4	; 164
     a9e:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_WriteByte>
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	9d e2       	ldi	r25, 0x2D	; 45
     aa6:	22 e2       	ldi	r18, 0x22	; 34
     aa8:	81 50       	subi	r24, 0x01	; 1
     aaa:	90 40       	sbci	r25, 0x00	; 0
     aac:	20 40       	sbci	r18, 0x00	; 0
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <Door+0xac>
     ab0:	00 c0       	rjmp	.+0      	; 0xab2 <Door+0xb6>
     ab2:	00 00       	nop
					_delay_ms(700);
					Key = STD_Low;
					LCD_Clear();
     ab4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					MainMenu();
     ab8:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
					break;
     abc:	d7 cf       	rjmp	.-82     	; 0xa6c <Door+0x70>
					
					case '0':
					LCD_Clear();
     abe:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Return to menu!");
     ac2:	83 e1       	ldi	r24, 0x13	; 19
     ac4:	93 e0       	ldi	r25, 0x03	; 3
     ac6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     aca:	3f ef       	ldi	r19, 0xFF	; 255
     acc:	87 e8       	ldi	r24, 0x87	; 135
     ace:	93 e1       	ldi	r25, 0x13	; 19
     ad0:	31 50       	subi	r19, 0x01	; 1
     ad2:	80 40       	sbci	r24, 0x00	; 0
     ad4:	90 40       	sbci	r25, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <Door+0xd4>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <Door+0xde>
     ada:	00 00       	nop
					_delay_ms(400);
					Key = STD_Low;
					LCD_Clear();
     adc:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					MainMenu();
     ae0:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
					break;
     ae4:	c3 cf       	rjmp	.-122    	; 0xa6c <Door+0x70>
					
					default:
					LCD_Clear();
     ae6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Wrong choice!");
     aea:	8f e8       	ldi	r24, 0x8F	; 143
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     af2:	2f ef       	ldi	r18, 0xFF	; 255
     af4:	39 e6       	ldi	r19, 0x69	; 105
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	21 50       	subi	r18, 0x01	; 1
     afa:	30 40       	sbci	r19, 0x00	; 0
     afc:	80 40       	sbci	r24, 0x00	; 0
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <Door+0xfc>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <Door+0x106>
     b02:	00 00       	nop
					_delay_ms(500);
					Key = STD_Low;
					goto Tryagain1;
     b04:	9c cf       	rjmp	.-200    	; 0xa3e <Door+0x42>
			}
		}
	}
	else
	{
		LCD_Clear();
     b06:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
		LCD_String("Door is opened!");
     b0a:	83 e2       	ldi	r24, 0x23	; 35
     b0c:	93 e0       	ldi	r25, 0x03	; 3
     b0e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     b12:	9f ef       	ldi	r25, 0xFF	; 255
     b14:	2f e0       	ldi	r18, 0x0F	; 15
     b16:	37 e2       	ldi	r19, 0x27	; 39
     b18:	91 50       	subi	r25, 0x01	; 1
     b1a:	20 40       	sbci	r18, 0x00	; 0
     b1c:	30 40       	sbci	r19, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <Door+0x11c>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <Door+0x126>
     b22:	00 00       	nop
		_delay_ms(800);
		Tryagain2:LCD_Clear();
     b24:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
		LCD_String("press 1 close");
     b28:	83 e3       	ldi	r24, 0x33	; 51
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
		LCD_SetPos(2,0);
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
		LCD_String("press 0 return");
     b38:	84 ee       	ldi	r24, 0xE4	; 228
     b3a:	92 e0       	ldi	r25, 0x02	; 2
     b3c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	99 ef       	ldi	r25, 0xF9	; 249
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	81 50       	subi	r24, 0x01	; 1
     b48:	90 40       	sbci	r25, 0x00	; 0
     b4a:	20 40       	sbci	r18, 0x00	; 0
     b4c:	e1 f7       	brne	.-8      	; 0xb46 <Door+0x14a>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <Door+0x154>
     b50:	00 00       	nop
		_delay_ms(20);
		
		while(Key == STD_Low)
		{
			Key = GetKey();
     b52:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
			if (Key != STD_Low)
     b56:	88 23       	and	r24, r24
     b58:	e1 f3       	breq	.-8      	; 0xb52 <Door+0x156>
			{
				switch(Key)
     b5a:	80 33       	cpi	r24, 0x30	; 48
     b5c:	19 f1       	breq	.+70     	; 0xba4 <Door+0x1a8>
     b5e:	81 33       	cpi	r24, 0x31	; 49
     b60:	a9 f5       	brne	.+106    	; 0xbcc <Door+0x1d0>
				{
					case '1':
					LCD_Clear();
     b62:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("closing door");
     b66:	81 e4       	ldi	r24, 0x41	; 65
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					Bluetooth_TransmaitString("\nMain door closed!");
     b6e:	8e e4       	ldi	r24, 0x4E	; 78
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
					ServoMotor(0);
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <ServoMotor>
					EEPROM_WriteByte(DOOR_Status_Loc,0,0xFF);
     b7e:	4f ef       	ldi	r20, 0xFF	; 255
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	84 ea       	ldi	r24, 0xA4	; 164
     b84:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_WriteByte>
     b88:	3f ef       	ldi	r19, 0xFF	; 255
     b8a:	8d e2       	ldi	r24, 0x2D	; 45
     b8c:	92 e2       	ldi	r25, 0x22	; 34
     b8e:	31 50       	subi	r19, 0x01	; 1
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <Door+0x192>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <Door+0x19c>
     b98:	00 00       	nop
					_delay_ms(700);
					Key = STD_Low;
					LCD_Clear();
     b9a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					MainMenu();
     b9e:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
					break;
     ba2:	d7 cf       	rjmp	.-82     	; 0xb52 <Door+0x156>
					
					case '0':
					LCD_Clear();
     ba4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Return to menu!");
     ba8:	83 e1       	ldi	r24, 0x13	; 19
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     bb0:	2f ef       	ldi	r18, 0xFF	; 255
     bb2:	37 e8       	ldi	r19, 0x87	; 135
     bb4:	83 e1       	ldi	r24, 0x13	; 19
     bb6:	21 50       	subi	r18, 0x01	; 1
     bb8:	30 40       	sbci	r19, 0x00	; 0
     bba:	80 40       	sbci	r24, 0x00	; 0
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <Door+0x1ba>
     bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <Door+0x1c4>
     bc0:	00 00       	nop
					_delay_ms(400);
					Key = STD_Low;
					LCD_Clear();
     bc2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					MainMenu();
     bc6:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
					break;
     bca:	c3 cf       	rjmp	.-122    	; 0xb52 <Door+0x156>
					
					default:
					LCD_Clear();
     bcc:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Wrong choice!");
     bd0:	8f e8       	ldi	r24, 0x8F	; 143
     bd2:	92 e0       	ldi	r25, 0x02	; 2
     bd4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	29 e6       	ldi	r18, 0x69	; 105
     bdc:	38 e1       	ldi	r19, 0x18	; 24
     bde:	91 50       	subi	r25, 0x01	; 1
     be0:	20 40       	sbci	r18, 0x00	; 0
     be2:	30 40       	sbci	r19, 0x00	; 0
     be4:	e1 f7       	brne	.-8      	; 0xbde <Door+0x1e2>
     be6:	00 c0       	rjmp	.+0      	; 0xbe8 <Door+0x1ec>
     be8:	00 00       	nop
					_delay_ms(500);
					Key = STD_Low;
					goto Tryagain2;
     bea:	9c cf       	rjmp	.-200    	; 0xb24 <Door+0x128>

00000bec <ROOM1>:
		//Do nothing
	}
}

void ROOM1(void)
{
     bec:	bf 92       	push	r11
     bee:	cf 92       	push	r12
     bf0:	df 92       	push	r13
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
     bfe:	d0 e0       	ldi	r29, 0x00	; 0
     c00:	12 e0       	ldi	r17, 0x02	; 2
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     c02:	f1 2e       	mov	r15, r17
							_delay_ms(100);
							switch(Key)
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
     c04:	0d 2f       	mov	r16, r29
     c06:	ed 2e       	mov	r14, r29
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     c08:	d1 2e       	mov	r13, r17

void ROOM1(void)
{
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
     c0a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
	LCD_String("1:Lamp1 2:Lamp2");
     c0e:	8c ea       	ldi	r24, 0xAC	; 172
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
	LCD_SetPos(2,0);
     c16:	6d 2f       	mov	r22, r29
     c18:	81 2f       	mov	r24, r17
     c1a:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
	LCD_String("3:AirConditioner");
     c1e:	81 e6       	ldi	r24, 0x61	; 97
     c20:	93 e0       	ldi	r25, 0x03	; 3
     c22:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
	
	while(Key == STD_Low)
	{
		Key = GetKey();
     c26:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
		if (Key != STD_Low)
     c2a:	88 23       	and	r24, r24
     c2c:	e1 f3       	breq	.-8      	; 0xc26 <ROOM1+0x3a>
		{
			switch(Key)
     c2e:	82 33       	cpi	r24, 0x32	; 50
     c30:	09 f4       	brne	.+2      	; 0xc34 <ROOM1+0x48>
     c32:	8c c0       	rjmp	.+280    	; 0xd4c <ROOM1+0x160>
     c34:	83 33       	cpi	r24, 0x33	; 51
     c36:	09 f4       	brne	.+2      	; 0xc3a <ROOM1+0x4e>
     c38:	0f c1       	rjmp	.+542    	; 0xe58 <ROOM1+0x26c>
     c3a:	81 33       	cpi	r24, 0x31	; 49
     c3c:	09 f0       	breq	.+2      	; 0xc40 <ROOM1+0x54>
     c3e:	e5 c1       	rjmp	.+970    	; 0x100a <ROOM1+0x41e>
			{
				case '1':
				LCD_Clear();
     c40:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
     c44:	2f ef       	ldi	r18, 0xFF	; 255
     c46:	80 e7       	ldi	r24, 0x70	; 112
     c48:	92 e0       	ldi	r25, 0x02	; 2
     c4a:	21 50       	subi	r18, 0x01	; 1
     c4c:	80 40       	sbci	r24, 0x00	; 0
     c4e:	90 40       	sbci	r25, 0x00	; 0
     c50:	e1 f7       	brne	.-8      	; 0xc4a <ROOM1+0x5e>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <ROOM1+0x68>
     c54:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led1);
     c56:	81 e3       	ldi	r24, 0x31	; 49
     c58:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
     c5c:	2f ef       	ldi	r18, 0xFF	; 255
     c5e:	80 e7       	ldi	r24, 0x70	; 112
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <ROOM1+0x76>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <ROOM1+0x80>
     c6c:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
				if(Slave_Status == On)
     c74:	8f 34       	cpi	r24, 0x4F	; 79
     c76:	89 f5       	brne	.+98     	; 0xcda <ROOM1+0xee>
				{
					LCD_Clear();
     c78:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Led is On!");
     c7c:	84 ec       	ldi	r24, 0xC4	; 196
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     c84:	60 2f       	mov	r22, r16
     c86:	8f 2d       	mov	r24, r15
     c88:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     c8c:	8f ec       	ldi	r24, 0xCF	; 207
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     c94:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     c98:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     c9a:	88 23       	and	r24, r24
     c9c:	d9 f3       	breq	.-10     	; 0xc94 <ROOM1+0xa8>
     c9e:	2f ef       	ldi	r18, 0xFF	; 255
     ca0:	81 ee       	ldi	r24, 0xE1	; 225
     ca2:	94 e0       	ldi	r25, 0x04	; 4
     ca4:	21 50       	subi	r18, 0x01	; 1
     ca6:	80 40       	sbci	r24, 0x00	; 0
     ca8:	90 40       	sbci	r25, 0x00	; 0
     caa:	e1 f7       	brne	.-8      	; 0xca4 <ROOM1+0xb8>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <ROOM1+0xc2>
     cae:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     cb0:	c1 33       	cpi	r28, 0x31	; 49
     cb2:	19 f0       	breq	.+6      	; 0xcba <ROOM1+0xce>
     cb4:	c2 33       	cpi	r28, 0x32	; 50
     cb6:	59 f0       	breq	.+22     	; 0xcce <ROOM1+0xe2>
     cb8:	44 c0       	rjmp	.+136    	; 0xd42 <ROOM1+0x156>
							{
								case '1':
								SPI_TxRx(Led1_TurnOff);
     cba:	81 e2       	ldi	r24, 0x21	; 33
     cbc:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room1 is Off now!");
     cc0:	82 e7       	ldi	r24, 0x72	; 114
     cc2:	93 e0       	ldi	r25, 0x03	; 3
     cc4:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     cc8:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     ccc:	e3 cf       	rjmp	.-58     	; 0xc94 <ROOM1+0xa8>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     cce:	89 e9       	ldi	r24, 0x99	; 153
     cd0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								MainMenu();
     cd4:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     cd8:	34 c0       	rjmp	.+104    	; 0xd42 <ROOM1+0x156>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     cda:	86 34       	cpi	r24, 0x46	; 70
     cdc:	89 f5       	brne	.+98     	; 0xd40 <ROOM1+0x154>
				{
					LCD_Clear();
     cde:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Led is Off!");
     ce2:	89 ef       	ldi	r24, 0xF9	; 249
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     cea:	60 2f       	mov	r22, r16
     cec:	8f 2d       	mov	r24, r15
     cee:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     cf2:	85 e0       	ldi	r24, 0x05	; 5
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     cfa:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     cfe:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     d00:	88 23       	and	r24, r24
     d02:	d9 f3       	breq	.-10     	; 0xcfa <ROOM1+0x10e>
     d04:	2f ef       	ldi	r18, 0xFF	; 255
     d06:	81 ee       	ldi	r24, 0xE1	; 225
     d08:	94 e0       	ldi	r25, 0x04	; 4
     d0a:	21 50       	subi	r18, 0x01	; 1
     d0c:	80 40       	sbci	r24, 0x00	; 0
     d0e:	90 40       	sbci	r25, 0x00	; 0
     d10:	e1 f7       	brne	.-8      	; 0xd0a <ROOM1+0x11e>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <ROOM1+0x128>
     d14:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     d16:	c1 33       	cpi	r28, 0x31	; 49
     d18:	19 f0       	breq	.+6      	; 0xd20 <ROOM1+0x134>
     d1a:	c2 33       	cpi	r28, 0x32	; 50
     d1c:	59 f0       	breq	.+22     	; 0xd34 <ROOM1+0x148>
     d1e:	11 c0       	rjmp	.+34     	; 0xd42 <ROOM1+0x156>
							{
								case '1':
								SPI_TxRx(Led1_TurnOn);
     d20:	81 e1       	ldi	r24, 0x11	; 17
     d22:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room1 is on now!");
     d26:	8b e8       	ldi	r24, 0x8B	; 139
     d28:	93 e0       	ldi	r25, 0x03	; 3
     d2a:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     d2e:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     d32:	e3 cf       	rjmp	.-58     	; 0xcfa <ROOM1+0x10e>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     d34:	89 e9       	ldi	r24, 0x99	; 153
     d36:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								MainMenu();
     d3a:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <ROOM1+0x156>
		{
			switch(Key)
			{
				case '1':
				LCD_Clear();
				Key = STD_Low;
     d40:	c0 2f       	mov	r28, r16
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     d42:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				MainMenu();
     d46:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
				break;
     d4a:	6f c1       	rjmp	.+734    	; 0x102a <ROOM1+0x43e>
				
				
				case '2':
				LCD_Clear();
     d4c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
     d50:	2f ef       	ldi	r18, 0xFF	; 255
     d52:	80 e7       	ldi	r24, 0x70	; 112
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	21 50       	subi	r18, 0x01	; 1
     d58:	80 40       	sbci	r24, 0x00	; 0
     d5a:	90 40       	sbci	r25, 0x00	; 0
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <ROOM1+0x16a>
     d5e:	00 c0       	rjmp	.+0      	; 0xd60 <ROOM1+0x174>
     d60:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led2);
     d62:	82 e3       	ldi	r24, 0x32	; 50
     d64:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
     d68:	2f ef       	ldi	r18, 0xFF	; 255
     d6a:	80 e7       	ldi	r24, 0x70	; 112
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	21 50       	subi	r18, 0x01	; 1
     d70:	80 40       	sbci	r24, 0x00	; 0
     d72:	90 40       	sbci	r25, 0x00	; 0
     d74:	e1 f7       	brne	.-8      	; 0xd6e <ROOM1+0x182>
     d76:	00 c0       	rjmp	.+0      	; 0xd78 <ROOM1+0x18c>
     d78:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     d7a:	81 e0       	ldi	r24, 0x01	; 1
     d7c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
				if(Slave_Status == On)
     d80:	8f 34       	cpi	r24, 0x4F	; 79
     d82:	89 f5       	brne	.+98     	; 0xde6 <ROOM1+0x1fa>
				{
					LCD_Clear();
     d84:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Led is On!");
     d88:	84 ec       	ldi	r24, 0xC4	; 196
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     d90:	60 2f       	mov	r22, r16
     d92:	8f 2d       	mov	r24, r15
     d94:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     d98:	8f ec       	ldi	r24, 0xCF	; 207
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     da0:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     da4:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     da6:	88 23       	and	r24, r24
     da8:	d9 f3       	breq	.-10     	; 0xda0 <ROOM1+0x1b4>
     daa:	2f ef       	ldi	r18, 0xFF	; 255
     dac:	81 ee       	ldi	r24, 0xE1	; 225
     dae:	94 e0       	ldi	r25, 0x04	; 4
     db0:	21 50       	subi	r18, 0x01	; 1
     db2:	80 40       	sbci	r24, 0x00	; 0
     db4:	90 40       	sbci	r25, 0x00	; 0
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <ROOM1+0x1c4>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <ROOM1+0x1ce>
     dba:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     dbc:	c1 33       	cpi	r28, 0x31	; 49
     dbe:	19 f0       	breq	.+6      	; 0xdc6 <ROOM1+0x1da>
     dc0:	c2 33       	cpi	r28, 0x32	; 50
     dc2:	59 f0       	breq	.+22     	; 0xdda <ROOM1+0x1ee>
     dc4:	44 c0       	rjmp	.+136    	; 0xe4e <ROOM1+0x262>
							{
								case '1':
								SPI_TxRx(Led2_TurnOff);
     dc6:	82 e2       	ldi	r24, 0x22	; 34
     dc8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room1 is Off now!");
     dcc:	83 ea       	ldi	r24, 0xA3	; 163
     dce:	93 e0       	ldi	r25, 0x03	; 3
     dd0:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     dd4:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     dd8:	e3 cf       	rjmp	.-58     	; 0xda0 <ROOM1+0x1b4>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     dda:	89 e9       	ldi	r24, 0x99	; 153
     ddc:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								MainMenu();
     de0:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     de4:	34 c0       	rjmp	.+104    	; 0xe4e <ROOM1+0x262>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     de6:	86 34       	cpi	r24, 0x46	; 70
     de8:	89 f5       	brne	.+98     	; 0xe4c <ROOM1+0x260>
				{
					LCD_Clear();
     dea:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Led is Off!");
     dee:	89 ef       	ldi	r24, 0xF9	; 249
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     df6:	60 2f       	mov	r22, r16
     df8:	8f 2d       	mov	r24, r15
     dfa:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     dfe:	85 e0       	ldi	r24, 0x05	; 5
     e00:	92 e0       	ldi	r25, 0x02	; 2
     e02:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     e06:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     e0a:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     e0c:	88 23       	and	r24, r24
     e0e:	d9 f3       	breq	.-10     	; 0xe06 <ROOM1+0x21a>
     e10:	2f ef       	ldi	r18, 0xFF	; 255
     e12:	81 ee       	ldi	r24, 0xE1	; 225
     e14:	94 e0       	ldi	r25, 0x04	; 4
     e16:	21 50       	subi	r18, 0x01	; 1
     e18:	80 40       	sbci	r24, 0x00	; 0
     e1a:	90 40       	sbci	r25, 0x00	; 0
     e1c:	e1 f7       	brne	.-8      	; 0xe16 <ROOM1+0x22a>
     e1e:	00 c0       	rjmp	.+0      	; 0xe20 <ROOM1+0x234>
     e20:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     e22:	c1 33       	cpi	r28, 0x31	; 49
     e24:	19 f0       	breq	.+6      	; 0xe2c <ROOM1+0x240>
     e26:	c2 33       	cpi	r28, 0x32	; 50
     e28:	59 f0       	breq	.+22     	; 0xe40 <ROOM1+0x254>
     e2a:	11 c0       	rjmp	.+34     	; 0xe4e <ROOM1+0x262>
							{
								case '1':
								SPI_TxRx(Led2_TurnOn);
     e2c:	82 e1       	ldi	r24, 0x12	; 18
     e2e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room1 is on now!");
     e32:	8c eb       	ldi	r24, 0xBC	; 188
     e34:	93 e0       	ldi	r25, 0x03	; 3
     e36:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     e3a:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
								break;
     e3e:	e3 cf       	rjmp	.-58     	; 0xe06 <ROOM1+0x21a>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     e40:	89 e9       	ldi	r24, 0x99	; 153
     e42:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Key = STD_Low;
								MainMenu();
     e46:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
								break;
     e4a:	dd cf       	rjmp	.-70     	; 0xe06 <ROOM1+0x21a>
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     e4c:	c0 2f       	mov	r28, r16
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     e4e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				MainMenu();
     e52:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
				break;
     e56:	e9 c0       	rjmp	.+466    	; 0x102a <ROOM1+0x43e>
				
				case '3':
				LCD_Clear();
     e58:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
     e5c:	2f ef       	ldi	r18, 0xFF	; 255
     e5e:	80 e7       	ldi	r24, 0x70	; 112
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	21 50       	subi	r18, 0x01	; 1
     e64:	80 40       	sbci	r24, 0x00	; 0
     e66:	90 40       	sbci	r25, 0x00	; 0
     e68:	e1 f7       	brne	.-8      	; 0xe62 <ROOM1+0x276>
     e6a:	00 c0       	rjmp	.+0      	; 0xe6c <ROOM1+0x280>
     e6c:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Air_Cond);
     e6e:	86 e3       	ldi	r24, 0x36	; 54
     e70:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
     e74:	2f ef       	ldi	r18, 0xFF	; 255
     e76:	80 e7       	ldi	r24, 0x70	; 112
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	21 50       	subi	r18, 0x01	; 1
     e7c:	80 40       	sbci	r24, 0x00	; 0
     e7e:	90 40       	sbci	r25, 0x00	; 0
     e80:	e1 f7       	brne	.-8      	; 0xe7a <ROOM1+0x28e>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <ROOM1+0x298>
     e84:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
				if(Slave_Status == On)
     e8c:	8f 34       	cpi	r24, 0x4F	; 79
     e8e:	89 f5       	brne	.+98     	; 0xef2 <ROOM1+0x306>
				{
					LCD_Clear();
     e90:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Air-Cond is On!");
     e94:	84 ed       	ldi	r24, 0xD4	; 212
     e96:	93 e0       	ldi	r25, 0x03	; 3
     e98:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     e9c:	60 2f       	mov	r22, r16
     e9e:	8f 2d       	mov	r24, r15
     ea0:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     ea4:	8f ec       	ldi	r24, 0xCF	; 207
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     eac:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     eb0:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     eb2:	88 23       	and	r24, r24
     eb4:	d9 f3       	breq	.-10     	; 0xeac <ROOM1+0x2c0>
     eb6:	2f ef       	ldi	r18, 0xFF	; 255
     eb8:	81 ee       	ldi	r24, 0xE1	; 225
     eba:	94 e0       	ldi	r25, 0x04	; 4
     ebc:	21 50       	subi	r18, 0x01	; 1
     ebe:	80 40       	sbci	r24, 0x00	; 0
     ec0:	90 40       	sbci	r25, 0x00	; 0
     ec2:	e1 f7       	brne	.-8      	; 0xebc <ROOM1+0x2d0>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <ROOM1+0x2da>
     ec6:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     ec8:	c1 33       	cpi	r28, 0x31	; 49
     eca:	19 f0       	breq	.+6      	; 0xed2 <ROOM1+0x2e6>
     ecc:	c2 33       	cpi	r28, 0x32	; 50
     ece:	59 f0       	breq	.+22     	; 0xee6 <ROOM1+0x2fa>
     ed0:	97 c0       	rjmp	.+302    	; 0x1000 <ROOM1+0x414>
							{
								case '1':
								SPI_TxRx(Air_Cond_TurnOff);
     ed2:	86 e2       	ldi	r24, 0x26	; 38
     ed4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nAir conditioner,Room1 is Off now!");
     ed8:	84 ee       	ldi	r24, 0xE4	; 228
     eda:	93 e0       	ldi	r25, 0x03	; 3
     edc:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								Key = STD_Low;
								MainMenu();
     ee0:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     ee4:	e3 cf       	rjmp	.-58     	; 0xeac <ROOM1+0x2c0>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     ee6:	89 e9       	ldi	r24, 0x99	; 153
     ee8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								MainMenu();
     eec:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     ef0:	87 c0       	rjmp	.+270    	; 0x1000 <ROOM1+0x414>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     ef2:	86 34       	cpi	r24, 0x46	; 70
     ef4:	09 f0       	breq	.+2      	; 0xef8 <ROOM1+0x30c>
     ef6:	83 c0       	rjmp	.+262    	; 0xffe <ROOM1+0x412>
				{
					LCD_Clear();
     ef8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
					LCD_String("Air-Cond is Off!");
     efc:	87 e0       	ldi	r24, 0x07	; 7
     efe:	94 e0       	ldi	r25, 0x04	; 4
     f00:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					LCD_SetPos(2,0);
     f04:	60 2f       	mov	r22, r16
     f06:	8f 2d       	mov	r24, r15
     f08:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     f0c:	85 e0       	ldi	r24, 0x05	; 5
     f0e:	92 e0       	ldi	r25, 0x02	; 2
     f10:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     f14:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     f18:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     f1a:	88 23       	and	r24, r24
     f1c:	d9 f3       	breq	.-10     	; 0xf14 <ROOM1+0x328>
     f1e:	2f ef       	ldi	r18, 0xFF	; 255
     f20:	81 ee       	ldi	r24, 0xE1	; 225
     f22:	94 e0       	ldi	r25, 0x04	; 4
     f24:	21 50       	subi	r18, 0x01	; 1
     f26:	80 40       	sbci	r24, 0x00	; 0
     f28:	90 40       	sbci	r25, 0x00	; 0
     f2a:	e1 f7       	brne	.-8      	; 0xf24 <ROOM1+0x338>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <ROOM1+0x342>
     f2e:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     f30:	c1 33       	cpi	r28, 0x31	; 49
     f32:	21 f0       	breq	.+8      	; 0xf3c <ROOM1+0x350>
     f34:	c2 33       	cpi	r28, 0x32	; 50
     f36:	09 f4       	brne	.+2      	; 0xf3a <ROOM1+0x34e>
     f38:	58 c0       	rjmp	.+176    	; 0xfea <ROOM1+0x3fe>
     f3a:	5d c0       	rjmp	.+186    	; 0xff6 <ROOM1+0x40a>
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
								LCD_Clear();
     f3c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
								LCD_String("Set Temp:__");
     f40:	88 e1       	ldi	r24, 0x18	; 24
     f42:	94 e0       	ldi	r25, 0x04	; 4
     f44:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
								LCD_Custome_Char(1,customChar); //Degree symbol
     f48:	60 e6       	ldi	r22, 0x60	; 96
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_Custome_Char>
								LCD_SetPos(1,11);
     f52:	6b e0       	ldi	r22, 0x0B	; 11
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
								LCD_Char(1);
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
								LCD_Char('C');
     f60:	83 e4       	ldi	r24, 0x43	; 67
     f62:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
								LCD_SetPos(1,9);
     f66:	69 e0       	ldi	r22, 0x09	; 9
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	0e 94 c6 0a 	call	0x158c	; 0x158c <LCD_SetPos>
							_delay_ms(100);
							switch(Key)
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
     f6e:	bb 24       	eor	r11, r11
     f70:	b3 94       	inc	r11
     f72:	ce 2c       	mov	r12, r14
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     f74:	0e 94 a3 09 	call	0x1346	; 0x1346 <GetKey>
     f78:	c8 2f       	mov	r28, r24
									if((Key != STD_Low) && (Counter == 1))
     f7a:	88 23       	and	r24, r24
     f7c:	89 f0       	breq	.+34     	; 0xfa0 <ROOM1+0x3b4>
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	b2 12       	cpse	r11, r18
     f82:	05 c0       	rjmp	.+10     	; 0xf8e <ROOM1+0x3a2>
									{
										Tenth = Key;
										LCD_Char(Tenth);
     f84:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     f88:	cc 2e       	mov	r12, r28
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     f8a:	bd 2c       	mov	r11, r13
     f8c:	f3 cf       	rjmp	.-26     	; 0xf74 <ROOM1+0x388>
									}
									else if((Key != STD_Low) && (Counter == 2))
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	b8 12       	cpse	r11, r24
     f92:	0a c0       	rjmp	.+20     	; 0xfa8 <ROOM1+0x3bc>
									{
										Ones = Key;
										LCD_Char(Ones);
     f94:	8c 2f       	mov	r24, r28
     f96:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     f9a:	8c 2f       	mov	r24, r28
										Counter++;
									}
									else if((Key != STD_Low) && (Counter == 2))
									{
										Ones = Key;
										LCD_Char(Ones);
     f9c:	ce 2d       	mov	r28, r14
     f9e:	05 c0       	rjmp	.+10     	; 0xfaa <ROOM1+0x3be>
								LCD_Custome_Char(1,customChar); //Degree symbol
								LCD_SetPos(1,11);
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	9b 15       	cp	r25, r11
     fa4:	38 f7       	brcc	.-50     	; 0xf74 <ROOM1+0x388>
     fa6:	01 c0       	rjmp	.+2      	; 0xfaa <ROOM1+0x3be>
     fa8:	8e 2d       	mov	r24, r14
									else
									{
										//Do Nothing
									}
								}
								Temperature = (unsigned char)((((unsigned char)Tenth - '0') * 10) + (Ones - '0'));
     faa:	9c 2d       	mov	r25, r12
     fac:	99 0f       	add	r25, r25
     fae:	90 56       	subi	r25, 0x60	; 96
     fb0:	c9 2e       	mov	r12, r25
     fb2:	cc 0c       	add	r12, r12
     fb4:	cc 0c       	add	r12, r12
     fb6:	9c 0d       	add	r25, r12
     fb8:	80 53       	subi	r24, 0x30	; 48
     fba:	c9 2e       	mov	r12, r25
     fbc:	c8 0e       	add	r12, r24
     fbe:	2f ef       	ldi	r18, 0xFF	; 255
     fc0:	81 ee       	ldi	r24, 0xE1	; 225
     fc2:	94 e0       	ldi	r25, 0x04	; 4
     fc4:	21 50       	subi	r18, 0x01	; 1
     fc6:	80 40       	sbci	r24, 0x00	; 0
     fc8:	90 40       	sbci	r25, 0x00	; 0
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <ROOM1+0x3d8>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <ROOM1+0x3e2>
     fce:	00 00       	nop
								_delay_ms(100);
								SPI_TxRx(Air_Cond_TurnOn);
     fd0:	86 e1       	ldi	r24, 0x16	; 22
     fd2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Bluetooth_TransmaitString("\nAir conditioner,Room1 is on now!");
     fd6:	84 e2       	ldi	r24, 0x24	; 36
     fd8:	94 e0       	ldi	r25, 0x04	; 4
     fda:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
								SPI_TxRx(Temperature);
     fde:	8c 2d       	mov	r24, r12
     fe0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								MainMenu();
     fe4:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
								break;
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <ROOM1+0x40a>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     fea:	89 e9       	ldi	r24, 0x99	; 153
     fec:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
								Key = STD_Low;
								MainMenu();
     ff0:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
     ff4:	8f cf       	rjmp	.-226    	; 0xf14 <ROOM1+0x328>
					LCD_Clear();
					LCD_String("Air-Cond is Off!");
					LCD_SetPos(2,0);
					LCD_String("1:TurnOn 2:back");
					
					while(Key == STD_Low)
     ff6:	cc 23       	and	r28, r28
     ff8:	09 f4       	brne	.+2      	; 0xffc <ROOM1+0x410>
     ffa:	8c cf       	rjmp	.-232    	; 0xf14 <ROOM1+0x328>
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <ROOM1+0x414>
				MainMenu();
				break;
				
				case '3':
				LCD_Clear();
				Key = STD_Low;
     ffe:	c0 2f       	mov	r28, r16
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
    1000:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				MainMenu();
    1004:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
				break;
    1008:	10 c0       	rjmp	.+32     	; 0x102a <ROOM1+0x43e>
				
				default:
				LCD_Clear();
    100a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_Clear>
				LCD_String("Wrong choice!");
    100e:	8f e8       	ldi	r24, 0x8F	; 143
    1010:	92 e0       	ldi	r25, 0x02	; 2
    1012:	0e 94 b0 0a 	call	0x1560	; 0x1560 <LCD_String>
    1016:	2f ef       	ldi	r18, 0xFF	; 255
    1018:	89 e6       	ldi	r24, 0x69	; 105
    101a:	98 e1       	ldi	r25, 0x18	; 24
    101c:	21 50       	subi	r18, 0x01	; 1
    101e:	80 40       	sbci	r24, 0x00	; 0
    1020:	90 40       	sbci	r25, 0x00	; 0
    1022:	e1 f7       	brne	.-8      	; 0x101c <ROOM1+0x430>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <ROOM1+0x43a>
    1026:	00 00       	nop
				_delay_ms(500);
				Key = STD_Low;
				goto Trylamp;
    1028:	f0 cd       	rjmp	.-1056   	; 0xc0a <ROOM1+0x1e>
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
	LCD_String("3:AirConditioner");
	
	while(Key == STD_Low)
    102a:	cc 23       	and	r28, r28
    102c:	09 f4       	brne	.+2      	; 0x1030 <ROOM1+0x444>
    102e:	fb cd       	rjmp	.-1034   	; 0xc26 <ROOM1+0x3a>
				goto Trylamp;
				break;
			}
		}
	}
}
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	bf 90       	pop	r11
    1042:	08 95       	ret

00001044 <AdminMenu>:
	}
}

void AdminMenu(void)
{
	Bluetooth_TransmaitString("\n\nSmart-Home Project\nAdmin mode\n");
    1044:	86 e4       	ldi	r24, 0x46	; 70
    1046:	94 e0       	ldi	r25, 0x04	; 4
    1048:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
	Bluetooth_TransmaitString("Room1\n11)Lamp1\n22)Lamp2\n33)Air-Conditioner\n\n");
    104c:	87 e6       	ldi	r24, 0x67	; 103
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
	Bluetooth_TransmaitString("\nRoom2\n44)Lamp1\n55)Lamp2\n66)Lamp3\n7)Main-Door\n8)User-Mode");
    1054:	84 e9       	ldi	r24, 0x94	; 148
    1056:	94 e0       	ldi	r25, 0x04	; 4
    1058:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
	u8 Admin_Choice = STD_Low, status = STD_Low;
	
	adminmenu:
	Admin_Choice = STD_Low;
	Admin_Choice = Bluetooth_Receive();
    105c:	0e 94 17 09 	call	0x122e	; 0x122e <Bluetooth_Receive>

	switch(Admin_Choice)
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	f1 97       	sbiw	r30, 0x31	; 49
    1066:	e8 30       	cpi	r30, 0x08	; 8
    1068:	f1 05       	cpc	r31, r1
    106a:	c0 f7       	brcc	.-16     	; 0x105c <AdminMenu+0x18>
    106c:	e6 5d       	subi	r30, 0xD6	; 214
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	0c 94 df 11 	jmp	0x23be	; 0x23be <__tablejump2__>
    1074:	2f ef       	ldi	r18, 0xFF	; 255
    1076:	33 e2       	ldi	r19, 0x23	; 35
    1078:	84 ef       	ldi	r24, 0xF4	; 244
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	21 50       	subi	r18, 0x01	; 1
    107e:	30 40       	sbci	r19, 0x00	; 0
    1080:	80 40       	sbci	r24, 0x00	; 0
    1082:	90 40       	sbci	r25, 0x00	; 0
    1084:	d9 f7       	brne	.-10     	; 0x107c <AdminMenu+0x38>
    1086:	00 c0       	rjmp	.+0      	; 0x1088 <AdminMenu+0x44>
    1088:	00 00       	nop
	{
		case '1':
		_delay_ms(6000);
		status = SPI_TxRx(Led1);
    108a:	81 e3       	ldi	r24, 0x31	; 49
    108c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
		if(status == On)
    1090:	8f 34       	cpi	r24, 0x4F	; 79
    1092:	41 f4       	brne	.+16     	; 0x10a4 <AdminMenu+0x60>
		{
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
    1094:	8e ec       	ldi	r24, 0xCE	; 206
    1096:	94 e0       	ldi	r25, 0x04	; 4
    1098:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
			SPI_TxRx(Led1_TurnOff);
    109c:	81 e2       	ldi	r24, 0x21	; 33
    109e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
    10a2:	dc cf       	rjmp	.-72     	; 0x105c <AdminMenu+0x18>
			Admin_Choice = STD_Low;
		}
		else if(status == Off)
    10a4:	86 34       	cpi	r24, 0x46	; 70
    10a6:	d1 f6       	brne	.-76     	; 0x105c <AdminMenu+0x18>
		{
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
    10a8:	81 ee       	ldi	r24, 0xE1	; 225
    10aa:	94 e0       	ldi	r25, 0x04	; 4
    10ac:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
			SPI_TxRx(Led1_TurnOn);
    10b0:	81 e1       	ldi	r24, 0x11	; 17
    10b2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
    10b6:	d2 cf       	rjmp	.-92     	; 0x105c <AdminMenu+0x18>
		}
		goto adminmenu;
		break;
		
		case '2':
		status = SPI_TxRx(Led2);
    10b8:	82 e3       	ldi	r24, 0x32	; 50
    10ba:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
		if(status == On)
    10be:	8f 34       	cpi	r24, 0x4F	; 79
    10c0:	41 f4       	brne	.+16     	; 0x10d2 <AdminMenu+0x8e>
		{
			SPI_TxRx(Led2_TurnOff);
    10c2:	82 e2       	ldi	r24, 0x22	; 34
    10c4:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
    10c8:	8e ec       	ldi	r24, 0xCE	; 206
    10ca:	94 e0       	ldi	r25, 0x04	; 4
    10cc:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
    10d0:	c5 cf       	rjmp	.-118    	; 0x105c <AdminMenu+0x18>
		}
		else if(status == Off)
    10d2:	86 34       	cpi	r24, 0x46	; 70
    10d4:	19 f6       	brne	.-122    	; 0x105c <AdminMenu+0x18>
		{
			SPI_TxRx(Led2_TurnOn);
    10d6:	82 e1       	ldi	r24, 0x12	; 18
    10d8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
    10dc:	81 ee       	ldi	r24, 0xE1	; 225
    10de:	94 e0       	ldi	r25, 0x04	; 4
    10e0:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
    10e4:	bb cf       	rjmp	.-138    	; 0x105c <AdminMenu+0x18>
		}		
		goto adminmenu;
		break;
		
		case '3':
		status = SPI_TxRx(Air_Cond);
    10e6:	86 e3       	ldi	r24, 0x36	; 54
    10e8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
		if(status == On)
    10ec:	8f 34       	cpi	r24, 0x4F	; 79
    10ee:	41 f4       	brne	.+16     	; 0x1100 <AdminMenu+0xbc>
		{
			SPI_TxRx(Air_Cond_TurnOff);
    10f0:	86 e2       	ldi	r24, 0x26	; 38
    10f2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			Bluetooth_TransmaitString("\nAir conditioner Turned Off!\n");
    10f6:	83 ef       	ldi	r24, 0xF3	; 243
    10f8:	94 e0       	ldi	r25, 0x04	; 4
    10fa:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
    10fe:	ae cf       	rjmp	.-164    	; 0x105c <AdminMenu+0x18>
		}
		else if(status == Off)
    1100:	86 34       	cpi	r24, 0x46	; 70
    1102:	09 f0       	breq	.+2      	; 0x1106 <AdminMenu+0xc2>
    1104:	ab cf       	rjmp	.-170    	; 0x105c <AdminMenu+0x18>
		{
			SPI_TxRx(Air_Cond_TurnOn);
    1106:	86 e1       	ldi	r24, 0x16	; 22
    1108:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			SPI_TxRx(24);
    110c:	88 e1       	ldi	r24, 0x18	; 24
    110e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			Bluetooth_TransmaitString("\nAir conditioner Turned on!\n");
    1112:	81 e1       	ldi	r24, 0x11	; 17
    1114:	95 e0       	ldi	r25, 0x05	; 5
    1116:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
    111a:	a0 cf       	rjmp	.-192    	; 0x105c <AdminMenu+0x18>
		}		
		goto adminmenu;
		break;
		
		case '4':
		status = SPI_TxRx(Led3);
    111c:	83 e3       	ldi	r24, 0x33	; 51
    111e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
		if(status == On)
    1122:	8f 34       	cpi	r24, 0x4F	; 79
    1124:	41 f4       	brne	.+16     	; 0x1136 <AdminMenu+0xf2>
		{
			SPI_TxRx(Led3_TurnOff);
    1126:	83 e2       	ldi	r24, 0x23	; 35
    1128:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
    112c:	8e ec       	ldi	r24, 0xCE	; 206
    112e:	94 e0       	ldi	r25, 0x04	; 4
    1130:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
    1134:	93 cf       	rjmp	.-218    	; 0x105c <AdminMenu+0x18>
		}
		else if(status == Off)
    1136:	86 34       	cpi	r24, 0x46	; 70
    1138:	09 f0       	breq	.+2      	; 0x113c <AdminMenu+0xf8>
    113a:	90 cf       	rjmp	.-224    	; 0x105c <AdminMenu+0x18>
		{
			SPI_TxRx(Led3_TurnOn);
    113c:	83 e1       	ldi	r24, 0x13	; 19
    113e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
    1142:	81 ee       	ldi	r24, 0xE1	; 225
    1144:	94 e0       	ldi	r25, 0x04	; 4
    1146:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
    114a:	88 cf       	rjmp	.-240    	; 0x105c <AdminMenu+0x18>
		}
		goto adminmenu;
		break;
		
		case '5':
		status = SPI_TxRx(Led4);
    114c:	84 e3       	ldi	r24, 0x34	; 52
    114e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
		if(status == On)
    1152:	8f 34       	cpi	r24, 0x4F	; 79
    1154:	41 f4       	brne	.+16     	; 0x1166 <AdminMenu+0x122>
		{
			SPI_TxRx(Led4_TurnOff);
    1156:	84 e2       	ldi	r24, 0x24	; 36
    1158:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
    115c:	8e ec       	ldi	r24, 0xCE	; 206
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
    1164:	7b cf       	rjmp	.-266    	; 0x105c <AdminMenu+0x18>
		}
		else if(status == Off)
    1166:	86 34       	cpi	r24, 0x46	; 70
    1168:	09 f0       	breq	.+2      	; 0x116c <AdminMenu+0x128>
    116a:	78 cf       	rjmp	.-272    	; 0x105c <AdminMenu+0x18>
		{
			SPI_TxRx(Led4_TurnOn);
    116c:	84 e1       	ldi	r24, 0x14	; 20
    116e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
    1172:	81 ee       	ldi	r24, 0xE1	; 225
    1174:	94 e0       	ldi	r25, 0x04	; 4
    1176:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
    117a:	70 cf       	rjmp	.-288    	; 0x105c <AdminMenu+0x18>
		}		
		goto adminmenu;
		break;
		
		case '6':
		status = SPI_TxRx(Led5);
    117c:	85 e3       	ldi	r24, 0x35	; 53
    117e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
		if(status == On)
    1182:	8f 34       	cpi	r24, 0x4F	; 79
    1184:	41 f4       	brne	.+16     	; 0x1196 <AdminMenu+0x152>
		{
			SPI_TxRx(Led5_TurnOff);
    1186:	85 e2       	ldi	r24, 0x25	; 37
    1188:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
    118c:	8e ec       	ldi	r24, 0xCE	; 206
    118e:	94 e0       	ldi	r25, 0x04	; 4
    1190:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
    1194:	63 cf       	rjmp	.-314    	; 0x105c <AdminMenu+0x18>
		}
		else if(status == Off)
    1196:	86 34       	cpi	r24, 0x46	; 70
    1198:	09 f0       	breq	.+2      	; 0x119c <AdminMenu+0x158>
    119a:	60 cf       	rjmp	.-320    	; 0x105c <AdminMenu+0x18>
		{
			SPI_TxRx(Led5_TurnOn);
    119c:	85 e1       	ldi	r24, 0x15	; 21
    119e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
    11a2:	81 ee       	ldi	r24, 0xE1	; 225
    11a4:	94 e0       	ldi	r25, 0x04	; 4
    11a6:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
    11aa:	58 cf       	rjmp	.-336    	; 0x105c <AdminMenu+0x18>
		}		
		goto adminmenu;
		break;
		
		case '7':
		if(EEPROM_ReadByte(DOOR_Status_Loc,0) == 0xFF)
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	84 ea       	ldi	r24, 0xA4	; 164
    11b0:	0e 94 3a 09 	call	0x1274	; 0x1274 <EEPROM_ReadByte>
    11b4:	8f 3f       	cpi	r24, 0xFF	; 255
    11b6:	b9 f4       	brne	.+46     	; 0x11e6 <AdminMenu+0x1a2>
		{
			UART_TransmaitString("\nOpening Main Door!\n");
    11b8:	8e e2       	ldi	r24, 0x2E	; 46
    11ba:	95 e0       	ldi	r25, 0x05	; 5
    11bc:	0e 94 0c 10 	call	0x2018	; 0x2018 <UART_TransmaitString>
			ServoMotor(90);
    11c0:	8a e5       	ldi	r24, 0x5A	; 90
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <ServoMotor>
			EEPROM_WriteByte(DOOR_Status_Loc,0,'1');
    11c8:	41 e3       	ldi	r20, 0x31	; 49
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	84 ea       	ldi	r24, 0xA4	; 164
    11ce:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_WriteByte>
    11d2:	2f ef       	ldi	r18, 0xFF	; 255
    11d4:	33 ec       	ldi	r19, 0xC3	; 195
    11d6:	89 e0       	ldi	r24, 0x09	; 9
    11d8:	21 50       	subi	r18, 0x01	; 1
    11da:	30 40       	sbci	r19, 0x00	; 0
    11dc:	80 40       	sbci	r24, 0x00	; 0
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <AdminMenu+0x194>
    11e0:	00 c0       	rjmp	.+0      	; 0x11e2 <AdminMenu+0x19e>
    11e2:	00 00       	nop
			_delay_ms(200);
			Admin_Choice = STD_Low;
			goto adminmenu;
    11e4:	3b cf       	rjmp	.-394    	; 0x105c <AdminMenu+0x18>
		}
		else
		{
			UART_TransmaitString("\nClosing Main Door!\n");
    11e6:	83 e4       	ldi	r24, 0x43	; 67
    11e8:	95 e0       	ldi	r25, 0x05	; 5
    11ea:	0e 94 0c 10 	call	0x2018	; 0x2018 <UART_TransmaitString>
			ServoMotor(0);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <ServoMotor>
			EEPROM_WriteByte(DOOR_Status_Loc,0,0xFF);
    11f6:	4f ef       	ldi	r20, 0xFF	; 255
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	84 ea       	ldi	r24, 0xA4	; 164
    11fc:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_WriteByte>
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	23 ec       	ldi	r18, 0xC3	; 195
    1204:	39 e0       	ldi	r19, 0x09	; 9
    1206:	91 50       	subi	r25, 0x01	; 1
    1208:	20 40       	sbci	r18, 0x00	; 0
    120a:	30 40       	sbci	r19, 0x00	; 0
    120c:	e1 f7       	brne	.-8      	; 0x1206 <AdminMenu+0x1c2>
    120e:	00 c0       	rjmp	.+0      	; 0x1210 <AdminMenu+0x1cc>
    1210:	00 00       	nop
			_delay_ms(200);
			Admin_Choice = STD_Low;	
			goto adminmenu;	
    1212:	24 cf       	rjmp	.-440    	; 0x105c <AdminMenu+0x18>
		}
		break;
		
		case '8':
		Bluetooth_TransmaitString("\n\n\n\n\n\n\n\nUser mode On!");
    1214:	88 e5       	ldi	r24, 0x58	; 88
    1216:	95 e0       	ldi	r25, 0x05	; 5
    1218:	0e 94 14 09 	call	0x1228	; 0x1228 <Bluetooth_TransmaitString>
		Menu1();
    121c:	0e 94 bf 01 	call	0x37e	; 0x37e <Menu1>
    1220:	08 95       	ret

00001222 <Bluetooth_Init>:

void Bluetooth_Init(UART_Config * options){
	UART_Init(options);
}
void Bluetooth_Transmait(u8 data){
	UART_Transmait(data);
    1222:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <UART_Init>
    1226:	08 95       	ret

00001228 <Bluetooth_TransmaitString>:
}
void Bluetooth_TransmaitString(s8 * string){
	UART_TransmaitString(string);
    1228:	0e 94 0c 10 	call	0x2018	; 0x2018 <UART_TransmaitString>
    122c:	08 95       	ret

0000122e <Bluetooth_Receive>:
}
u8 Bluetooth_Receive(void){
	return UART_Receive();
    122e:	0e 94 22 10 	call	0x2044	; 0x2044 <UART_Receive>
}
    1232:	08 95       	ret

00001234 <EEPROM_WriteByte>:
* Created: 5/6/2023 2:33:25 PM
*  Author: user
*/
#include "EEPROM.h"

void EEPROM_WriteByte(u8 DeviceAdd,u8 LocAdd,u8 data){
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	c8 2f       	mov	r28, r24
    123c:	d6 2f       	mov	r29, r22
    123e:	14 2f       	mov	r17, r20
	u8 wDeviceAdd = (DeviceAdd & 0xFE);//to clear the first bit
	if (TWI_Start() == 0x08)
    1240:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TWI_Start>
    1244:	88 30       	cpi	r24, 0x08	; 8
    1246:	91 f4       	brne	.+36     	; 0x126c <EEPROM_WriteByte+0x38>
	{
		if (TWI_Send(wDeviceAdd) == 0x18)
    1248:	8c 2f       	mov	r24, r28
    124a:	8e 7f       	andi	r24, 0xFE	; 254
    124c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <TWI_Send>
    1250:	88 31       	cpi	r24, 0x18	; 24
    1252:	61 f4       	brne	.+24     	; 0x126c <EEPROM_WriteByte+0x38>
		{
			if (TWI_Send(LocAdd) == 0x28)
    1254:	8d 2f       	mov	r24, r29
    1256:	0e 94 56 0f 	call	0x1eac	; 0x1eac <TWI_Send>
    125a:	88 32       	cpi	r24, 0x28	; 40
    125c:	39 f4       	brne	.+14     	; 0x126c <EEPROM_WriteByte+0x38>
			{
				if (TWI_Send(data) == 0x28)
    125e:	81 2f       	mov	r24, r17
    1260:	0e 94 56 0f 	call	0x1eac	; 0x1eac <TWI_Send>
    1264:	88 32       	cpi	r24, 0x28	; 40
    1266:	11 f4       	brne	.+4      	; 0x126c <EEPROM_WriteByte+0x38>
				{
					TWI_Stop();
    1268:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <TWI_Stop>
				}
			}
		}
	}
}
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	08 95       	ret

00001274 <EEPROM_ReadByte>:
u8 EEPROM_ReadByte(u8 DeviceAdd,u8 LocAdd){
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	1f 92       	push	r1
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	18 2f       	mov	r17, r24
    1284:	06 2f       	mov	r16, r22
	u8 wDeviceAdd = (DeviceAdd & 0xFE);//to clear the first bit to write
	u8 rDeviceAdd = (DeviceAdd | 0x01);//to set the first bit to read
	u8 data = 0;
    1286:	19 82       	std	Y+1, r1	; 0x01
	if (TWI_Start() == 0x08)
    1288:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TWI_Start>
    128c:	88 30       	cpi	r24, 0x08	; 8
    128e:	e9 f4       	brne	.+58     	; 0x12ca <EEPROM_ReadByte+0x56>
	{
		if (TWI_Send(wDeviceAdd) == 0x18)
    1290:	81 2f       	mov	r24, r17
    1292:	8e 7f       	andi	r24, 0xFE	; 254
    1294:	0e 94 56 0f 	call	0x1eac	; 0x1eac <TWI_Send>
    1298:	88 31       	cpi	r24, 0x18	; 24
    129a:	b9 f4       	brne	.+46     	; 0x12ca <EEPROM_ReadByte+0x56>
		{
			if (TWI_Send(LocAdd) == 0x28)
    129c:	80 2f       	mov	r24, r16
    129e:	0e 94 56 0f 	call	0x1eac	; 0x1eac <TWI_Send>
    12a2:	88 32       	cpi	r24, 0x28	; 40
    12a4:	91 f4       	brne	.+36     	; 0x12ca <EEPROM_ReadByte+0x56>
			{
				if (TWI_Start() == 0x10)
    12a6:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TWI_Start>
    12aa:	80 31       	cpi	r24, 0x10	; 16
    12ac:	71 f4       	brne	.+28     	; 0x12ca <EEPROM_ReadByte+0x56>
				{
					if (TWI_Send(rDeviceAdd) == 0x40)
    12ae:	81 2f       	mov	r24, r17
    12b0:	81 60       	ori	r24, 0x01	; 1
    12b2:	0e 94 56 0f 	call	0x1eac	; 0x1eac <TWI_Send>
    12b6:	80 34       	cpi	r24, 0x40	; 64
    12b8:	41 f4       	brne	.+16     	; 0x12ca <EEPROM_ReadByte+0x56>
					{
						//_delay_ms(50);
						if(TWI_Read_NAck(&data) == 0x58){
    12ba:	ce 01       	movw	r24, r28
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <TWI_Read_NAck>
    12c2:	88 35       	cpi	r24, 0x58	; 88
    12c4:	11 f4       	brne	.+4      	; 0x12ca <EEPROM_ReadByte+0x56>
							TWI_Stop();
    12c6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <TWI_Stop>
				}
			}
		}
	}
	return data;
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	0f 90       	pop	r0
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	08 95       	ret

000012d8 <Keypad_Init>:
*  Author: user
*/
#include "Keypad_Config.h"
#include "Keypad.h"

void Keypad_Init(void){
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	c8 e7       	ldi	r28, 0x78	; 120
    12e6:	d0 e0       	ldi	r29, 0x00	; 0
    12e8:	0f 2e       	mov	r0, r31
    12ea:	fc e7       	ldi	r31, 0x7C	; 124
    12ec:	ef 2e       	mov	r14, r31
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	ff 2e       	mov	r15, r31
    12f2:	f0 2d       	mov	r31, r0
    12f4:	8e 01       	movw	r16, r28
	//cols input
	for (u8 i=0;i<colsCount;i++)
	{
		DIO_ConfigChannel(keypadCols[i],Input);
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	89 91       	ld	r24, Y+
    12fa:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	f8 01       	movw	r30, r16
    1302:	80 81       	ld	r24, Z
    1304:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
#include "Keypad_Config.h"
#include "Keypad.h"

void Keypad_Init(void){
	//cols input
	for (u8 i=0;i<colsCount;i++)
    1308:	ce 15       	cp	r28, r14
    130a:	df 05       	cpc	r29, r15
    130c:	99 f7       	brne	.-26     	; 0x12f4 <Keypad_Init+0x1c>
    130e:	cc e7       	ldi	r28, 0x7C	; 124
    1310:	d0 e0       	ldi	r29, 0x00	; 0
    1312:	0f 2e       	mov	r0, r31
    1314:	f0 e8       	ldi	r31, 0x80	; 128
    1316:	ef 2e       	mov	r14, r31
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	ff 2e       	mov	r15, r31
    131c:	f0 2d       	mov	r31, r0
    131e:	8e 01       	movw	r16, r28
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
	}
	//rows output
	for (u8 j=0;j<rowsCount;j++)
	{
		DIO_ConfigChannel(keypadRows[j],Output);
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	89 91       	ld	r24, Y+
    1324:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	f8 01       	movw	r30, r16
    132c:	80 81       	ld	r24, Z
    132e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	{
		DIO_ConfigChannel(keypadCols[i],Input);
		DIO_WriteChannel(keypadCols[i],STD_High);//connect Pullup Res.
	}
	//rows output
	for (u8 j=0;j<rowsCount;j++)
    1332:	ce 15       	cp	r28, r14
    1334:	df 05       	cpc	r29, r15
    1336:	99 f7       	brne	.-26     	; 0x131e <Keypad_Init+0x46>
	{
		DIO_ConfigChannel(keypadRows[j],Output);
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
	}
}
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	ff 90       	pop	r15
    1342:	ef 90       	pop	r14
    1344:	08 95       	ret

00001346 <GetKey>:
u8 GetKey(void){
    1346:	6f 92       	push	r6
    1348:	7f 92       	push	r7
    134a:	8f 92       	push	r8
    134c:	9f 92       	push	r9
    134e:	af 92       	push	r10
    1350:	bf 92       	push	r11
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	0c e7       	ldi	r16, 0x7C	; 124
    1364:	10 e0       	ldi	r17, 0x00	; 0
    1366:	c1 2c       	mov	r12, r1
    1368:	d1 2c       	mov	r13, r1
	for (u8 i=0;i<rowsCount;i++)
	{
		DIO_WriteChannel(keypadRows[i],STD_Low);
    136a:	46 01       	movw	r8, r12
    136c:	58 01       	movw	r10, r16
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	f8 01       	movw	r30, r16
    1372:	80 81       	ld	r24, Z
    1374:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
    1378:	c8 e7       	ldi	r28, 0x78	; 120
    137a:	d0 e0       	ldi	r29, 0x00	; 0
    137c:	61 2c       	mov	r6, r1
    137e:	71 2c       	mov	r7, r1
		for (u8 j=0;j<colsCount;j++)
		{
			if (DIO_ReadChannel(keypadCols[j]) == STD_Low)
    1380:	73 01       	movw	r14, r6
    1382:	89 91       	ld	r24, Y+
    1384:	0e 94 01 0c 	call	0x1802	; 0x1802 <DIO_ReadChannel>
    1388:	81 11       	cpse	r24, r1
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <GetKey+0x6e>
			{
				while(DIO_ReadChannel(keypadCols[j]) == STD_Low);
    138c:	e3 01       	movw	r28, r6
    138e:	c8 58       	subi	r28, 0x88	; 136
    1390:	df 4f       	sbci	r29, 0xFF	; 255
    1392:	88 81       	ld	r24, Y
    1394:	0e 94 01 0c 	call	0x1802	; 0x1802 <DIO_ReadChannel>
    1398:	88 23       	and	r24, r24
    139a:	d9 f3       	breq	.-10     	; 0x1392 <GetKey+0x4c>
				return keypad[i][j];
    139c:	c4 01       	movw	r24, r8
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	88 59       	subi	r24, 0x98	; 152
    13a8:	9f 4f       	sbci	r25, 0xFF	; 255
    13aa:	fc 01       	movw	r30, r24
    13ac:	ee 0d       	add	r30, r14
    13ae:	ff 1d       	adc	r31, r15
    13b0:	80 81       	ld	r24, Z
    13b2:	16 c0       	rjmp	.+44     	; 0x13e0 <GetKey+0x9a>
    13b4:	ff ef       	ldi	r31, 0xFF	; 255
    13b6:	6f 1a       	sub	r6, r31
    13b8:	7f 0a       	sbc	r7, r31
}
u8 GetKey(void){
	for (u8 i=0;i<rowsCount;i++)
	{
		DIO_WriteChannel(keypadRows[i],STD_Low);
		for (u8 j=0;j<colsCount;j++)
    13ba:	84 e0       	ldi	r24, 0x04	; 4
    13bc:	68 16       	cp	r6, r24
    13be:	71 04       	cpc	r7, r1
    13c0:	f9 f6       	brne	.-66     	; 0x1380 <GetKey+0x3a>
    13c2:	0f 5f       	subi	r16, 0xFF	; 255
    13c4:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				while(DIO_ReadChannel(keypadCols[j]) == STD_Low);
				return keypad[i][j];
			}
		}
		DIO_WriteChannel(keypadRows[i],STD_High);
    13c6:	61 e0       	ldi	r22, 0x01	; 1
    13c8:	f5 01       	movw	r30, r10
    13ca:	80 81       	ld	r24, Z
    13cc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
    13d0:	ff ef       	ldi	r31, 0xFF	; 255
    13d2:	cf 1a       	sub	r12, r31
    13d4:	df 0a       	sbc	r13, r31
		DIO_ConfigChannel(keypadRows[j],Output);
		DIO_WriteChannel(keypadRows[j],STD_High);//output -> 5V
	}
}
u8 GetKey(void){
	for (u8 i=0;i<rowsCount;i++)
    13d6:	84 e0       	ldi	r24, 0x04	; 4
    13d8:	c8 16       	cp	r12, r24
    13da:	d1 04       	cpc	r13, r1
    13dc:	31 f6       	brne	.-116    	; 0x136a <GetKey+0x24>
				return keypad[i][j];
			}
		}
		DIO_WriteChannel(keypadRows[i],STD_High);
	}
	return STD_Low;
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	df 90       	pop	r13
    13ee:	cf 90       	pop	r12
    13f0:	bf 90       	pop	r11
    13f2:	af 90       	pop	r10
    13f4:	9f 90       	pop	r9
    13f6:	8f 90       	pop	r8
    13f8:	7f 90       	pop	r7
    13fa:	6f 90       	pop	r6
    13fc:	08 95       	ret

000013fe <LCD_Cmd>:
	LCD_Cmd(0x32);
	LCD_Cmd(0x28);//Set Function 4Bit & 2Line & 5*8
	LCD_Cmd(0x06);//Entry Mode move to right
	LCD_Cmd(0x0C);//Display ON & Cursor ON & Blink
}
void LCD_Cmd(u8 cmd){
    13fe:	cf 93       	push	r28
    1400:	c8 2f       	mov	r28, r24
	u8 portValue = STD_Low;
	DIO_WriteChannel(LCD_RS,STD_Low);
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	89 e0       	ldi	r24, 0x09	; 9
    1406:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	portValue = DIO_ReadPort(LCD_DataPort);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	0e 94 b6 0c 	call	0x196c	; 0x196c <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (cmd & 0xF0);
    1410:	8f 70       	andi	r24, 0x0F	; 15
    1412:	9c 2f       	mov	r25, r28
    1414:	90 7f       	andi	r25, 0xF0	; 240
    1416:	68 2f       	mov	r22, r24
    1418:	69 2b       	or	r22, r25
	DIO_WritePort(LCD_DataPort,portValue);
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	8b e0       	ldi	r24, 0x0B	; 11
    1424:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1428:	8f e8       	ldi	r24, 0x8F	; 143
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	f1 f7       	brne	.-4      	; 0x142c <LCD_Cmd+0x2e>
    1430:	00 c0       	rjmp	.+0      	; 0x1432 <LCD_Cmd+0x34>
    1432:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	8b e0       	ldi	r24, 0x0B	; 11
    1438:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    143c:	8f e1       	ldi	r24, 0x1F	; 31
    143e:	9e e4       	ldi	r25, 0x4E	; 78
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <LCD_Cmd+0x42>
    1444:	00 c0       	rjmp	.+0      	; 0x1446 <LCD_Cmd+0x48>
    1446:	00 00       	nop
	
	_delay_ms(5);
	
	portValue = DIO_ReadPort(LCD_DataPort);
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	0e 94 b6 0c 	call	0x196c	; 0x196c <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (cmd << 4);
    144e:	8f 70       	andi	r24, 0x0F	; 15
    1450:	90 e1       	ldi	r25, 0x10	; 16
    1452:	c9 9f       	mul	r28, r25
    1454:	90 01       	movw	r18, r0
    1456:	11 24       	eor	r1, r1
    1458:	68 2f       	mov	r22, r24
    145a:	62 2b       	or	r22, r18
	DIO_WritePort(LCD_DataPort,portValue);
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	8b e0       	ldi	r24, 0x0B	; 11
    1466:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    146a:	8f e8       	ldi	r24, 0x8F	; 143
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <LCD_Cmd+0x70>
    1472:	00 c0       	rjmp	.+0      	; 0x1474 <LCD_Cmd+0x76>
    1474:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1476:	61 e0       	ldi	r22, 0x01	; 1
    1478:	8b e0       	ldi	r24, 0x0B	; 11
    147a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    147e:	8f e3       	ldi	r24, 0x3F	; 63
    1480:	9f e1       	ldi	r25, 0x1F	; 31
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <LCD_Cmd+0x84>
    1486:	00 c0       	rjmp	.+0      	; 0x1488 <LCD_Cmd+0x8a>
    1488:	00 00       	nop
	_delay_ms(2);
}
    148a:	cf 91       	pop	r28
    148c:	08 95       	ret

0000148e <LCD_Init>:
*  Author: user
*/
#include "LCD.h"

void LCD_Init(void){
	DIO_WriteChannel(LCD_RW,STD_Low);
    148e:	60 e0       	ldi	r22, 0x00	; 0
    1490:	8a e0       	ldi	r24, 0x0A	; 10
    1492:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E,STD_High);
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	8b e0       	ldi	r24, 0x0B	; 11
    149a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
    149e:	2f ef       	ldi	r18, 0xFF	; 255
    14a0:	89 ef       	ldi	r24, 0xF9	; 249
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	21 50       	subi	r18, 0x01	; 1
    14a6:	80 40       	sbci	r24, 0x00	; 0
    14a8:	90 40       	sbci	r25, 0x00	; 0
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <LCD_Init+0x16>
    14ac:	00 c0       	rjmp	.+0      	; 0x14ae <LCD_Init+0x20>
    14ae:	00 00       	nop
	_delay_ms(20);
	LCD_Cmd(0x33);
    14b0:	83 e3       	ldi	r24, 0x33	; 51
    14b2:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_Cmd>
	LCD_Cmd(0x32);
    14b6:	82 e3       	ldi	r24, 0x32	; 50
    14b8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_Cmd>
	LCD_Cmd(0x28);//Set Function 4Bit & 2Line & 5*8
    14bc:	88 e2       	ldi	r24, 0x28	; 40
    14be:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_Cmd>
	LCD_Cmd(0x06);//Entry Mode move to right
    14c2:	86 e0       	ldi	r24, 0x06	; 6
    14c4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_Cmd>
	LCD_Cmd(0x0C);//Display ON & Cursor ON & Blink
    14c8:	8c e0       	ldi	r24, 0x0C	; 12
    14ca:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_Cmd>
    14ce:	08 95       	ret

000014d0 <LCD_Char>:
	DIO_WriteChannel(LCD_E,STD_Low);
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
	_delay_ms(2);
}
void LCD_Char(s8 data){
    14d0:	cf 93       	push	r28
    14d2:	c8 2f       	mov	r28, r24
	u8 portValue = STD_Low;
	DIO_WriteChannel(LCD_RS,STD_High);
    14d4:	61 e0       	ldi	r22, 0x01	; 1
    14d6:	89 e0       	ldi	r24, 0x09	; 9
    14d8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	portValue = DIO_ReadPort(LCD_DataPort);
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	0e 94 b6 0c 	call	0x196c	; 0x196c <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (data & 0xF0);
    14e2:	8f 70       	andi	r24, 0x0F	; 15
    14e4:	9c 2f       	mov	r25, r28
    14e6:	90 7f       	andi	r25, 0xF0	; 240
    14e8:	68 2f       	mov	r22, r24
    14ea:	69 2b       	or	r22, r25
	DIO_WritePort(LCD_DataPort,portValue);
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	8b e0       	ldi	r24, 0x0B	; 11
    14f6:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14fa:	8f e8       	ldi	r24, 0x8F	; 143
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <LCD_Char+0x2e>
    1502:	00 c0       	rjmp	.+0      	; 0x1504 <LCD_Char+0x34>
    1504:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	8b e0       	ldi	r24, 0x0B	; 11
    150a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    150e:	8f e1       	ldi	r24, 0x1F	; 31
    1510:	9e e4       	ldi	r25, 0x4E	; 78
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	f1 f7       	brne	.-4      	; 0x1512 <LCD_Char+0x42>
    1516:	00 c0       	rjmp	.+0      	; 0x1518 <LCD_Char+0x48>
    1518:	00 00       	nop
	
	_delay_ms(5);
	
	portValue = DIO_ReadPort(LCD_DataPort);
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	0e 94 b6 0c 	call	0x196c	; 0x196c <DIO_ReadPort>
	portValue = (portValue & 0x0F) | (data << 4);
    1520:	8f 70       	andi	r24, 0x0F	; 15
    1522:	90 e1       	ldi	r25, 0x10	; 16
    1524:	c9 9f       	mul	r28, r25
    1526:	90 01       	movw	r18, r0
    1528:	11 24       	eor	r1, r1
    152a:	68 2f       	mov	r22, r24
    152c:	62 2b       	or	r22, r18
	DIO_WritePort(LCD_DataPort,portValue);
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	8b e0       	ldi	r24, 0x0B	; 11
    1538:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    153c:	8f e8       	ldi	r24, 0x8F	; 143
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <LCD_Char+0x70>
    1544:	00 c0       	rjmp	.+0      	; 0x1546 <LCD_Char+0x76>
    1546:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	8b e0       	ldi	r24, 0x0B	; 11
    154c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1550:	8f e3       	ldi	r24, 0x3F	; 63
    1552:	9f e1       	ldi	r25, 0x1F	; 31
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <LCD_Char+0x84>
    1558:	00 c0       	rjmp	.+0      	; 0x155a <LCD_Char+0x8a>
    155a:	00 00       	nop
	_delay_ms(2);
}
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <LCD_String>:
void LCD_String(s8 * string){
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	fc 01       	movw	r30, r24
	u8 i = 0;
	while (string[i] != '\0')
    1568:	80 81       	ld	r24, Z
    156a:	88 23       	and	r24, r24
    156c:	59 f0       	breq	.+22     	; 0x1584 <LCD_String+0x24>
    156e:	8f 01       	movw	r16, r30
    1570:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LCD_Char(string[i]);
    1572:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
		i++;
    1576:	cf 5f       	subi	r28, 0xFF	; 255
	DIO_WriteChannel(LCD_E,STD_High);
	_delay_ms(2);
}
void LCD_String(s8 * string){
	u8 i = 0;
	while (string[i] != '\0')
    1578:	f8 01       	movw	r30, r16
    157a:	ec 0f       	add	r30, r28
    157c:	f1 1d       	adc	r31, r1
    157e:	80 81       	ld	r24, Z
    1580:	81 11       	cpse	r24, r1
    1582:	f7 cf       	rjmp	.-18     	; 0x1572 <LCD_String+0x12>
	{
		LCD_Char(string[i]);
		i++;
	}
}
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	08 95       	ret

0000158c <LCD_SetPos>:
void LCD_SetPos(u8 line,u8 pos){
	switch(line){
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	19 f0       	breq	.+6      	; 0x1596 <LCD_SetPos+0xa>
    1590:	82 30       	cpi	r24, 0x02	; 2
    1592:	39 f0       	breq	.+14     	; 0x15a2 <LCD_SetPos+0x16>
    1594:	08 95       	ret
		case 1:
		LCD_Cmd((0x80 | (pos & 0x0F)));
    1596:	86 2f       	mov	r24, r22
    1598:	8f 70       	andi	r24, 0x0F	; 15
    159a:	80 68       	ori	r24, 0x80	; 128
    159c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_Cmd>
		break;
    15a0:	08 95       	ret
		case 2:
		LCD_Cmd((0xC0 | (pos & 0x0F)));
    15a2:	86 2f       	mov	r24, r22
    15a4:	8f 70       	andi	r24, 0x0F	; 15
    15a6:	80 6c       	ori	r24, 0xC0	; 192
    15a8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_Cmd>
    15ac:	08 95       	ret

000015ae <LCD_Custome_Char>:
		break;
	}
}
void LCD_Custome_Char(u8 loc,s8 * msg){
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
	if (loc<8)
    15b6:	88 30       	cpi	r24, 0x08	; 8
    15b8:	80 f4       	brcc	.+32     	; 0x15da <LCD_Custome_Char+0x2c>
    15ba:	8b 01       	movw	r16, r22
	{
		LCD_Cmd((0x40+(loc*8)));
    15bc:	88 0f       	add	r24, r24
    15be:	88 0f       	add	r24, r24
    15c0:	88 0f       	add	r24, r24
    15c2:	80 5c       	subi	r24, 0xC0	; 192
    15c4:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_Cmd>
    15c8:	e8 01       	movw	r28, r16
    15ca:	08 5f       	subi	r16, 0xF8	; 248
    15cc:	1f 4f       	sbci	r17, 0xFF	; 255
		for (u8 i=0;i<8;i++)
		{
			LCD_Char(msg[i]);
    15ce:	89 91       	ld	r24, Y+
    15d0:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_Char>
}
void LCD_Custome_Char(u8 loc,s8 * msg){
	if (loc<8)
	{
		LCD_Cmd((0x40+(loc*8)));
		for (u8 i=0;i<8;i++)
    15d4:	c0 17       	cp	r28, r16
    15d6:	d1 07       	cpc	r29, r17
    15d8:	d1 f7       	brne	.-12     	; 0x15ce <LCD_Custome_Char+0x20>
		{
			LCD_Char(msg[i]);
		}
	}
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	08 95       	ret

000015e4 <LCD_Clear>:
void LCD_Clear(void)
{
	LCD_Cmd(0x01);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <LCD_Cmd>
    15ea:	08 95       	ret

000015ec <ServoMotor>:
 * Created: 4/15/2023 1:44:42 PM
 *  Author: user
 */ 
#include "ServoMotor.h"

void ServoMotor(u16 angle){
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
    15f8:	28 97       	sbiw	r28, 0x08	; 8
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	8c 01       	movw	r16, r24
	DIO_ConfigChannel(DIO_ChannelD5,Output);
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	8d e1       	ldi	r24, 0x1D	; 29
    160a:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
	u16 ICR_Value = (u16)4999;
	u16 OCR1A_Value = (u16)(((angle-MiniAngle)*((float)(MaxCount-MiniCount)/(MaxAngle-MiniAngle)))+MiniCount-1);
	TIMER1_ICR_SetValue(ICR_Value);
    160e:	87 e8       	ldi	r24, 0x87	; 135
    1610:	93 e1       	ldi	r25, 0x13	; 19
    1612:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <TIMER1_ICR_SetValue>
	TIMER1_OCR1A_SetValue(OCR1A_Value);
    1616:	b8 01       	movw	r22, r16
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 c2 10 	call	0x2184	; 0x2184 <__floatunsisf>
    1620:	2c e1       	ldi	r18, 0x1C	; 28
    1622:	37 ec       	ldi	r19, 0xC7	; 199
    1624:	41 eb       	ldi	r20, 0xB1	; 177
    1626:	5f e3       	ldi	r21, 0x3F	; 63
    1628:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__mulsf3>
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	4a e7       	ldi	r20, 0x7A	; 122
    1632:	53 e4       	ldi	r21, 0x43	; 67
    1634:	0e 94 27 10 	call	0x204e	; 0x204e <__addsf3>
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 26 10 	call	0x204c	; 0x204c <__subsf3>
    1644:	0e 94 93 10 	call	0x2126	; 0x2126 <__fixunssfsi>
    1648:	cb 01       	movw	r24, r22
    164a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <TIMER1_OCR1A_SetValue>
	TIMER1_InitTypes options = {PWM_Fast,Clock_64,COM1A_Non_Inverting_PWM,COM1B_No_PWM,OC1AInt_Disable,OC1BInt_Disable,ICInt_Disable,TOVInt_Disable};
    164e:	88 e0       	ldi	r24, 0x08	; 8
    1650:	e0 ec       	ldi	r30, 0xC0	; 192
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	de 01       	movw	r26, r28
    1656:	11 96       	adiw	r26, 0x01	; 1
    1658:	01 90       	ld	r0, Z+
    165a:	0d 92       	st	X+, r0
    165c:	8a 95       	dec	r24
    165e:	e1 f7       	brne	.-8      	; 0x1658 <ServoMotor+0x6c>
	TIMER1_Init(&options);
    1660:	ce 01       	movw	r24, r28
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <TIMER1_Init>
    1668:	28 96       	adiw	r28, 0x08	; 8
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	08 95       	ret

0000167e <main>:
#include "EEPROM.h"
#include "APP.h"


int main(void)
{
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	2c 97       	sbiw	r28, 0x0c	; 12
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
	SPI_ConfigTypes options = {Master,MSB,SPIClock_64,DoupleSpeedDisable}; //SPI Config to master
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	1a 82       	std	Y+2, r1	; 0x02
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	8b 83       	std	Y+3, r24	; 0x03
    169c:	1c 82       	std	Y+4, r1	; 0x04
	DIO_Init(); //Initialize DIO with MASTER MCU
    169e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <DIO_Init>
	LCD_Init(); //Initialize LCD with MASTER MCU
    16a2:	0e 94 47 0a 	call	0x148e	; 0x148e <LCD_Init>
	Keypad_Init(); //Initialize keypad with MASTER MCU
    16a6:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <Keypad_Init>
	TWI_Init(0x66); //Setting Master MCU address "I2C COMM."
    16aa:	86 e6       	ldi	r24, 0x66	; 102
    16ac:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <TWI_Init>
	SPI_Init(&options); //Initialize Master SPI
    16b0:	ce 01       	movw	r24, r28
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <SPI_Init>
	UART_Config uartconf = {BaudRate_9600,DoupleSpeedDisable,CharacterSize_8Bits,Stop_1Bit,Parity_Disable,TX_Enable,RX_Enable};
    16b8:	88 e0       	ldi	r24, 0x08	; 8
    16ba:	e8 ec       	ldi	r30, 0xC8	; 200
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	de 01       	movw	r26, r28
    16c0:	15 96       	adiw	r26, 0x05	; 5
    16c2:	01 90       	ld	r0, Z+
    16c4:	0d 92       	st	X+, r0
    16c6:	8a 95       	dec	r24
    16c8:	e1 f7       	brne	.-8      	; 0x16c2 <main+0x44>
	Bluetooth_Init(&uartconf);
    16ca:	ce 01       	movw	r24, r28
    16cc:	05 96       	adiw	r24, 0x05	; 5
    16ce:	0e 94 11 09 	call	0x1222	; 0x1222 <Bluetooth_Init>
	DIO_ConfigChannel(DIO_ChannelD0,Input);
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	88 e1       	ldi	r24, 0x18	; 24
    16d6:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
    16da:	2f ef       	ldi	r18, 0xFF	; 255
    16dc:	81 ee       	ldi	r24, 0xE1	; 225
    16de:	94 e0       	ldi	r25, 0x04	; 4
    16e0:	21 50       	subi	r18, 0x01	; 1
    16e2:	80 40       	sbci	r24, 0x00	; 0
    16e4:	90 40       	sbci	r25, 0x00	; 0
    16e6:	e1 f7       	brne	.-8      	; 0x16e0 <main+0x62>
    16e8:	00 c0       	rjmp	.+0      	; 0x16ea <main+0x6c>
    16ea:	00 00       	nop
	_delay_ms(100);
	
	ALARM(); //if alarm not set will proceed to menu1
    16ec:	0e 94 ae 00 	call	0x15c	; 0x15c <ALARM>
	DoorCheck();
    16f0:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <DoorCheck>
	
	while (1)
	{
		MainMenu(); //Main menu to control Home
		admin:
		AdminMenu();
    16f4:	0e 94 22 08 	call	0x1044	; 0x1044 <AdminMenu>
	Menu1(); //if passed menu1 will proceed to menu2
	Menu2(); //if passed menu2 will proceed to Main Menu
	
	while (1)
	{
		MainMenu(); //Main menu to control Home
    16f8:	0e 94 c5 04 	call	0x98a	; 0x98a <MainMenu>
    16fc:	fb cf       	rjmp	.-10     	; 0x16f4 <main+0x76>

000016fe <DIO_WriteChannel>:
		break;
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
		break;
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
    16fe:	98 2f       	mov	r25, r24
    1700:	97 70       	andi	r25, 0x07	; 7
    1702:	86 95       	lsr	r24
    1704:	86 95       	lsr	r24
    1706:	86 95       	lsr	r24
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	21 f1       	breq	.+72     	; 0x1754 <DIO_WriteChannel+0x56>
    170c:	30 f0       	brcs	.+12     	; 0x171a <DIO_WriteChannel+0x1c>
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	f1 f1       	breq	.+124    	; 0x178e <DIO_WriteChannel+0x90>
    1712:	83 30       	cpi	r24, 0x03	; 3
    1714:	09 f4       	brne	.+2      	; 0x1718 <DIO_WriteChannel+0x1a>
    1716:	58 c0       	rjmp	.+176    	; 0x17c8 <DIO_WriteChannel+0xca>
    1718:	08 95       	ret
    171a:	61 30       	cpi	r22, 0x01	; 1
    171c:	69 f4       	brne	.+26     	; 0x1738 <DIO_WriteChannel+0x3a>
    171e:	4b b3       	in	r20, 0x1b	; 27
    1720:	21 e0       	ldi	r18, 0x01	; 1
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	b9 01       	movw	r22, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_WriteChannel+0x2e>
    1728:	66 0f       	add	r22, r22
    172a:	77 1f       	adc	r23, r23
    172c:	9a 95       	dec	r25
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_WriteChannel+0x2a>
    1730:	cb 01       	movw	r24, r22
    1732:	84 2b       	or	r24, r20
    1734:	8b bb       	out	0x1b, r24	; 27
    1736:	08 95       	ret
    1738:	4b b3       	in	r20, 0x1b	; 27
    173a:	21 e0       	ldi	r18, 0x01	; 1
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	b9 01       	movw	r22, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_WriteChannel+0x48>
    1742:	66 0f       	add	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	9a 95       	dec	r25
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_WriteChannel+0x44>
    174a:	cb 01       	movw	r24, r22
    174c:	80 95       	com	r24
    174e:	84 23       	and	r24, r20
    1750:	8b bb       	out	0x1b, r24	; 27
    1752:	08 95       	ret
    1754:	61 30       	cpi	r22, 0x01	; 1
    1756:	69 f4       	brne	.+26     	; 0x1772 <DIO_WriteChannel+0x74>
    1758:	48 b3       	in	r20, 0x18	; 24
    175a:	21 e0       	ldi	r18, 0x01	; 1
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	b9 01       	movw	r22, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <DIO_WriteChannel+0x68>
    1762:	66 0f       	add	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	9a 95       	dec	r25
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <DIO_WriteChannel+0x64>
    176a:	cb 01       	movw	r24, r22
    176c:	84 2b       	or	r24, r20
    176e:	88 bb       	out	0x18, r24	; 24
    1770:	08 95       	ret
    1772:	48 b3       	in	r20, 0x18	; 24
    1774:	21 e0       	ldi	r18, 0x01	; 1
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	b9 01       	movw	r22, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_WriteChannel+0x82>
    177c:	66 0f       	add	r22, r22
    177e:	77 1f       	adc	r23, r23
    1780:	9a 95       	dec	r25
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_WriteChannel+0x7e>
    1784:	cb 01       	movw	r24, r22
    1786:	80 95       	com	r24
    1788:	84 23       	and	r24, r20
    178a:	88 bb       	out	0x18, r24	; 24
    178c:	08 95       	ret
    178e:	61 30       	cpi	r22, 0x01	; 1
    1790:	69 f4       	brne	.+26     	; 0x17ac <DIO_WriteChannel+0xae>
    1792:	45 b3       	in	r20, 0x15	; 21
    1794:	21 e0       	ldi	r18, 0x01	; 1
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	b9 01       	movw	r22, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_WriteChannel+0xa2>
    179c:	66 0f       	add	r22, r22
    179e:	77 1f       	adc	r23, r23
    17a0:	9a 95       	dec	r25
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_WriteChannel+0x9e>
    17a4:	cb 01       	movw	r24, r22
    17a6:	84 2b       	or	r24, r20
    17a8:	85 bb       	out	0x15, r24	; 21
    17aa:	08 95       	ret
    17ac:	45 b3       	in	r20, 0x15	; 21
    17ae:	21 e0       	ldi	r18, 0x01	; 1
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	b9 01       	movw	r22, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_WriteChannel+0xbc>
    17b6:	66 0f       	add	r22, r22
    17b8:	77 1f       	adc	r23, r23
    17ba:	9a 95       	dec	r25
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <DIO_WriteChannel+0xb8>
    17be:	cb 01       	movw	r24, r22
    17c0:	80 95       	com	r24
    17c2:	84 23       	and	r24, r20
    17c4:	85 bb       	out	0x15, r24	; 21
    17c6:	08 95       	ret
    17c8:	61 30       	cpi	r22, 0x01	; 1
    17ca:	69 f4       	brne	.+26     	; 0x17e6 <DIO_WriteChannel+0xe8>
    17cc:	42 b3       	in	r20, 0x12	; 18
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	b9 01       	movw	r22, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_WriteChannel+0xdc>
    17d6:	66 0f       	add	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	9a 95       	dec	r25
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <DIO_WriteChannel+0xd8>
    17de:	cb 01       	movw	r24, r22
    17e0:	84 2b       	or	r24, r20
    17e2:	82 bb       	out	0x12, r24	; 18
    17e4:	08 95       	ret
    17e6:	42 b3       	in	r20, 0x12	; 18
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	b9 01       	movw	r22, r18
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <DIO_WriteChannel+0xf6>
    17f0:	66 0f       	add	r22, r22
    17f2:	77 1f       	adc	r23, r23
    17f4:	9a 95       	dec	r25
    17f6:	e2 f7       	brpl	.-8      	; 0x17f0 <DIO_WriteChannel+0xf2>
    17f8:	cb 01       	movw	r24, r22
    17fa:	80 95       	com	r24
    17fc:	84 23       	and	r24, r20
    17fe:	82 bb       	out	0x12, r24	; 18
    1800:	08 95       	ret

00001802 <DIO_ReadChannel>:
    1802:	28 2f       	mov	r18, r24
    1804:	27 70       	andi	r18, 0x07	; 7
    1806:	86 95       	lsr	r24
    1808:	86 95       	lsr	r24
    180a:	86 95       	lsr	r24
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	79 f0       	breq	.+30     	; 0x182e <DIO_ReadChannel+0x2c>
    1810:	28 f0       	brcs	.+10     	; 0x181c <DIO_ReadChannel+0x1a>
    1812:	82 30       	cpi	r24, 0x02	; 2
    1814:	a9 f0       	breq	.+42     	; 0x1840 <DIO_ReadChannel+0x3e>
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	e1 f0       	breq	.+56     	; 0x1852 <DIO_ReadChannel+0x50>
    181a:	24 c0       	rjmp	.+72     	; 0x1864 <DIO_ReadChannel+0x62>
    181c:	89 b3       	in	r24, 0x19	; 25
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <DIO_ReadChannel+0x24>
    1822:	95 95       	asr	r25
    1824:	87 95       	ror	r24
    1826:	2a 95       	dec	r18
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <DIO_ReadChannel+0x20>
    182a:	81 70       	andi	r24, 0x01	; 1
    182c:	08 95       	ret
    182e:	86 b3       	in	r24, 0x16	; 22
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <DIO_ReadChannel+0x36>
    1834:	95 95       	asr	r25
    1836:	87 95       	ror	r24
    1838:	2a 95       	dec	r18
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <DIO_ReadChannel+0x32>
    183c:	81 70       	andi	r24, 0x01	; 1
    183e:	08 95       	ret
    1840:	83 b3       	in	r24, 0x13	; 19
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 c0       	rjmp	.+4      	; 0x184a <DIO_ReadChannel+0x48>
    1846:	95 95       	asr	r25
    1848:	87 95       	ror	r24
    184a:	2a 95       	dec	r18
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <DIO_ReadChannel+0x44>
    184e:	81 70       	andi	r24, 0x01	; 1
    1850:	08 95       	ret
    1852:	80 b3       	in	r24, 0x10	; 16
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 c0       	rjmp	.+4      	; 0x185c <DIO_ReadChannel+0x5a>
    1858:	95 95       	asr	r25
    185a:	87 95       	ror	r24
    185c:	2a 95       	dec	r18
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <DIO_ReadChannel+0x56>
    1860:	81 70       	andi	r24, 0x01	; 1
    1862:	08 95       	ret
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	08 95       	ret

00001868 <DIO_ConfigChannel>:
		break;
	}
}
void DIO_ConfigChannel(DIO_ChannelTypes channelId,DIO_DataDir direction){
	DIO_PortTypes Portx = channelId/8;
	DIO_ChannelTypes BitNo = channelId%8;
    1868:	98 2f       	mov	r25, r24
    186a:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
    186c:	86 95       	lsr	r24
    186e:	86 95       	lsr	r24
    1870:	86 95       	lsr	r24
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	21 f1       	breq	.+72     	; 0x18be <DIO_ConfigChannel+0x56>
    1876:	30 f0       	brcs	.+12     	; 0x1884 <DIO_ConfigChannel+0x1c>
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	f1 f1       	breq	.+124    	; 0x18f8 <DIO_ConfigChannel+0x90>
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	09 f4       	brne	.+2      	; 0x1882 <DIO_ConfigChannel+0x1a>
    1880:	58 c0       	rjmp	.+176    	; 0x1932 <DIO_ConfigChannel+0xca>
    1882:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
    1884:	61 30       	cpi	r22, 0x01	; 1
    1886:	69 f4       	brne	.+26     	; 0x18a2 <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
    1888:	4a b3       	in	r20, 0x1a	; 26
    188a:	21 e0       	ldi	r18, 0x01	; 1
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	b9 01       	movw	r22, r18
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <DIO_ConfigChannel+0x2e>
    1892:	66 0f       	add	r22, r22
    1894:	77 1f       	adc	r23, r23
    1896:	9a 95       	dec	r25
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <DIO_ConfigChannel+0x2a>
    189a:	cb 01       	movw	r24, r22
    189c:	84 2b       	or	r24, r20
    189e:	8a bb       	out	0x1a, r24	; 26
    18a0:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
    18a2:	4a b3       	in	r20, 0x1a	; 26
    18a4:	21 e0       	ldi	r18, 0x01	; 1
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	b9 01       	movw	r22, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_ConfigChannel+0x48>
    18ac:	66 0f       	add	r22, r22
    18ae:	77 1f       	adc	r23, r23
    18b0:	9a 95       	dec	r25
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_ConfigChannel+0x44>
    18b4:	cb 01       	movw	r24, r22
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8a bb       	out	0x1a, r24	; 26
    18bc:	08 95       	ret
		}
		break;
		case DIO_PortB:
		if (direction == Output)
    18be:	61 30       	cpi	r22, 0x01	; 1
    18c0:	69 f4       	brne	.+26     	; 0x18dc <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
    18c2:	47 b3       	in	r20, 0x17	; 23
    18c4:	21 e0       	ldi	r18, 0x01	; 1
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	b9 01       	movw	r22, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <DIO_ConfigChannel+0x68>
    18cc:	66 0f       	add	r22, r22
    18ce:	77 1f       	adc	r23, r23
    18d0:	9a 95       	dec	r25
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <DIO_ConfigChannel+0x64>
    18d4:	cb 01       	movw	r24, r22
    18d6:	84 2b       	or	r24, r20
    18d8:	87 bb       	out	0x17, r24	; 23
    18da:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
    18dc:	47 b3       	in	r20, 0x17	; 23
    18de:	21 e0       	ldi	r18, 0x01	; 1
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	b9 01       	movw	r22, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_ConfigChannel+0x82>
    18e6:	66 0f       	add	r22, r22
    18e8:	77 1f       	adc	r23, r23
    18ea:	9a 95       	dec	r25
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_ConfigChannel+0x7e>
    18ee:	cb 01       	movw	r24, r22
    18f0:	80 95       	com	r24
    18f2:	84 23       	and	r24, r20
    18f4:	87 bb       	out	0x17, r24	; 23
    18f6:	08 95       	ret
		}
		break;
		case DIO_PortC:
		if (direction == Output)
    18f8:	61 30       	cpi	r22, 0x01	; 1
    18fa:	69 f4       	brne	.+26     	; 0x1916 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
    18fc:	44 b3       	in	r20, 0x14	; 20
    18fe:	21 e0       	ldi	r18, 0x01	; 1
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	b9 01       	movw	r22, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <DIO_ConfigChannel+0xa2>
    1906:	66 0f       	add	r22, r22
    1908:	77 1f       	adc	r23, r23
    190a:	9a 95       	dec	r25
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <DIO_ConfigChannel+0x9e>
    190e:	cb 01       	movw	r24, r22
    1910:	84 2b       	or	r24, r20
    1912:	84 bb       	out	0x14, r24	; 20
    1914:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
    1916:	44 b3       	in	r20, 0x14	; 20
    1918:	21 e0       	ldi	r18, 0x01	; 1
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	b9 01       	movw	r22, r18
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <DIO_ConfigChannel+0xbc>
    1920:	66 0f       	add	r22, r22
    1922:	77 1f       	adc	r23, r23
    1924:	9a 95       	dec	r25
    1926:	e2 f7       	brpl	.-8      	; 0x1920 <DIO_ConfigChannel+0xb8>
    1928:	cb 01       	movw	r24, r22
    192a:	80 95       	com	r24
    192c:	84 23       	and	r24, r20
    192e:	84 bb       	out	0x14, r24	; 20
    1930:	08 95       	ret
		}
		break;
		case DIO_PortD:
		if (direction == Output)
    1932:	61 30       	cpi	r22, 0x01	; 1
    1934:	69 f4       	brne	.+26     	; 0x1950 <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
    1936:	41 b3       	in	r20, 0x11	; 17
    1938:	21 e0       	ldi	r18, 0x01	; 1
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	b9 01       	movw	r22, r18
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <DIO_ConfigChannel+0xdc>
    1940:	66 0f       	add	r22, r22
    1942:	77 1f       	adc	r23, r23
    1944:	9a 95       	dec	r25
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <DIO_ConfigChannel+0xd8>
    1948:	cb 01       	movw	r24, r22
    194a:	84 2b       	or	r24, r20
    194c:	81 bb       	out	0x11, r24	; 17
    194e:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
    1950:	41 b3       	in	r20, 0x11	; 17
    1952:	21 e0       	ldi	r18, 0x01	; 1
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	b9 01       	movw	r22, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <DIO_ConfigChannel+0xf6>
    195a:	66 0f       	add	r22, r22
    195c:	77 1f       	adc	r23, r23
    195e:	9a 95       	dec	r25
    1960:	e2 f7       	brpl	.-8      	; 0x195a <DIO_ConfigChannel+0xf2>
    1962:	cb 01       	movw	r24, r22
    1964:	80 95       	com	r24
    1966:	84 23       	and	r24, r20
    1968:	81 bb       	out	0x11, r24	; 17
    196a:	08 95       	ret

0000196c <DIO_ReadPort>:
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
	switch(portId){
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	41 f0       	breq	.+16     	; 0x1980 <DIO_ReadPort+0x14>
    1970:	28 f0       	brcs	.+10     	; 0x197c <DIO_ReadPort+0x10>
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	39 f0       	breq	.+14     	; 0x1984 <DIO_ReadPort+0x18>
    1976:	83 30       	cpi	r24, 0x03	; 3
    1978:	39 f0       	breq	.+14     	; 0x1988 <DIO_ReadPort+0x1c>
    197a:	08 c0       	rjmp	.+16     	; 0x198c <DIO_ReadPort+0x20>
		case DIO_PortA:
		portValue = PORTA_Reg;
    197c:	8b b3       	in	r24, 0x1b	; 27
		break;
    197e:	08 95       	ret
		case DIO_PortB:
		portValue = PORTB_Reg;
    1980:	88 b3       	in	r24, 0x18	; 24
		break;
    1982:	08 95       	ret
		case DIO_PortC:
		portValue = PORTC_Reg;
    1984:	85 b3       	in	r24, 0x15	; 21
		break;
    1986:	08 95       	ret
		case DIO_PortD:
		portValue = PORTD_Reg;
    1988:	82 b3       	in	r24, 0x12	; 18
		break;
    198a:	08 95       	ret
		}
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
    198c:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		portValue = PORTD_Reg;
		break;
	}
	return portValue;
}
    198e:	08 95       	ret

00001990 <DIO_WritePort>:
void DIO_WritePort(DIO_PortTypes portId,u8 portValue){
	switch(portId){
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	41 f0       	breq	.+16     	; 0x19a4 <DIO_WritePort+0x14>
    1994:	28 f0       	brcs	.+10     	; 0x19a0 <DIO_WritePort+0x10>
    1996:	82 30       	cpi	r24, 0x02	; 2
    1998:	39 f0       	breq	.+14     	; 0x19a8 <DIO_WritePort+0x18>
    199a:	83 30       	cpi	r24, 0x03	; 3
    199c:	39 f0       	breq	.+14     	; 0x19ac <DIO_WritePort+0x1c>
    199e:	08 95       	ret
		case DIO_PortA:
		PORTA_Reg = portValue;
    19a0:	6b bb       	out	0x1b, r22	; 27
		break;
    19a2:	08 95       	ret
		case DIO_PortB:
		PORTB_Reg = portValue;
    19a4:	68 bb       	out	0x18, r22	; 24
		break;
    19a6:	08 95       	ret
		case DIO_PortC:
		PORTC_Reg = portValue;
    19a8:	65 bb       	out	0x15, r22	; 21
		break;
    19aa:	08 95       	ret
		case DIO_PortD:
		PORTD_Reg = portValue;
    19ac:	62 bb       	out	0x12, r22	; 18
    19ae:	08 95       	ret

000019b0 <DIO_Init>:
	{Output,STD_High},
	{Output,STD_High},
	{Output,STD_High}
};

void DIO_Init(){
    19b0:	e0 e8       	ldi	r30, 0x80	; 128
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
    19b4:	80 e0       	ldi	r24, 0x00	; 0
			{
				SetBit(DDRB_Reg,BitNo);
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	50 e0       	ldi	r21, 0x00	; 0
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
	{
		Portx = count/8;
		BitNo = count%8;
    19ba:	28 2f       	mov	r18, r24
    19bc:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
    19be:	98 2f       	mov	r25, r24
    19c0:	96 95       	lsr	r25
    19c2:	96 95       	lsr	r25
    19c4:	96 95       	lsr	r25
    19c6:	91 30       	cpi	r25, 0x01	; 1
    19c8:	09 f1       	breq	.+66     	; 0x1a0c <DIO_Init+0x5c>
    19ca:	30 f0       	brcs	.+12     	; 0x19d8 <DIO_Init+0x28>
    19cc:	92 30       	cpi	r25, 0x02	; 2
    19ce:	c1 f1       	breq	.+112    	; 0x1a40 <DIO_Init+0x90>
    19d0:	93 30       	cpi	r25, 0x03	; 3
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <DIO_Init+0x26>
    19d4:	4f c0       	rjmp	.+158    	; 0x1a74 <DIO_Init+0xc4>
    19d6:	67 c0       	rjmp	.+206    	; 0x1aa6 <DIO_Init+0xf6>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
    19d8:	90 81       	ld	r25, Z
    19da:	91 30       	cpi	r25, 0x01	; 1
    19dc:	59 f4       	brne	.+22     	; 0x19f4 <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg,BitNo);
    19de:	9a b3       	in	r25, 0x1a	; 26
    19e0:	ba 01       	movw	r22, r20
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_Init+0x38>
    19e4:	66 0f       	add	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	2a 95       	dec	r18
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_Init+0x34>
    19ec:	9b 01       	movw	r18, r22
    19ee:	29 2b       	or	r18, r25
    19f0:	2a bb       	out	0x1a, r18	; 26
    19f2:	59 c0       	rjmp	.+178    	; 0x1aa6 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
    19f4:	3a b3       	in	r19, 0x1a	; 26
    19f6:	ba 01       	movw	r22, r20
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <DIO_Init+0x4e>
    19fa:	66 0f       	add	r22, r22
    19fc:	77 1f       	adc	r23, r23
    19fe:	2a 95       	dec	r18
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <DIO_Init+0x4a>
    1a02:	96 2f       	mov	r25, r22
    1a04:	90 95       	com	r25
    1a06:	93 23       	and	r25, r19
    1a08:	9a bb       	out	0x1a, r25	; 26
    1a0a:	4d c0       	rjmp	.+154    	; 0x1aa6 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
    1a0c:	90 81       	ld	r25, Z
    1a0e:	91 30       	cpi	r25, 0x01	; 1
    1a10:	59 f4       	brne	.+22     	; 0x1a28 <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg,BitNo);
    1a12:	97 b3       	in	r25, 0x17	; 23
    1a14:	ba 01       	movw	r22, r20
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <DIO_Init+0x6c>
    1a18:	66 0f       	add	r22, r22
    1a1a:	77 1f       	adc	r23, r23
    1a1c:	2a 95       	dec	r18
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <DIO_Init+0x68>
    1a20:	9b 01       	movw	r18, r22
    1a22:	29 2b       	or	r18, r25
    1a24:	27 bb       	out	0x17, r18	; 23
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
    1a28:	37 b3       	in	r19, 0x17	; 23
    1a2a:	ba 01       	movw	r22, r20
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <DIO_Init+0x82>
    1a2e:	66 0f       	add	r22, r22
    1a30:	77 1f       	adc	r23, r23
    1a32:	2a 95       	dec	r18
    1a34:	e2 f7       	brpl	.-8      	; 0x1a2e <DIO_Init+0x7e>
    1a36:	96 2f       	mov	r25, r22
    1a38:	90 95       	com	r25
    1a3a:	93 23       	and	r25, r19
    1a3c:	97 bb       	out	0x17, r25	; 23
    1a3e:	33 c0       	rjmp	.+102    	; 0x1aa6 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
    1a40:	90 81       	ld	r25, Z
    1a42:	91 30       	cpi	r25, 0x01	; 1
    1a44:	59 f4       	brne	.+22     	; 0x1a5c <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg,BitNo);
    1a46:	94 b3       	in	r25, 0x14	; 20
    1a48:	ba 01       	movw	r22, r20
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <DIO_Init+0xa0>
    1a4c:	66 0f       	add	r22, r22
    1a4e:	77 1f       	adc	r23, r23
    1a50:	2a 95       	dec	r18
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <DIO_Init+0x9c>
    1a54:	9b 01       	movw	r18, r22
    1a56:	29 2b       	or	r18, r25
    1a58:	24 bb       	out	0x14, r18	; 20
    1a5a:	25 c0       	rjmp	.+74     	; 0x1aa6 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
    1a5c:	34 b3       	in	r19, 0x14	; 20
    1a5e:	ba 01       	movw	r22, r20
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_Init+0xb6>
    1a62:	66 0f       	add	r22, r22
    1a64:	77 1f       	adc	r23, r23
    1a66:	2a 95       	dec	r18
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_Init+0xb2>
    1a6a:	96 2f       	mov	r25, r22
    1a6c:	90 95       	com	r25
    1a6e:	93 23       	and	r25, r19
    1a70:	94 bb       	out	0x14, r25	; 20
    1a72:	19 c0       	rjmp	.+50     	; 0x1aa6 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
    1a74:	90 81       	ld	r25, Z
    1a76:	91 30       	cpi	r25, 0x01	; 1
    1a78:	59 f4       	brne	.+22     	; 0x1a90 <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg,BitNo);
    1a7a:	91 b3       	in	r25, 0x11	; 17
    1a7c:	ba 01       	movw	r22, r20
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <DIO_Init+0xd4>
    1a80:	66 0f       	add	r22, r22
    1a82:	77 1f       	adc	r23, r23
    1a84:	2a 95       	dec	r18
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <DIO_Init+0xd0>
    1a88:	9b 01       	movw	r18, r22
    1a8a:	29 2b       	or	r18, r25
    1a8c:	21 bb       	out	0x11, r18	; 17
    1a8e:	0b c0       	rjmp	.+22     	; 0x1aa6 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
    1a90:	31 b3       	in	r19, 0x11	; 17
    1a92:	ba 01       	movw	r22, r20
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <DIO_Init+0xea>
    1a96:	66 0f       	add	r22, r22
    1a98:	77 1f       	adc	r23, r23
    1a9a:	2a 95       	dec	r18
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <DIO_Init+0xe6>
    1a9e:	96 2f       	mov	r25, r22
    1aa0:	90 95       	com	r25
    1aa2:	93 23       	and	r25, r19
    1aa4:	91 bb       	out	0x11, r25	; 17

void DIO_Init(){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count = DIO_ChannelA0;count<PINCOUNT;count++)
    1aa6:	8f 5f       	subi	r24, 0xFF	; 255
    1aa8:	32 96       	adiw	r30, 0x02	; 2
    1aaa:	80 32       	cpi	r24, 0x20	; 32
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <DIO_Init+0x100>
    1aae:	85 cf       	rjmp	.-246    	; 0x19ba <DIO_Init+0xa>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
    1ab0:	08 95       	ret

00001ab2 <__vector_1>:
		break;
	}
}


ISR(INT0_vect){
    1ab2:	1f 92       	push	r1
    1ab4:	0f 92       	push	r0
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	0f 92       	push	r0
    1aba:	11 24       	eor	r1, r1
    1abc:	2f 93       	push	r18
    1abe:	3f 93       	push	r19
    1ac0:	4f 93       	push	r20
    1ac2:	5f 93       	push	r21
    1ac4:	6f 93       	push	r22
    1ac6:	7f 93       	push	r23
    1ac8:	8f 93       	push	r24
    1aca:	9f 93       	push	r25
    1acc:	af 93       	push	r26
    1ace:	bf 93       	push	r27
    1ad0:	ef 93       	push	r30
    1ad2:	ff 93       	push	r31
	ExtInt0FunPtr();
    1ad4:	e0 91 72 05 	lds	r30, 0x0572	; 0x800572 <ExtInt0FunPtr>
    1ad8:	f0 91 73 05 	lds	r31, 0x0573	; 0x800573 <ExtInt0FunPtr+0x1>
    1adc:	09 95       	icall
}
    1ade:	ff 91       	pop	r31
    1ae0:	ef 91       	pop	r30
    1ae2:	bf 91       	pop	r27
    1ae4:	af 91       	pop	r26
    1ae6:	9f 91       	pop	r25
    1ae8:	8f 91       	pop	r24
    1aea:	7f 91       	pop	r23
    1aec:	6f 91       	pop	r22
    1aee:	5f 91       	pop	r21
    1af0:	4f 91       	pop	r20
    1af2:	3f 91       	pop	r19
    1af4:	2f 91       	pop	r18
    1af6:	0f 90       	pop	r0
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	0f 90       	pop	r0
    1afc:	1f 90       	pop	r1
    1afe:	18 95       	reti

00001b00 <__vector_2>:

ISR(INT1_vect){
    1b00:	1f 92       	push	r1
    1b02:	0f 92       	push	r0
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	0f 92       	push	r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	2f 93       	push	r18
    1b0c:	3f 93       	push	r19
    1b0e:	4f 93       	push	r20
    1b10:	5f 93       	push	r21
    1b12:	6f 93       	push	r22
    1b14:	7f 93       	push	r23
    1b16:	8f 93       	push	r24
    1b18:	9f 93       	push	r25
    1b1a:	af 93       	push	r26
    1b1c:	bf 93       	push	r27
    1b1e:	ef 93       	push	r30
    1b20:	ff 93       	push	r31
	ExtInt1FunPtr();
    1b22:	e0 91 70 05 	lds	r30, 0x0570	; 0x800570 <ExtInt1FunPtr>
    1b26:	f0 91 71 05 	lds	r31, 0x0571	; 0x800571 <ExtInt1FunPtr+0x1>
    1b2a:	09 95       	icall
}
    1b2c:	ff 91       	pop	r31
    1b2e:	ef 91       	pop	r30
    1b30:	bf 91       	pop	r27
    1b32:	af 91       	pop	r26
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	7f 91       	pop	r23
    1b3a:	6f 91       	pop	r22
    1b3c:	5f 91       	pop	r21
    1b3e:	4f 91       	pop	r20
    1b40:	3f 91       	pop	r19
    1b42:	2f 91       	pop	r18
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <__vector_3>:

ISR(INT2_vect){
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	2f 93       	push	r18
    1b5a:	3f 93       	push	r19
    1b5c:	4f 93       	push	r20
    1b5e:	5f 93       	push	r21
    1b60:	6f 93       	push	r22
    1b62:	7f 93       	push	r23
    1b64:	8f 93       	push	r24
    1b66:	9f 93       	push	r25
    1b68:	af 93       	push	r26
    1b6a:	bf 93       	push	r27
    1b6c:	ef 93       	push	r30
    1b6e:	ff 93       	push	r31
	ExtInt2FunPtr();
    1b70:	e0 91 6e 05 	lds	r30, 0x056E	; 0x80056e <__data_end>
    1b74:	f0 91 6f 05 	lds	r31, 0x056F	; 0x80056f <__data_end+0x1>
    1b78:	09 95       	icall
    1b7a:	ff 91       	pop	r31
    1b7c:	ef 91       	pop	r30
    1b7e:	bf 91       	pop	r27
    1b80:	af 91       	pop	r26
    1b82:	9f 91       	pop	r25
    1b84:	8f 91       	pop	r24
    1b86:	7f 91       	pop	r23
    1b88:	6f 91       	pop	r22
    1b8a:	5f 91       	pop	r21
    1b8c:	4f 91       	pop	r20
    1b8e:	3f 91       	pop	r19
    1b90:	2f 91       	pop	r18
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	0f 90       	pop	r0
    1b98:	1f 90       	pop	r1
    1b9a:	18 95       	reti

00001b9c <SPI_Init>:
*  Author: user
*/
#include "SPI.h"


void SPI_Init(SPI_ConfigTypes * options){
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	ec 01       	movw	r28, r24
	switch(options->stateMode){
    1ba2:	88 81       	ld	r24, Y
    1ba4:	88 23       	and	r24, r24
    1ba6:	a9 f0       	breq	.+42     	; 0x1bd2 <SPI_Init+0x36>
    1ba8:	81 30       	cpi	r24, 0x01	; 1
    1baa:	29 f5       	brne	.+74     	; 0x1bf6 <SPI_Init+0x5a>
		case Master:
		DIO_ConfigChannel(SPI_SSPin,Output);
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	8c e0       	ldi	r24, 0x0C	; 12
    1bb0:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Output);
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	8d e0       	ldi	r24, 0x0D	; 13
    1bb8:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Input);
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	8e e0       	ldi	r24, 0x0E	; 14
    1bc0:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Output);
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	8f e0       	ldi	r24, 0x0F	; 15
    1bc8:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 1;
    1bcc:	6c 9a       	sbi	0x0d, 4	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
    1bce:	6e 9a       	sbi	0x0d, 6	; 13
		break;
    1bd0:	12 c0       	rjmp	.+36     	; 0x1bf6 <SPI_Init+0x5a>
		case Slave:
		DIO_ConfigChannel(SPI_SSPin,Input);
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	8c e0       	ldi	r24, 0x0C	; 12
    1bd6:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MOSIPin,Input);
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	8d e0       	ldi	r24, 0x0D	; 13
    1bde:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_MISOPin,Output);
    1be2:	61 e0       	ldi	r22, 0x01	; 1
    1be4:	8e e0       	ldi	r24, 0x0E	; 14
    1be6:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
		DIO_ConfigChannel(SPI_SCKPin,Input);
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	8f e0       	ldi	r24, 0x0F	; 15
    1bee:	0e 94 34 0c 	call	0x1868	; 0x1868 <DIO_ConfigChannel>
		SPI->SPCR_Reg.Bits.MSTR_Bit = 0;
    1bf2:	6c 98       	cbi	0x0d, 4	; 13
		SPI->SPCR_Reg.Bits.SPE_Bit = 1;
    1bf4:	6e 9a       	sbi	0x0d, 6	; 13
		break;
	}
	SPI->SPCR_Reg.AllRegister |= (options->dataOrderMode<<5);
    1bf6:	2d b1       	in	r18, 0x0d	; 13
    1bf8:	99 81       	ldd	r25, Y+1	; 0x01
    1bfa:	30 e2       	ldi	r19, 0x20	; 32
    1bfc:	93 9f       	mul	r25, r19
    1bfe:	c0 01       	movw	r24, r0
    1c00:	11 24       	eor	r1, r1
    1c02:	82 2b       	or	r24, r18
    1c04:	8d b9       	out	0x0d, r24	; 13
	if (options->doubleSpeedMode == DoupleSpeedEnable)
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	31 f4       	brne	.+12     	; 0x1c18 <SPI_Init+0x7c>
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 1;
    1c0c:	70 9a       	sbi	0x0e, 0	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
    1c0e:	9d b1       	in	r25, 0x0d	; 13
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	89 2b       	or	r24, r25
    1c14:	8d b9       	out	0x0d, r24	; 13
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <SPI_Init+0x86>
	}
	else
	{
		SPI->SPSR_Reg.Bits.SPI2X_Bit = 0;
    1c18:	70 98       	cbi	0x0e, 0	; 14
		SPI->SPCR_Reg.AllRegister |= (options->clockMode<<0);
    1c1a:	9d b1       	in	r25, 0x0d	; 13
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	89 2b       	or	r24, r25
    1c20:	8d b9       	out	0x0d, r24	; 13
	}
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

00001c28 <SPI_TxRx>:
u8 SPI_TxRx(u8 data){
	SPI->SPDR_Reg = data;
    1c28:	8f b9       	out	0x0f, r24	; 15
	while(SPI->SPSR_Reg.Bits.SPIF_Bit == 0);
    1c2a:	77 9b       	sbis	0x0e, 7	; 14
    1c2c:	fe cf       	rjmp	.-4      	; 0x1c2a <SPI_TxRx+0x2>
	return SPI->SPDR_Reg;
    1c2e:	8f b1       	in	r24, 0x0f	; 15
}
    1c30:	08 95       	ret

00001c32 <TIMER1_Init>:
}
void TIMER1_OCR1A_SetValue(u16 value){
	TIMER1_OCR1A_Reg = value;
}
void TIMER1_OCR1B_SetValue(u16 value){
	TIMER1_OCR1B_Reg = value;
    1c32:	fc 01       	movw	r30, r24
    1c34:	80 81       	ld	r24, Z
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	99 f0       	breq	.+38     	; 0x1c60 <TIMER1_Init+0x2e>
    1c3a:	28 f0       	brcs	.+10     	; 0x1c46 <TIMER1_Init+0x14>
    1c3c:	82 30       	cpi	r24, 0x02	; 2
    1c3e:	e9 f0       	breq	.+58     	; 0x1c7a <TIMER1_Init+0x48>
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	41 f1       	breq	.+80     	; 0x1c94 <TIMER1_Init+0x62>
    1c44:	33 c0       	rjmp	.+102    	; 0x1cac <TIMER1_Init+0x7a>
    1c46:	8f b5       	in	r24, 0x2f	; 47
    1c48:	8e 7f       	andi	r24, 0xFE	; 254
    1c4a:	8f bd       	out	0x2f, r24	; 47
    1c4c:	8f b5       	in	r24, 0x2f	; 47
    1c4e:	8d 7f       	andi	r24, 0xFD	; 253
    1c50:	8f bd       	out	0x2f, r24	; 47
    1c52:	8e b5       	in	r24, 0x2e	; 46
    1c54:	87 7f       	andi	r24, 0xF7	; 247
    1c56:	8e bd       	out	0x2e, r24	; 46
    1c58:	8e b5       	in	r24, 0x2e	; 46
    1c5a:	8f 7e       	andi	r24, 0xEF	; 239
    1c5c:	8e bd       	out	0x2e, r24	; 46
    1c5e:	26 c0       	rjmp	.+76     	; 0x1cac <TIMER1_Init+0x7a>
    1c60:	8f b5       	in	r24, 0x2f	; 47
    1c62:	8e 7f       	andi	r24, 0xFE	; 254
    1c64:	8f bd       	out	0x2f, r24	; 47
    1c66:	8f b5       	in	r24, 0x2f	; 47
    1c68:	8d 7f       	andi	r24, 0xFD	; 253
    1c6a:	8f bd       	out	0x2f, r24	; 47
    1c6c:	8e b5       	in	r24, 0x2e	; 46
    1c6e:	88 60       	ori	r24, 0x08	; 8
    1c70:	8e bd       	out	0x2e, r24	; 46
    1c72:	8e b5       	in	r24, 0x2e	; 46
    1c74:	8f 7e       	andi	r24, 0xEF	; 239
    1c76:	8e bd       	out	0x2e, r24	; 46
    1c78:	19 c0       	rjmp	.+50     	; 0x1cac <TIMER1_Init+0x7a>
    1c7a:	8f b5       	in	r24, 0x2f	; 47
    1c7c:	8e 7f       	andi	r24, 0xFE	; 254
    1c7e:	8f bd       	out	0x2f, r24	; 47
    1c80:	8f b5       	in	r24, 0x2f	; 47
    1c82:	82 60       	ori	r24, 0x02	; 2
    1c84:	8f bd       	out	0x2f, r24	; 47
    1c86:	8e b5       	in	r24, 0x2e	; 46
    1c88:	88 60       	ori	r24, 0x08	; 8
    1c8a:	8e bd       	out	0x2e, r24	; 46
    1c8c:	8e b5       	in	r24, 0x2e	; 46
    1c8e:	80 61       	ori	r24, 0x10	; 16
    1c90:	8e bd       	out	0x2e, r24	; 46
    1c92:	0c c0       	rjmp	.+24     	; 0x1cac <TIMER1_Init+0x7a>
    1c94:	8f b5       	in	r24, 0x2f	; 47
    1c96:	8e 7f       	andi	r24, 0xFE	; 254
    1c98:	8f bd       	out	0x2f, r24	; 47
    1c9a:	8f b5       	in	r24, 0x2f	; 47
    1c9c:	82 60       	ori	r24, 0x02	; 2
    1c9e:	8f bd       	out	0x2f, r24	; 47
    1ca0:	8e b5       	in	r24, 0x2e	; 46
    1ca2:	87 7f       	andi	r24, 0xF7	; 247
    1ca4:	8e bd       	out	0x2e, r24	; 46
    1ca6:	8e b5       	in	r24, 0x2e	; 46
    1ca8:	80 61       	ori	r24, 0x10	; 16
    1caa:	8e bd       	out	0x2e, r24	; 46
    1cac:	81 81       	ldd	r24, Z+1	; 0x01
    1cae:	82 30       	cpi	r24, 0x02	; 2
    1cb0:	01 f1       	breq	.+64     	; 0x1cf2 <TIMER1_Init+0xc0>
    1cb2:	28 f4       	brcc	.+10     	; 0x1cbe <TIMER1_Init+0x8c>
    1cb4:	88 23       	and	r24, r24
    1cb6:	49 f0       	breq	.+18     	; 0x1cca <TIMER1_Init+0x98>
    1cb8:	81 30       	cpi	r24, 0x01	; 1
    1cba:	89 f0       	breq	.+34     	; 0x1cde <TIMER1_Init+0xac>
    1cbc:	41 c0       	rjmp	.+130    	; 0x1d40 <TIMER1_Init+0x10e>
    1cbe:	84 30       	cpi	r24, 0x04	; 4
    1cc0:	61 f1       	breq	.+88     	; 0x1d1a <TIMER1_Init+0xe8>
    1cc2:	08 f1       	brcs	.+66     	; 0x1d06 <TIMER1_Init+0xd4>
    1cc4:	85 30       	cpi	r24, 0x05	; 5
    1cc6:	99 f1       	breq	.+102    	; 0x1d2e <TIMER1_Init+0xfc>
    1cc8:	3b c0       	rjmp	.+118    	; 0x1d40 <TIMER1_Init+0x10e>
    1cca:	8e b5       	in	r24, 0x2e	; 46
    1ccc:	8e 7f       	andi	r24, 0xFE	; 254
    1cce:	8e bd       	out	0x2e, r24	; 46
    1cd0:	8e b5       	in	r24, 0x2e	; 46
    1cd2:	8d 7f       	andi	r24, 0xFD	; 253
    1cd4:	8e bd       	out	0x2e, r24	; 46
    1cd6:	8e b5       	in	r24, 0x2e	; 46
    1cd8:	8b 7f       	andi	r24, 0xFB	; 251
    1cda:	8e bd       	out	0x2e, r24	; 46
    1cdc:	31 c0       	rjmp	.+98     	; 0x1d40 <TIMER1_Init+0x10e>
    1cde:	8e b5       	in	r24, 0x2e	; 46
    1ce0:	81 60       	ori	r24, 0x01	; 1
    1ce2:	8e bd       	out	0x2e, r24	; 46
    1ce4:	8e b5       	in	r24, 0x2e	; 46
    1ce6:	8d 7f       	andi	r24, 0xFD	; 253
    1ce8:	8e bd       	out	0x2e, r24	; 46
    1cea:	8e b5       	in	r24, 0x2e	; 46
    1cec:	8b 7f       	andi	r24, 0xFB	; 251
    1cee:	8e bd       	out	0x2e, r24	; 46
    1cf0:	27 c0       	rjmp	.+78     	; 0x1d40 <TIMER1_Init+0x10e>
    1cf2:	8e b5       	in	r24, 0x2e	; 46
    1cf4:	8e 7f       	andi	r24, 0xFE	; 254
    1cf6:	8e bd       	out	0x2e, r24	; 46
    1cf8:	8e b5       	in	r24, 0x2e	; 46
    1cfa:	82 60       	ori	r24, 0x02	; 2
    1cfc:	8e bd       	out	0x2e, r24	; 46
    1cfe:	8e b5       	in	r24, 0x2e	; 46
    1d00:	8b 7f       	andi	r24, 0xFB	; 251
    1d02:	8e bd       	out	0x2e, r24	; 46
    1d04:	1d c0       	rjmp	.+58     	; 0x1d40 <TIMER1_Init+0x10e>
    1d06:	8e b5       	in	r24, 0x2e	; 46
    1d08:	81 60       	ori	r24, 0x01	; 1
    1d0a:	8e bd       	out	0x2e, r24	; 46
    1d0c:	8e b5       	in	r24, 0x2e	; 46
    1d0e:	82 60       	ori	r24, 0x02	; 2
    1d10:	8e bd       	out	0x2e, r24	; 46
    1d12:	8e b5       	in	r24, 0x2e	; 46
    1d14:	8b 7f       	andi	r24, 0xFB	; 251
    1d16:	8e bd       	out	0x2e, r24	; 46
    1d18:	13 c0       	rjmp	.+38     	; 0x1d40 <TIMER1_Init+0x10e>
    1d1a:	8e b5       	in	r24, 0x2e	; 46
    1d1c:	8e 7f       	andi	r24, 0xFE	; 254
    1d1e:	8e bd       	out	0x2e, r24	; 46
    1d20:	8e b5       	in	r24, 0x2e	; 46
    1d22:	8d 7f       	andi	r24, 0xFD	; 253
    1d24:	8e bd       	out	0x2e, r24	; 46
    1d26:	8e b5       	in	r24, 0x2e	; 46
    1d28:	84 60       	ori	r24, 0x04	; 4
    1d2a:	8e bd       	out	0x2e, r24	; 46
    1d2c:	09 c0       	rjmp	.+18     	; 0x1d40 <TIMER1_Init+0x10e>
    1d2e:	8e b5       	in	r24, 0x2e	; 46
    1d30:	81 60       	ori	r24, 0x01	; 1
    1d32:	8e bd       	out	0x2e, r24	; 46
    1d34:	8e b5       	in	r24, 0x2e	; 46
    1d36:	8d 7f       	andi	r24, 0xFD	; 253
    1d38:	8e bd       	out	0x2e, r24	; 46
    1d3a:	8e b5       	in	r24, 0x2e	; 46
    1d3c:	84 60       	ori	r24, 0x04	; 4
    1d3e:	8e bd       	out	0x2e, r24	; 46
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	82 30       	cpi	r24, 0x02	; 2
    1d44:	59 f0       	breq	.+22     	; 0x1d5c <TIMER1_Init+0x12a>
    1d46:	83 30       	cpi	r24, 0x03	; 3
    1d48:	81 f0       	breq	.+32     	; 0x1d6a <TIMER1_Init+0x138>
    1d4a:	81 11       	cpse	r24, r1
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <TIMER1_Init+0x144>
    1d4e:	8f b5       	in	r24, 0x2f	; 47
    1d50:	8f 7b       	andi	r24, 0xBF	; 191
    1d52:	8f bd       	out	0x2f, r24	; 47
    1d54:	8f b5       	in	r24, 0x2f	; 47
    1d56:	8f 77       	andi	r24, 0x7F	; 127
    1d58:	8f bd       	out	0x2f, r24	; 47
    1d5a:	0d c0       	rjmp	.+26     	; 0x1d76 <TIMER1_Init+0x144>
    1d5c:	8f b5       	in	r24, 0x2f	; 47
    1d5e:	8f 7b       	andi	r24, 0xBF	; 191
    1d60:	8f bd       	out	0x2f, r24	; 47
    1d62:	8f b5       	in	r24, 0x2f	; 47
    1d64:	80 68       	ori	r24, 0x80	; 128
    1d66:	8f bd       	out	0x2f, r24	; 47
    1d68:	06 c0       	rjmp	.+12     	; 0x1d76 <TIMER1_Init+0x144>
    1d6a:	8f b5       	in	r24, 0x2f	; 47
    1d6c:	8f 7b       	andi	r24, 0xBF	; 191
    1d6e:	8f bd       	out	0x2f, r24	; 47
    1d70:	8f b5       	in	r24, 0x2f	; 47
    1d72:	8f 77       	andi	r24, 0x7F	; 127
    1d74:	8f bd       	out	0x2f, r24	; 47
    1d76:	99 b7       	in	r25, 0x39	; 57
    1d78:	87 81       	ldd	r24, Z+7	; 0x07
    1d7a:	88 0f       	add	r24, r24
    1d7c:	88 0f       	add	r24, r24
    1d7e:	89 2b       	or	r24, r25
    1d80:	89 bf       	out	0x39, r24	; 57
    1d82:	08 95       	ret

00001d84 <TIMER1_OCR1A_SetValue>:
    1d84:	9b bd       	out	0x2b, r25	; 43
    1d86:	8a bd       	out	0x2a, r24	; 42
    1d88:	08 95       	ret

00001d8a <TIMER1_ICR_SetValue>:
}
void TIMER1_ICR_SetValue(u16 value){
	TIMER1_ICR1_Reg = value;
    1d8a:	97 bd       	out	0x27, r25	; 39
    1d8c:	86 bd       	out	0x26, r24	; 38
    1d8e:	08 95       	ret

00001d90 <__vector_7>:
}

ISR(TIMER1_COMPA_vect){
    1d90:	1f 92       	push	r1
    1d92:	0f 92       	push	r0
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	0f 92       	push	r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	2f 93       	push	r18
    1d9c:	3f 93       	push	r19
    1d9e:	4f 93       	push	r20
    1da0:	5f 93       	push	r21
    1da2:	6f 93       	push	r22
    1da4:	7f 93       	push	r23
    1da6:	8f 93       	push	r24
    1da8:	9f 93       	push	r25
    1daa:	af 93       	push	r26
    1dac:	bf 93       	push	r27
    1dae:	ef 93       	push	r30
    1db0:	ff 93       	push	r31
	Timer1Oc1aIntFunPtr();
    1db2:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <Timer1Oc1aIntFunPtr>
    1db6:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <Timer1Oc1aIntFunPtr+0x1>
    1dba:	09 95       	icall
}
    1dbc:	ff 91       	pop	r31
    1dbe:	ef 91       	pop	r30
    1dc0:	bf 91       	pop	r27
    1dc2:	af 91       	pop	r26
    1dc4:	9f 91       	pop	r25
    1dc6:	8f 91       	pop	r24
    1dc8:	7f 91       	pop	r23
    1dca:	6f 91       	pop	r22
    1dcc:	5f 91       	pop	r21
    1dce:	4f 91       	pop	r20
    1dd0:	3f 91       	pop	r19
    1dd2:	2f 91       	pop	r18
    1dd4:	0f 90       	pop	r0
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	0f 90       	pop	r0
    1dda:	1f 90       	pop	r1
    1ddc:	18 95       	reti

00001dde <__vector_8>:

ISR(TIMER1_COMPB_vect){
    1dde:	1f 92       	push	r1
    1de0:	0f 92       	push	r0
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	0f 92       	push	r0
    1de6:	11 24       	eor	r1, r1
    1de8:	2f 93       	push	r18
    1dea:	3f 93       	push	r19
    1dec:	4f 93       	push	r20
    1dee:	5f 93       	push	r21
    1df0:	6f 93       	push	r22
    1df2:	7f 93       	push	r23
    1df4:	8f 93       	push	r24
    1df6:	9f 93       	push	r25
    1df8:	af 93       	push	r26
    1dfa:	bf 93       	push	r27
    1dfc:	ef 93       	push	r30
    1dfe:	ff 93       	push	r31
	Timer1Oc1bIntFunPtr();
    1e00:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <Timer1Oc1bIntFunPtr>
    1e04:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <Timer1Oc1bIntFunPtr+0x1>
    1e08:	09 95       	icall
}
    1e0a:	ff 91       	pop	r31
    1e0c:	ef 91       	pop	r30
    1e0e:	bf 91       	pop	r27
    1e10:	af 91       	pop	r26
    1e12:	9f 91       	pop	r25
    1e14:	8f 91       	pop	r24
    1e16:	7f 91       	pop	r23
    1e18:	6f 91       	pop	r22
    1e1a:	5f 91       	pop	r21
    1e1c:	4f 91       	pop	r20
    1e1e:	3f 91       	pop	r19
    1e20:	2f 91       	pop	r18
    1e22:	0f 90       	pop	r0
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	0f 90       	pop	r0
    1e28:	1f 90       	pop	r1
    1e2a:	18 95       	reti

00001e2c <__vector_9>:

ISR(TIMER1_OVF_vect){
    1e2c:	1f 92       	push	r1
    1e2e:	0f 92       	push	r0
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	0f 92       	push	r0
    1e34:	11 24       	eor	r1, r1
    1e36:	2f 93       	push	r18
    1e38:	3f 93       	push	r19
    1e3a:	4f 93       	push	r20
    1e3c:	5f 93       	push	r21
    1e3e:	6f 93       	push	r22
    1e40:	7f 93       	push	r23
    1e42:	8f 93       	push	r24
    1e44:	9f 93       	push	r25
    1e46:	af 93       	push	r26
    1e48:	bf 93       	push	r27
    1e4a:	ef 93       	push	r30
    1e4c:	ff 93       	push	r31
	Timer1TovIntFunPtr();
    1e4e:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <Timer1TovIntFunPtr>
    1e52:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <Timer1TovIntFunPtr+0x1>
    1e56:	09 95       	icall
}
    1e58:	ff 91       	pop	r31
    1e5a:	ef 91       	pop	r30
    1e5c:	bf 91       	pop	r27
    1e5e:	af 91       	pop	r26
    1e60:	9f 91       	pop	r25
    1e62:	8f 91       	pop	r24
    1e64:	7f 91       	pop	r23
    1e66:	6f 91       	pop	r22
    1e68:	5f 91       	pop	r21
    1e6a:	4f 91       	pop	r20
    1e6c:	3f 91       	pop	r19
    1e6e:	2f 91       	pop	r18
    1e70:	0f 90       	pop	r0
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	0f 90       	pop	r0
    1e76:	1f 90       	pop	r1
    1e78:	18 95       	reti

00001e7a <TWI_Init>:
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
	while(TWI->TWCR_Reg.Bits.TWINT_Bit == 0);//Waiting the flag
	*data = TWI->TWDR_Reg;
	return TWI_Status();
}
    1e7a:	82 b9       	out	0x02, r24	; 2
    1e7c:	8e e0       	ldi	r24, 0x0E	; 14
    1e7e:	80 b9       	out	0x00, r24	; 0
    1e80:	08 95       	ret

00001e82 <TWI_Start>:
    1e82:	86 b7       	in	r24, 0x36	; 54
    1e84:	80 62       	ori	r24, 0x20	; 32
    1e86:	86 bf       	out	0x36, r24	; 54
    1e88:	86 b7       	in	r24, 0x36	; 54
    1e8a:	8f 7e       	andi	r24, 0xEF	; 239
    1e8c:	86 bf       	out	0x36, r24	; 54
    1e8e:	86 b7       	in	r24, 0x36	; 54
    1e90:	8f 7b       	andi	r24, 0xBF	; 191
    1e92:	86 bf       	out	0x36, r24	; 54
    1e94:	86 b7       	in	r24, 0x36	; 54
    1e96:	84 60       	ori	r24, 0x04	; 4
    1e98:	86 bf       	out	0x36, r24	; 54
    1e9a:	86 b7       	in	r24, 0x36	; 54
    1e9c:	80 68       	ori	r24, 0x80	; 128
    1e9e:	86 bf       	out	0x36, r24	; 54
    1ea0:	06 b6       	in	r0, 0x36	; 54
    1ea2:	07 fe       	sbrs	r0, 7
    1ea4:	fd cf       	rjmp	.-6      	; 0x1ea0 <TWI_Start+0x1e>
    1ea6:	81 b1       	in	r24, 0x01	; 1
    1ea8:	88 7f       	andi	r24, 0xF8	; 248
    1eaa:	08 95       	ret

00001eac <TWI_Send>:
    1eac:	83 b9       	out	0x03, r24	; 3
    1eae:	86 b7       	in	r24, 0x36	; 54
    1eb0:	8f 7d       	andi	r24, 0xDF	; 223
    1eb2:	86 bf       	out	0x36, r24	; 54
    1eb4:	86 b7       	in	r24, 0x36	; 54
    1eb6:	8f 7e       	andi	r24, 0xEF	; 239
    1eb8:	86 bf       	out	0x36, r24	; 54
    1eba:	86 b7       	in	r24, 0x36	; 54
    1ebc:	8f 7b       	andi	r24, 0xBF	; 191
    1ebe:	86 bf       	out	0x36, r24	; 54
    1ec0:	86 b7       	in	r24, 0x36	; 54
    1ec2:	84 60       	ori	r24, 0x04	; 4
    1ec4:	86 bf       	out	0x36, r24	; 54
    1ec6:	86 b7       	in	r24, 0x36	; 54
    1ec8:	80 68       	ori	r24, 0x80	; 128
    1eca:	86 bf       	out	0x36, r24	; 54
    1ecc:	06 b6       	in	r0, 0x36	; 54
    1ece:	07 fe       	sbrs	r0, 7
    1ed0:	fd cf       	rjmp	.-6      	; 0x1ecc <TWI_Send+0x20>
    1ed2:	81 b1       	in	r24, 0x01	; 1
    1ed4:	88 7f       	andi	r24, 0xF8	; 248
    1ed6:	08 95       	ret

00001ed8 <TWI_Read_NAck>:
u8 TWI_Read_NAck(u8 * data){
    1ed8:	fc 01       	movw	r30, r24
	TWI->TWCR_Reg.Bits.TWSTA_Bit = 0;//Enable/Disable Start
    1eda:	96 b7       	in	r25, 0x36	; 54
    1edc:	9f 7d       	andi	r25, 0xDF	; 223
    1ede:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWSTO_Bit = 0;//Enable/Disable Stop at the End
    1ee0:	96 b7       	in	r25, 0x36	; 54
    1ee2:	9f 7e       	andi	r25, 0xEF	; 239
    1ee4:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWEA_Bit = 0;//Read with Ack. Bit
    1ee6:	96 b7       	in	r25, 0x36	; 54
    1ee8:	9f 7b       	andi	r25, 0xBF	; 191
    1eea:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
    1eec:	96 b7       	in	r25, 0x36	; 54
    1eee:	94 60       	ori	r25, 0x04	; 4
    1ef0:	96 bf       	out	0x36, r25	; 54
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
    1ef2:	96 b7       	in	r25, 0x36	; 54
    1ef4:	90 68       	ori	r25, 0x80	; 128
    1ef6:	96 bf       	out	0x36, r25	; 54
	while(TWI->TWCR_Reg.Bits.TWINT_Bit == 0);//Waiting the flag
    1ef8:	06 b6       	in	r0, 0x36	; 54
    1efa:	07 fe       	sbrs	r0, 7
    1efc:	fd cf       	rjmp	.-6      	; 0x1ef8 <TWI_Read_NAck+0x20>
	*data = TWI->TWDR_Reg;
    1efe:	83 b1       	in	r24, 0x03	; 3
    1f00:	80 83       	st	Z, r24
void TWI_Init(u8 address){
	TWI->TWAR_Reg = address;
	TWI->TWBR_Reg = MyTWBR;
}
u8 TWI_Status(void){
	return (TWI->TWSR_Reg & 0xF8);
    1f02:	81 b1       	in	r24, 0x01	; 1
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
	while(TWI->TWCR_Reg.Bits.TWINT_Bit == 0);//Waiting the flag
	*data = TWI->TWDR_Reg;
	return TWI_Status();
}
    1f04:	88 7f       	andi	r24, 0xF8	; 248
    1f06:	08 95       	ret

00001f08 <TWI_Stop>:
void TWI_Stop(void){
	TWI->TWCR_Reg.Bits.TWSTA_Bit = 0;//Enable/Disable Start
    1f08:	86 b7       	in	r24, 0x36	; 54
    1f0a:	8f 7d       	andi	r24, 0xDF	; 223
    1f0c:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWSTO_Bit = 1;//Enable/Disable Stop at the End
    1f0e:	86 b7       	in	r24, 0x36	; 54
    1f10:	80 61       	ori	r24, 0x10	; 16
    1f12:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWEA_Bit = 0;//Read with Ack. Bit
    1f14:	86 b7       	in	r24, 0x36	; 54
    1f16:	8f 7b       	andi	r24, 0xBF	; 191
    1f18:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWEN_Bit = 1;//Enable TWI
    1f1a:	86 b7       	in	r24, 0x36	; 54
    1f1c:	84 60       	ori	r24, 0x04	; 4
    1f1e:	86 bf       	out	0x36, r24	; 54
	TWI->TWCR_Reg.Bits.TWINT_Bit = 1;//Clear The Flag
    1f20:	86 b7       	in	r24, 0x36	; 54
    1f22:	80 68       	ori	r24, 0x80	; 128
    1f24:	86 bf       	out	0x36, r24	; 54
    1f26:	08 95       	ret

00001f28 <UART_Init>:
 * Created: 4/28/2023 3:23:54 PM
 *  Author: user
 */ 
#include "UART.h"

void UART_Init(UART_Config * options){
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	ec 01       	movw	r28, r24
	u16 MyUBRR = 0;
	if (options->speedMode == DoupleSpeed_Enable)
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	e9 f4       	brne	.+58     	; 0x1f6e <UART_Init+0x46>
	{
		UART->UCSRA_Reg.Bits.U2X_Bit = 1;
    1f34:	59 9a       	sbi	0x0b, 1	; 11
		MyUBRR = (F_CPU/(8UL*options->baudRate))-1;
    1f36:	28 81       	ld	r18, Y
    1f38:	39 81       	ldd	r19, Y+1	; 0x01
    1f3a:	c9 01       	movw	r24, r18
    1f3c:	a0 e0       	ldi	r26, 0x00	; 0
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	88 0f       	add	r24, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	aa 1f       	adc	r26, r26
    1f46:	bb 1f       	adc	r27, r27
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	aa 1f       	adc	r26, r26
    1f4e:	bb 1f       	adc	r27, r27
    1f50:	9c 01       	movw	r18, r24
    1f52:	ad 01       	movw	r20, r26
    1f54:	22 0f       	add	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	44 1f       	adc	r20, r20
    1f5a:	55 1f       	adc	r21, r21
    1f5c:	60 e0       	ldi	r22, 0x00	; 0
    1f5e:	74 e2       	ldi	r23, 0x24	; 36
    1f60:	84 ef       	ldi	r24, 0xF4	; 244
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 94 bd 11 	call	0x237a	; 0x237a <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	20 c0       	rjmp	.+64     	; 0x1fae <UART_Init+0x86>
	} 
	else
	{
		UART->UCSRA_Reg.Bits.U2X_Bit = 0;
    1f6e:	59 98       	cbi	0x0b, 1	; 11
		MyUBRR = (F_CPU/(16UL*options->baudRate))-1;
    1f70:	28 81       	ld	r18, Y
    1f72:	39 81       	ldd	r19, Y+1	; 0x01
    1f74:	c9 01       	movw	r24, r18
    1f76:	a0 e0       	ldi	r26, 0x00	; 0
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	aa 1f       	adc	r26, r26
    1f80:	bb 1f       	adc	r27, r27
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	aa 1f       	adc	r26, r26
    1f88:	bb 1f       	adc	r27, r27
    1f8a:	9c 01       	movw	r18, r24
    1f8c:	ad 01       	movw	r20, r26
    1f8e:	22 0f       	add	r18, r18
    1f90:	33 1f       	adc	r19, r19
    1f92:	44 1f       	adc	r20, r20
    1f94:	55 1f       	adc	r21, r21
    1f96:	22 0f       	add	r18, r18
    1f98:	33 1f       	adc	r19, r19
    1f9a:	44 1f       	adc	r20, r20
    1f9c:	55 1f       	adc	r21, r21
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	74 e2       	ldi	r23, 0x24	; 36
    1fa2:	84 ef       	ldi	r24, 0xF4	; 244
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	0e 94 bd 11 	call	0x237a	; 0x237a <__udivmodsi4>
    1faa:	21 50       	subi	r18, 0x01	; 1
    1fac:	31 09       	sbc	r19, r1
	}
	UART->UBRRL_Reg = MyUBRR;
    1fae:	29 b9       	out	0x09, r18	; 9
	UART->UCSRC_UBRRH_Reg.UBRRH_AllRegister = MyUBRR>>8;
    1fb0:	30 bd       	out	0x20, r19	; 32
	
	if (options->characterSize == CharacterSize_9Bits)
    1fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb4:	97 30       	cpi	r25, 0x07	; 7
    1fb6:	41 f4       	brne	.+16     	; 0x1fc8 <UART_Init+0xa0>
	{
		UART->UCSRC_UBRRH_Reg.UCSRC_Bits.UCSZ0_Bit = 1;
    1fb8:	80 b5       	in	r24, 0x20	; 32
    1fba:	82 60       	ori	r24, 0x02	; 2
    1fbc:	80 bd       	out	0x20, r24	; 32
		UART->UCSRC_UBRRH_Reg.UCSRC_Bits.UCSZ1_Bit = 1;
    1fbe:	80 b5       	in	r24, 0x20	; 32
    1fc0:	84 60       	ori	r24, 0x04	; 4
    1fc2:	80 bd       	out	0x20, r24	; 32
		UART->UCSRB_Reg.Bits.UCSZ2_Bit = 1;
    1fc4:	52 9a       	sbi	0x0a, 2	; 10
    1fc6:	05 c0       	rjmp	.+10     	; 0x1fd2 <UART_Init+0xaa>
	} 
	else
	{
		UART->UCSRC_UBRRH_Reg.UCSRC_AllRegister |= (UCSRC_SelectEnable)|(options->characterSize<<1);
    1fc8:	80 b5       	in	r24, 0x20	; 32
    1fca:	99 0f       	add	r25, r25
    1fcc:	80 68       	ori	r24, 0x80	; 128
    1fce:	89 2b       	or	r24, r25
    1fd0:	80 bd       	out	0x20, r24	; 32
	}
	UART->UCSRC_UBRRH_Reg.UCSRC_AllRegister |= (UCSRC_SelectEnable)|(options->stopBits<<3);
    1fd2:	80 b5       	in	r24, 0x20	; 32
    1fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd6:	99 0f       	add	r25, r25
    1fd8:	99 0f       	add	r25, r25
    1fda:	99 0f       	add	r25, r25
    1fdc:	80 68       	ori	r24, 0x80	; 128
    1fde:	89 2b       	or	r24, r25
    1fe0:	80 bd       	out	0x20, r24	; 32
	UART->UCSRC_UBRRH_Reg.UCSRC_AllRegister |= (UCSRC_SelectEnable)|(options->parityMode<<4);
    1fe2:	20 b5       	in	r18, 0x20	; 32
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	30 e1       	ldi	r19, 0x10	; 16
    1fe8:	93 9f       	mul	r25, r19
    1fea:	c0 01       	movw	r24, r0
    1fec:	11 24       	eor	r1, r1
    1fee:	92 2f       	mov	r25, r18
    1ff0:	90 68       	ori	r25, 0x80	; 128
    1ff2:	89 2b       	or	r24, r25
    1ff4:	80 bd       	out	0x20, r24	; 32
	UART->UCSRB_Reg.Bits.TXEN_Bit = options->txMode;
    1ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff8:	80 fd       	sbrc	r24, 0
    1ffa:	53 9a       	sbi	0x0a, 3	; 10
    1ffc:	80 ff       	sbrs	r24, 0
    1ffe:	53 98       	cbi	0x0a, 3	; 10
	UART->UCSRB_Reg.Bits.RXEN_Bit = options->rxMode;
    2000:	8f 81       	ldd	r24, Y+7	; 0x07
    2002:	80 fd       	sbrc	r24, 0
    2004:	54 9a       	sbi	0x0a, 4	; 10
    2006:	80 ff       	sbrs	r24, 0
    2008:	54 98       	cbi	0x0a, 4	; 10
}
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	08 95       	ret

00002010 <UART_Transmait>:
void UART_Transmait(u8 data){
	while(UART->UCSRA_Reg.Bits.UDRE_Bit == 0);
    2010:	5d 9b       	sbis	0x0b, 5	; 11
    2012:	fe cf       	rjmp	.-4      	; 0x2010 <UART_Transmait>
	UART->UDR_Reg = data;
    2014:	8c b9       	out	0x0c, r24	; 12
    2016:	08 95       	ret

00002018 <UART_TransmaitString>:
}
void UART_TransmaitString(s8 * string){
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	fc 01       	movw	r30, r24
	u8 i = 0;
	while(string[i] != '\0'){
    2020:	80 81       	ld	r24, Z
    2022:	88 23       	and	r24, r24
    2024:	59 f0       	breq	.+22     	; 0x203c <UART_TransmaitString+0x24>
    2026:	8f 01       	movw	r16, r30
    2028:	c0 e0       	ldi	r28, 0x00	; 0
		UART_Transmait(string[i]);
    202a:	0e 94 08 10 	call	0x2010	; 0x2010 <UART_Transmait>
		i++;
    202e:	cf 5f       	subi	r28, 0xFF	; 255
	while(UART->UCSRA_Reg.Bits.UDRE_Bit == 0);
	UART->UDR_Reg = data;
}
void UART_TransmaitString(s8 * string){
	u8 i = 0;
	while(string[i] != '\0'){
    2030:	f8 01       	movw	r30, r16
    2032:	ec 0f       	add	r30, r28
    2034:	f1 1d       	adc	r31, r1
    2036:	80 81       	ld	r24, Z
    2038:	81 11       	cpse	r24, r1
    203a:	f7 cf       	rjmp	.-18     	; 0x202a <UART_TransmaitString+0x12>
		UART_Transmait(string[i]);
		i++;
	}
}
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	0f 91       	pop	r16
    2042:	08 95       	ret

00002044 <UART_Receive>:
u8 UART_Receive(void){
	while (UART->UCSRA_Reg.Bits.RXC_Bit == 0);
    2044:	5f 9b       	sbis	0x0b, 7	; 11
    2046:	fe cf       	rjmp	.-4      	; 0x2044 <UART_Receive>
	return UART->UDR_Reg;
    2048:	8c b1       	in	r24, 0x0c	; 12
    204a:	08 95       	ret

0000204c <__subsf3>:
    204c:	50 58       	subi	r21, 0x80	; 128

0000204e <__addsf3>:
    204e:	bb 27       	eor	r27, r27
    2050:	aa 27       	eor	r26, r26
    2052:	0e 94 3e 10 	call	0x207c	; 0x207c <__addsf3x>
    2056:	0c 94 16 11 	jmp	0x222c	; 0x222c <__fp_round>
    205a:	0e 94 08 11 	call	0x2210	; 0x2210 <__fp_pscA>
    205e:	38 f0       	brcs	.+14     	; 0x206e <__addsf3+0x20>
    2060:	0e 94 0f 11 	call	0x221e	; 0x221e <__fp_pscB>
    2064:	20 f0       	brcs	.+8      	; 0x206e <__addsf3+0x20>
    2066:	39 f4       	brne	.+14     	; 0x2076 <__addsf3+0x28>
    2068:	9f 3f       	cpi	r25, 0xFF	; 255
    206a:	19 f4       	brne	.+6      	; 0x2072 <__addsf3+0x24>
    206c:	26 f4       	brtc	.+8      	; 0x2076 <__addsf3+0x28>
    206e:	0c 94 05 11 	jmp	0x220a	; 0x220a <__fp_nan>
    2072:	0e f4       	brtc	.+2      	; 0x2076 <__addsf3+0x28>
    2074:	e0 95       	com	r30
    2076:	e7 fb       	bst	r30, 7
    2078:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__fp_inf>

0000207c <__addsf3x>:
    207c:	e9 2f       	mov	r30, r25
    207e:	0e 94 27 11 	call	0x224e	; 0x224e <__fp_split3>
    2082:	58 f3       	brcs	.-42     	; 0x205a <__addsf3+0xc>
    2084:	ba 17       	cp	r27, r26
    2086:	62 07       	cpc	r22, r18
    2088:	73 07       	cpc	r23, r19
    208a:	84 07       	cpc	r24, r20
    208c:	95 07       	cpc	r25, r21
    208e:	20 f0       	brcs	.+8      	; 0x2098 <__addsf3x+0x1c>
    2090:	79 f4       	brne	.+30     	; 0x20b0 <__addsf3x+0x34>
    2092:	a6 f5       	brtc	.+104    	; 0x20fc <__addsf3x+0x80>
    2094:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__fp_zero>
    2098:	0e f4       	brtc	.+2      	; 0x209c <__addsf3x+0x20>
    209a:	e0 95       	com	r30
    209c:	0b 2e       	mov	r0, r27
    209e:	ba 2f       	mov	r27, r26
    20a0:	a0 2d       	mov	r26, r0
    20a2:	0b 01       	movw	r0, r22
    20a4:	b9 01       	movw	r22, r18
    20a6:	90 01       	movw	r18, r0
    20a8:	0c 01       	movw	r0, r24
    20aa:	ca 01       	movw	r24, r20
    20ac:	a0 01       	movw	r20, r0
    20ae:	11 24       	eor	r1, r1
    20b0:	ff 27       	eor	r31, r31
    20b2:	59 1b       	sub	r21, r25
    20b4:	99 f0       	breq	.+38     	; 0x20dc <__addsf3x+0x60>
    20b6:	59 3f       	cpi	r21, 0xF9	; 249
    20b8:	50 f4       	brcc	.+20     	; 0x20ce <__addsf3x+0x52>
    20ba:	50 3e       	cpi	r21, 0xE0	; 224
    20bc:	68 f1       	brcs	.+90     	; 0x2118 <__addsf3x+0x9c>
    20be:	1a 16       	cp	r1, r26
    20c0:	f0 40       	sbci	r31, 0x00	; 0
    20c2:	a2 2f       	mov	r26, r18
    20c4:	23 2f       	mov	r18, r19
    20c6:	34 2f       	mov	r19, r20
    20c8:	44 27       	eor	r20, r20
    20ca:	58 5f       	subi	r21, 0xF8	; 248
    20cc:	f3 cf       	rjmp	.-26     	; 0x20b4 <__addsf3x+0x38>
    20ce:	46 95       	lsr	r20
    20d0:	37 95       	ror	r19
    20d2:	27 95       	ror	r18
    20d4:	a7 95       	ror	r26
    20d6:	f0 40       	sbci	r31, 0x00	; 0
    20d8:	53 95       	inc	r21
    20da:	c9 f7       	brne	.-14     	; 0x20ce <__addsf3x+0x52>
    20dc:	7e f4       	brtc	.+30     	; 0x20fc <__addsf3x+0x80>
    20de:	1f 16       	cp	r1, r31
    20e0:	ba 0b       	sbc	r27, r26
    20e2:	62 0b       	sbc	r22, r18
    20e4:	73 0b       	sbc	r23, r19
    20e6:	84 0b       	sbc	r24, r20
    20e8:	ba f0       	brmi	.+46     	; 0x2118 <__addsf3x+0x9c>
    20ea:	91 50       	subi	r25, 0x01	; 1
    20ec:	a1 f0       	breq	.+40     	; 0x2116 <__addsf3x+0x9a>
    20ee:	ff 0f       	add	r31, r31
    20f0:	bb 1f       	adc	r27, r27
    20f2:	66 1f       	adc	r22, r22
    20f4:	77 1f       	adc	r23, r23
    20f6:	88 1f       	adc	r24, r24
    20f8:	c2 f7       	brpl	.-16     	; 0x20ea <__addsf3x+0x6e>
    20fa:	0e c0       	rjmp	.+28     	; 0x2118 <__addsf3x+0x9c>
    20fc:	ba 0f       	add	r27, r26
    20fe:	62 1f       	adc	r22, r18
    2100:	73 1f       	adc	r23, r19
    2102:	84 1f       	adc	r24, r20
    2104:	48 f4       	brcc	.+18     	; 0x2118 <__addsf3x+0x9c>
    2106:	87 95       	ror	r24
    2108:	77 95       	ror	r23
    210a:	67 95       	ror	r22
    210c:	b7 95       	ror	r27
    210e:	f7 95       	ror	r31
    2110:	9e 3f       	cpi	r25, 0xFE	; 254
    2112:	08 f0       	brcs	.+2      	; 0x2116 <__addsf3x+0x9a>
    2114:	b0 cf       	rjmp	.-160    	; 0x2076 <__addsf3+0x28>
    2116:	93 95       	inc	r25
    2118:	88 0f       	add	r24, r24
    211a:	08 f0       	brcs	.+2      	; 0x211e <__addsf3x+0xa2>
    211c:	99 27       	eor	r25, r25
    211e:	ee 0f       	add	r30, r30
    2120:	97 95       	ror	r25
    2122:	87 95       	ror	r24
    2124:	08 95       	ret

00002126 <__fixunssfsi>:
    2126:	0e 94 2f 11 	call	0x225e	; 0x225e <__fp_splitA>
    212a:	88 f0       	brcs	.+34     	; 0x214e <__fixunssfsi+0x28>
    212c:	9f 57       	subi	r25, 0x7F	; 127
    212e:	98 f0       	brcs	.+38     	; 0x2156 <__fixunssfsi+0x30>
    2130:	b9 2f       	mov	r27, r25
    2132:	99 27       	eor	r25, r25
    2134:	b7 51       	subi	r27, 0x17	; 23
    2136:	b0 f0       	brcs	.+44     	; 0x2164 <__fixunssfsi+0x3e>
    2138:	e1 f0       	breq	.+56     	; 0x2172 <__fixunssfsi+0x4c>
    213a:	66 0f       	add	r22, r22
    213c:	77 1f       	adc	r23, r23
    213e:	88 1f       	adc	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	1a f0       	brmi	.+6      	; 0x214a <__fixunssfsi+0x24>
    2144:	ba 95       	dec	r27
    2146:	c9 f7       	brne	.-14     	; 0x213a <__fixunssfsi+0x14>
    2148:	14 c0       	rjmp	.+40     	; 0x2172 <__fixunssfsi+0x4c>
    214a:	b1 30       	cpi	r27, 0x01	; 1
    214c:	91 f0       	breq	.+36     	; 0x2172 <__fixunssfsi+0x4c>
    214e:	0e 94 49 11 	call	0x2292	; 0x2292 <__fp_zero>
    2152:	b1 e0       	ldi	r27, 0x01	; 1
    2154:	08 95       	ret
    2156:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__fp_zero>
    215a:	67 2f       	mov	r22, r23
    215c:	78 2f       	mov	r23, r24
    215e:	88 27       	eor	r24, r24
    2160:	b8 5f       	subi	r27, 0xF8	; 248
    2162:	39 f0       	breq	.+14     	; 0x2172 <__fixunssfsi+0x4c>
    2164:	b9 3f       	cpi	r27, 0xF9	; 249
    2166:	cc f3       	brlt	.-14     	; 0x215a <__fixunssfsi+0x34>
    2168:	86 95       	lsr	r24
    216a:	77 95       	ror	r23
    216c:	67 95       	ror	r22
    216e:	b3 95       	inc	r27
    2170:	d9 f7       	brne	.-10     	; 0x2168 <__fixunssfsi+0x42>
    2172:	3e f4       	brtc	.+14     	; 0x2182 <__fixunssfsi+0x5c>
    2174:	90 95       	com	r25
    2176:	80 95       	com	r24
    2178:	70 95       	com	r23
    217a:	61 95       	neg	r22
    217c:	7f 4f       	sbci	r23, 0xFF	; 255
    217e:	8f 4f       	sbci	r24, 0xFF	; 255
    2180:	9f 4f       	sbci	r25, 0xFF	; 255
    2182:	08 95       	ret

00002184 <__floatunsisf>:
    2184:	e8 94       	clt
    2186:	09 c0       	rjmp	.+18     	; 0x219a <__floatsisf+0x12>

00002188 <__floatsisf>:
    2188:	97 fb       	bst	r25, 7
    218a:	3e f4       	brtc	.+14     	; 0x219a <__floatsisf+0x12>
    218c:	90 95       	com	r25
    218e:	80 95       	com	r24
    2190:	70 95       	com	r23
    2192:	61 95       	neg	r22
    2194:	7f 4f       	sbci	r23, 0xFF	; 255
    2196:	8f 4f       	sbci	r24, 0xFF	; 255
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	99 23       	and	r25, r25
    219c:	a9 f0       	breq	.+42     	; 0x21c8 <__floatsisf+0x40>
    219e:	f9 2f       	mov	r31, r25
    21a0:	96 e9       	ldi	r25, 0x96	; 150
    21a2:	bb 27       	eor	r27, r27
    21a4:	93 95       	inc	r25
    21a6:	f6 95       	lsr	r31
    21a8:	87 95       	ror	r24
    21aa:	77 95       	ror	r23
    21ac:	67 95       	ror	r22
    21ae:	b7 95       	ror	r27
    21b0:	f1 11       	cpse	r31, r1
    21b2:	f8 cf       	rjmp	.-16     	; 0x21a4 <__floatsisf+0x1c>
    21b4:	fa f4       	brpl	.+62     	; 0x21f4 <__floatsisf+0x6c>
    21b6:	bb 0f       	add	r27, r27
    21b8:	11 f4       	brne	.+4      	; 0x21be <__floatsisf+0x36>
    21ba:	60 ff       	sbrs	r22, 0
    21bc:	1b c0       	rjmp	.+54     	; 0x21f4 <__floatsisf+0x6c>
    21be:	6f 5f       	subi	r22, 0xFF	; 255
    21c0:	7f 4f       	sbci	r23, 0xFF	; 255
    21c2:	8f 4f       	sbci	r24, 0xFF	; 255
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	16 c0       	rjmp	.+44     	; 0x21f4 <__floatsisf+0x6c>
    21c8:	88 23       	and	r24, r24
    21ca:	11 f0       	breq	.+4      	; 0x21d0 <__floatsisf+0x48>
    21cc:	96 e9       	ldi	r25, 0x96	; 150
    21ce:	11 c0       	rjmp	.+34     	; 0x21f2 <__floatsisf+0x6a>
    21d0:	77 23       	and	r23, r23
    21d2:	21 f0       	breq	.+8      	; 0x21dc <__floatsisf+0x54>
    21d4:	9e e8       	ldi	r25, 0x8E	; 142
    21d6:	87 2f       	mov	r24, r23
    21d8:	76 2f       	mov	r23, r22
    21da:	05 c0       	rjmp	.+10     	; 0x21e6 <__floatsisf+0x5e>
    21dc:	66 23       	and	r22, r22
    21de:	71 f0       	breq	.+28     	; 0x21fc <__floatsisf+0x74>
    21e0:	96 e8       	ldi	r25, 0x86	; 134
    21e2:	86 2f       	mov	r24, r22
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	2a f0       	brmi	.+10     	; 0x21f4 <__floatsisf+0x6c>
    21ea:	9a 95       	dec	r25
    21ec:	66 0f       	add	r22, r22
    21ee:	77 1f       	adc	r23, r23
    21f0:	88 1f       	adc	r24, r24
    21f2:	da f7       	brpl	.-10     	; 0x21ea <__floatsisf+0x62>
    21f4:	88 0f       	add	r24, r24
    21f6:	96 95       	lsr	r25
    21f8:	87 95       	ror	r24
    21fa:	97 f9       	bld	r25, 7
    21fc:	08 95       	ret

000021fe <__fp_inf>:
    21fe:	97 f9       	bld	r25, 7
    2200:	9f 67       	ori	r25, 0x7F	; 127
    2202:	80 e8       	ldi	r24, 0x80	; 128
    2204:	70 e0       	ldi	r23, 0x00	; 0
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	08 95       	ret

0000220a <__fp_nan>:
    220a:	9f ef       	ldi	r25, 0xFF	; 255
    220c:	80 ec       	ldi	r24, 0xC0	; 192
    220e:	08 95       	ret

00002210 <__fp_pscA>:
    2210:	00 24       	eor	r0, r0
    2212:	0a 94       	dec	r0
    2214:	16 16       	cp	r1, r22
    2216:	17 06       	cpc	r1, r23
    2218:	18 06       	cpc	r1, r24
    221a:	09 06       	cpc	r0, r25
    221c:	08 95       	ret

0000221e <__fp_pscB>:
    221e:	00 24       	eor	r0, r0
    2220:	0a 94       	dec	r0
    2222:	12 16       	cp	r1, r18
    2224:	13 06       	cpc	r1, r19
    2226:	14 06       	cpc	r1, r20
    2228:	05 06       	cpc	r0, r21
    222a:	08 95       	ret

0000222c <__fp_round>:
    222c:	09 2e       	mov	r0, r25
    222e:	03 94       	inc	r0
    2230:	00 0c       	add	r0, r0
    2232:	11 f4       	brne	.+4      	; 0x2238 <__fp_round+0xc>
    2234:	88 23       	and	r24, r24
    2236:	52 f0       	brmi	.+20     	; 0x224c <__fp_round+0x20>
    2238:	bb 0f       	add	r27, r27
    223a:	40 f4       	brcc	.+16     	; 0x224c <__fp_round+0x20>
    223c:	bf 2b       	or	r27, r31
    223e:	11 f4       	brne	.+4      	; 0x2244 <__fp_round+0x18>
    2240:	60 ff       	sbrs	r22, 0
    2242:	04 c0       	rjmp	.+8      	; 0x224c <__fp_round+0x20>
    2244:	6f 5f       	subi	r22, 0xFF	; 255
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	8f 4f       	sbci	r24, 0xFF	; 255
    224a:	9f 4f       	sbci	r25, 0xFF	; 255
    224c:	08 95       	ret

0000224e <__fp_split3>:
    224e:	57 fd       	sbrc	r21, 7
    2250:	90 58       	subi	r25, 0x80	; 128
    2252:	44 0f       	add	r20, r20
    2254:	55 1f       	adc	r21, r21
    2256:	59 f0       	breq	.+22     	; 0x226e <__fp_splitA+0x10>
    2258:	5f 3f       	cpi	r21, 0xFF	; 255
    225a:	71 f0       	breq	.+28     	; 0x2278 <__fp_splitA+0x1a>
    225c:	47 95       	ror	r20

0000225e <__fp_splitA>:
    225e:	88 0f       	add	r24, r24
    2260:	97 fb       	bst	r25, 7
    2262:	99 1f       	adc	r25, r25
    2264:	61 f0       	breq	.+24     	; 0x227e <__fp_splitA+0x20>
    2266:	9f 3f       	cpi	r25, 0xFF	; 255
    2268:	79 f0       	breq	.+30     	; 0x2288 <__fp_splitA+0x2a>
    226a:	87 95       	ror	r24
    226c:	08 95       	ret
    226e:	12 16       	cp	r1, r18
    2270:	13 06       	cpc	r1, r19
    2272:	14 06       	cpc	r1, r20
    2274:	55 1f       	adc	r21, r21
    2276:	f2 cf       	rjmp	.-28     	; 0x225c <__fp_split3+0xe>
    2278:	46 95       	lsr	r20
    227a:	f1 df       	rcall	.-30     	; 0x225e <__fp_splitA>
    227c:	08 c0       	rjmp	.+16     	; 0x228e <__fp_splitA+0x30>
    227e:	16 16       	cp	r1, r22
    2280:	17 06       	cpc	r1, r23
    2282:	18 06       	cpc	r1, r24
    2284:	99 1f       	adc	r25, r25
    2286:	f1 cf       	rjmp	.-30     	; 0x226a <__fp_splitA+0xc>
    2288:	86 95       	lsr	r24
    228a:	71 05       	cpc	r23, r1
    228c:	61 05       	cpc	r22, r1
    228e:	08 94       	sec
    2290:	08 95       	ret

00002292 <__fp_zero>:
    2292:	e8 94       	clt

00002294 <__fp_szero>:
    2294:	bb 27       	eor	r27, r27
    2296:	66 27       	eor	r22, r22
    2298:	77 27       	eor	r23, r23
    229a:	cb 01       	movw	r24, r22
    229c:	97 f9       	bld	r25, 7
    229e:	08 95       	ret

000022a0 <__mulsf3>:
    22a0:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3x>
    22a4:	0c 94 16 11 	jmp	0x222c	; 0x222c <__fp_round>
    22a8:	0e 94 08 11 	call	0x2210	; 0x2210 <__fp_pscA>
    22ac:	38 f0       	brcs	.+14     	; 0x22bc <__mulsf3+0x1c>
    22ae:	0e 94 0f 11 	call	0x221e	; 0x221e <__fp_pscB>
    22b2:	20 f0       	brcs	.+8      	; 0x22bc <__mulsf3+0x1c>
    22b4:	95 23       	and	r25, r21
    22b6:	11 f0       	breq	.+4      	; 0x22bc <__mulsf3+0x1c>
    22b8:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__fp_inf>
    22bc:	0c 94 05 11 	jmp	0x220a	; 0x220a <__fp_nan>
    22c0:	11 24       	eor	r1, r1
    22c2:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__fp_szero>

000022c6 <__mulsf3x>:
    22c6:	0e 94 27 11 	call	0x224e	; 0x224e <__fp_split3>
    22ca:	70 f3       	brcs	.-36     	; 0x22a8 <__mulsf3+0x8>

000022cc <__mulsf3_pse>:
    22cc:	95 9f       	mul	r25, r21
    22ce:	c1 f3       	breq	.-16     	; 0x22c0 <__mulsf3+0x20>
    22d0:	95 0f       	add	r25, r21
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	55 1f       	adc	r21, r21
    22d6:	62 9f       	mul	r22, r18
    22d8:	f0 01       	movw	r30, r0
    22da:	72 9f       	mul	r23, r18
    22dc:	bb 27       	eor	r27, r27
    22de:	f0 0d       	add	r31, r0
    22e0:	b1 1d       	adc	r27, r1
    22e2:	63 9f       	mul	r22, r19
    22e4:	aa 27       	eor	r26, r26
    22e6:	f0 0d       	add	r31, r0
    22e8:	b1 1d       	adc	r27, r1
    22ea:	aa 1f       	adc	r26, r26
    22ec:	64 9f       	mul	r22, r20
    22ee:	66 27       	eor	r22, r22
    22f0:	b0 0d       	add	r27, r0
    22f2:	a1 1d       	adc	r26, r1
    22f4:	66 1f       	adc	r22, r22
    22f6:	82 9f       	mul	r24, r18
    22f8:	22 27       	eor	r18, r18
    22fa:	b0 0d       	add	r27, r0
    22fc:	a1 1d       	adc	r26, r1
    22fe:	62 1f       	adc	r22, r18
    2300:	73 9f       	mul	r23, r19
    2302:	b0 0d       	add	r27, r0
    2304:	a1 1d       	adc	r26, r1
    2306:	62 1f       	adc	r22, r18
    2308:	83 9f       	mul	r24, r19
    230a:	a0 0d       	add	r26, r0
    230c:	61 1d       	adc	r22, r1
    230e:	22 1f       	adc	r18, r18
    2310:	74 9f       	mul	r23, r20
    2312:	33 27       	eor	r19, r19
    2314:	a0 0d       	add	r26, r0
    2316:	61 1d       	adc	r22, r1
    2318:	23 1f       	adc	r18, r19
    231a:	84 9f       	mul	r24, r20
    231c:	60 0d       	add	r22, r0
    231e:	21 1d       	adc	r18, r1
    2320:	82 2f       	mov	r24, r18
    2322:	76 2f       	mov	r23, r22
    2324:	6a 2f       	mov	r22, r26
    2326:	11 24       	eor	r1, r1
    2328:	9f 57       	subi	r25, 0x7F	; 127
    232a:	50 40       	sbci	r21, 0x00	; 0
    232c:	9a f0       	brmi	.+38     	; 0x2354 <__mulsf3_pse+0x88>
    232e:	f1 f0       	breq	.+60     	; 0x236c <__mulsf3_pse+0xa0>
    2330:	88 23       	and	r24, r24
    2332:	4a f0       	brmi	.+18     	; 0x2346 <__mulsf3_pse+0x7a>
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	bb 1f       	adc	r27, r27
    233a:	66 1f       	adc	r22, r22
    233c:	77 1f       	adc	r23, r23
    233e:	88 1f       	adc	r24, r24
    2340:	91 50       	subi	r25, 0x01	; 1
    2342:	50 40       	sbci	r21, 0x00	; 0
    2344:	a9 f7       	brne	.-22     	; 0x2330 <__mulsf3_pse+0x64>
    2346:	9e 3f       	cpi	r25, 0xFE	; 254
    2348:	51 05       	cpc	r21, r1
    234a:	80 f0       	brcs	.+32     	; 0x236c <__mulsf3_pse+0xa0>
    234c:	0c 94 ff 10 	jmp	0x21fe	; 0x21fe <__fp_inf>
    2350:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__fp_szero>
    2354:	5f 3f       	cpi	r21, 0xFF	; 255
    2356:	e4 f3       	brlt	.-8      	; 0x2350 <__mulsf3_pse+0x84>
    2358:	98 3e       	cpi	r25, 0xE8	; 232
    235a:	d4 f3       	brlt	.-12     	; 0x2350 <__mulsf3_pse+0x84>
    235c:	86 95       	lsr	r24
    235e:	77 95       	ror	r23
    2360:	67 95       	ror	r22
    2362:	b7 95       	ror	r27
    2364:	f7 95       	ror	r31
    2366:	e7 95       	ror	r30
    2368:	9f 5f       	subi	r25, 0xFF	; 255
    236a:	c1 f7       	brne	.-16     	; 0x235c <__mulsf3_pse+0x90>
    236c:	fe 2b       	or	r31, r30
    236e:	88 0f       	add	r24, r24
    2370:	91 1d       	adc	r25, r1
    2372:	96 95       	lsr	r25
    2374:	87 95       	ror	r24
    2376:	97 f9       	bld	r25, 7
    2378:	08 95       	ret

0000237a <__udivmodsi4>:
    237a:	a1 e2       	ldi	r26, 0x21	; 33
    237c:	1a 2e       	mov	r1, r26
    237e:	aa 1b       	sub	r26, r26
    2380:	bb 1b       	sub	r27, r27
    2382:	fd 01       	movw	r30, r26
    2384:	0d c0       	rjmp	.+26     	; 0x23a0 <__udivmodsi4_ep>

00002386 <__udivmodsi4_loop>:
    2386:	aa 1f       	adc	r26, r26
    2388:	bb 1f       	adc	r27, r27
    238a:	ee 1f       	adc	r30, r30
    238c:	ff 1f       	adc	r31, r31
    238e:	a2 17       	cp	r26, r18
    2390:	b3 07       	cpc	r27, r19
    2392:	e4 07       	cpc	r30, r20
    2394:	f5 07       	cpc	r31, r21
    2396:	20 f0       	brcs	.+8      	; 0x23a0 <__udivmodsi4_ep>
    2398:	a2 1b       	sub	r26, r18
    239a:	b3 0b       	sbc	r27, r19
    239c:	e4 0b       	sbc	r30, r20
    239e:	f5 0b       	sbc	r31, r21

000023a0 <__udivmodsi4_ep>:
    23a0:	66 1f       	adc	r22, r22
    23a2:	77 1f       	adc	r23, r23
    23a4:	88 1f       	adc	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	1a 94       	dec	r1
    23aa:	69 f7       	brne	.-38     	; 0x2386 <__udivmodsi4_loop>
    23ac:	60 95       	com	r22
    23ae:	70 95       	com	r23
    23b0:	80 95       	com	r24
    23b2:	90 95       	com	r25
    23b4:	9b 01       	movw	r18, r22
    23b6:	ac 01       	movw	r20, r24
    23b8:	bd 01       	movw	r22, r26
    23ba:	cf 01       	movw	r24, r30
    23bc:	08 95       	ret

000023be <__tablejump2__>:
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	05 90       	lpm	r0, Z+
    23c4:	f4 91       	lpm	r31, Z
    23c6:	e0 2d       	mov	r30, r0
    23c8:	09 94       	ijmp

000023ca <_exit>:
    23ca:	f8 94       	cli

000023cc <__stop_program>:
    23cc:	ff cf       	rjmp	.-2      	; 0x23cc <__stop_program>
