
OCT23.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000257a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000754  00800060  0000257a  0000260e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008007b4  008007b4  00002d62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002d94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  00002dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d99  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001557  00000000  00000000  00009ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b02  00000000  00000000  0000b440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000990  00000000  00000000  0000df44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000176b  00000000  00000000  0000e8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000404e  00000000  00000000  0001003f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0001408d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
       4:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__vector_1>
       8:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <__vector_2>
       c:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__vector_3>
      10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      1c:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <__vector_7>
      20:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_8>
      24:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__vector_9>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
      54:	63 01       	movw	r12, r6
      56:	7a 01       	movw	r14, r20
      58:	91 01       	movw	r18, r2
      5a:	ac 01       	movw	r20, r24
      5c:	c4 01       	movw	r24, r8
      5e:	dc 01       	movw	r26, r24
      60:	f4 01       	movw	r30, r8
      62:	57 01       	movw	r10, r14
      64:	57 01       	movw	r10, r14
      66:	57 01       	movw	r10, r14
      68:	57 01       	movw	r10, r14
      6a:	57 01       	movw	r10, r14
      6c:	57 01       	movw	r10, r14
      6e:	57 01       	movw	r10, r14
      70:	57 01       	movw	r10, r14
      72:	57 01       	movw	r10, r14
      74:	57 01       	movw	r10, r14
      76:	57 01       	movw	r10, r14
      78:	57 01       	movw	r10, r14
      7a:	57 01       	movw	r10, r14
      7c:	57 01       	movw	r10, r14
      7e:	57 01       	movw	r10, r14
      80:	57 01       	movw	r10, r14
      82:	57 01       	movw	r10, r14
      84:	57 01       	movw	r10, r14
      86:	57 01       	movw	r10, r14
      88:	57 01       	movw	r10, r14
      8a:	57 01       	movw	r10, r14
      8c:	57 01       	movw	r10, r14
      8e:	57 01       	movw	r10, r14
      90:	57 01       	movw	r10, r14
      92:	57 01       	movw	r10, r14
      94:	57 01       	movw	r10, r14
      96:	57 01       	movw	r10, r14
      98:	57 01       	movw	r10, r14
      9a:	57 01       	movw	r10, r14
      9c:	57 01       	movw	r10, r14
      9e:	57 01       	movw	r10, r14
      a0:	57 01       	movw	r10, r14
      a2:	57 01       	movw	r10, r14
      a4:	57 01       	movw	r10, r14
      a6:	57 01       	movw	r10, r14
      a8:	57 01       	movw	r10, r14
      aa:	57 01       	movw	r10, r14
      ac:	57 01       	movw	r10, r14
      ae:	57 01       	movw	r10, r14
      b0:	57 01       	movw	r10, r14
      b2:	57 01       	movw	r10, r14
      b4:	7f 02       	muls	r23, r31
      b6:	9d 02       	muls	r25, r29
      b8:	be 02       	muls	r27, r30
      ba:	67 02       	muls	r22, r23
      bc:	28 02       	muls	r18, r24

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf e5       	ldi	r28, 0x5F	; 95
      c4:	d8 e0       	ldi	r29, 0x08	; 8
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	17 e0       	ldi	r17, 0x07	; 7
      cc:	a0 e6       	ldi	r26, 0x60	; 96
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	ea e7       	ldi	r30, 0x7A	; 122
      d2:	f5 e2       	ldi	r31, 0x25	; 37
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a4 3b       	cpi	r26, 0xB4	; 180
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	27 e0       	ldi	r18, 0x07	; 7
      e2:	a4 eb       	ldi	r26, 0xB4	; 180
      e4:	b7 e0       	ldi	r27, 0x07	; 7
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	a0 3c       	cpi	r26, 0xC0	; 192
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
      f0:	0e 94 17 0c 	call	0x182e	; 0x182e <main>
      f4:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <_exit>

000000f8 <__bad_interrupt>:
      f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <Password_Exist>:
/*************************************************************
Check Password Existence Function
*************************************************************/

u8 Password_Exist(u8 location)
{
      fc:	cf 92       	push	r12
      fe:	df 92       	push	r13
     100:	ef 92       	push	r14
     102:	ff 92       	push	r15
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	00 d0       	rcall	.+0      	; 0x10e <Password_Exist+0x12>
     10e:	00 d0       	rcall	.+0      	; 0x110 <Password_Exist+0x14>
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	08 2f       	mov	r16, r24
	u8 passWord[PASSWORD_LENGTH] = {STD_Low}, password_counter = 0;
     116:	19 82       	std	Y+1, r1	; 0x01
     118:	1a 82       	std	Y+2, r1	; 0x02
     11a:	1b 82       	std	Y+3, r1	; 0x03
     11c:	1c 82       	std	Y+4, r1	; 0x04
     11e:	ce 01       	movw	r24, r28
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	7c 01       	movw	r14, r24
     124:	6c 01       	movw	r12, r24
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
     126:	10 e0       	ldi	r17, 0x00	; 0
	{
		passWord[i] = EEPROM_ReadByte(location,i);
     128:	61 2f       	mov	r22, r17
     12a:	80 2f       	mov	r24, r16
     12c:	0e 94 12 0a 	call	0x1424	; 0x1424 <EEPROM_ReadByte>
     130:	f6 01       	movw	r30, r12
     132:	81 93       	st	Z+, r24
     134:	6f 01       	movw	r12, r30

u8 Password_Exist(u8 location)
{
	u8 passWord[PASSWORD_LENGTH] = {STD_Low}, password_counter = 0;
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
     136:	1f 5f       	subi	r17, 0xFF	; 255
     138:	14 30       	cpi	r17, 0x04	; 4
     13a:	b1 f7       	brne	.-20     	; 0x128 <Password_Exist+0x2c>
     13c:	9e 01       	movw	r18, r28
     13e:	2b 5f       	subi	r18, 0xFB	; 251
     140:	3f 4f       	sbci	r19, 0xFF	; 255
     142:	90 e0       	ldi	r25, 0x00	; 0
		passWord[i] = EEPROM_ReadByte(location,i);
	}
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
	{
		if(passWord[i] == 0xFF)
     144:	f7 01       	movw	r30, r14
     146:	81 91       	ld	r24, Z+
     148:	7f 01       	movw	r14, r30
     14a:	8f 3f       	cpi	r24, 0xFF	; 255
     14c:	09 f4       	brne	.+2      	; 0x150 <Password_Exist+0x54>
		{
			password_counter++;
     14e:	9f 5f       	subi	r25, 0xFF	; 255
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
	{
		passWord[i] = EEPROM_ReadByte(location,i);
	}
	
	for(u8 i = 0 ; i < PASSWORD_LENGTH; i++)
     150:	e2 16       	cp	r14, r18
     152:	f3 06       	cpc	r15, r19
     154:	b9 f7       	brne	.-18     	; 0x144 <Password_Exist+0x48>
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	94 30       	cpi	r25, 0x04	; 4
     15a:	09 f4       	brne	.+2      	; 0x15e <Password_Exist+0x62>
     15c:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 1;
	}
}
     15e:	0f 90       	pop	r0
     160:	0f 90       	pop	r0
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	1f 91       	pop	r17
     16c:	0f 91       	pop	r16
     16e:	ff 90       	pop	r15
     170:	ef 90       	pop	r14
     172:	df 90       	pop	r13
     174:	cf 90       	pop	r12
     176:	08 95       	ret

00000178 <getPassword>:
/*************************************************************
Get Saved Password from EEPROM Function
*************************************************************/

void getPassword(u8 location, s8* Store)
{
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	d8 2f       	mov	r29, r24
     182:	8b 01       	movw	r16, r22
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     184:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Store[i] = EEPROM_ReadByte(location,i);
     186:	6c 2f       	mov	r22, r28
     188:	8d 2f       	mov	r24, r29
     18a:	0e 94 12 0a 	call	0x1424	; 0x1424 <EEPROM_ReadByte>
     18e:	f8 01       	movw	r30, r16
     190:	81 93       	st	Z+, r24
     192:	8f 01       	movw	r16, r30
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     194:	ff ef       	ldi	r31, 0xFF	; 255
     196:	20 e7       	ldi	r18, 0x70	; 112
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	f1 50       	subi	r31, 0x01	; 1
     19c:	20 40       	sbci	r18, 0x00	; 0
     19e:	80 40       	sbci	r24, 0x00	; 0
     1a0:	e1 f7       	brne	.-8      	; 0x19a <getPassword+0x22>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <getPassword+0x2c>
     1a4:	00 00       	nop
Get Saved Password from EEPROM Function
*************************************************************/

void getPassword(u8 location, s8* Store)
{
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     1a6:	cf 5f       	subi	r28, 0xFF	; 255
     1a8:	c4 30       	cpi	r28, 0x04	; 4
     1aa:	69 f7       	brne	.-38     	; 0x186 <getPassword+0xe>
	{
		Store[i] = EEPROM_ReadByte(location,i);
		_delay_ms(50);
	}
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	1f 91       	pop	r17
     1b2:	0f 91       	pop	r16
     1b4:	08 95       	ret

000001b6 <ALARM>:
Checking & Firing Alarm Function
*************************************************************/

void ALARM(void)
{
	if(EEPROM_ReadByte(ALARM_LOC,0) != 0xFF)
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	82 ea       	ldi	r24, 0xA2	; 162
     1ba:	0e 94 12 0a 	call	0x1424	; 0x1424 <EEPROM_ReadByte>
     1be:	8f 3f       	cpi	r24, 0xFF	; 255
     1c0:	b1 f0       	breq	.+44     	; 0x1ee <ALARM+0x38>
	{
		while(1)
		{
			LCD_Clear();
     1c2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
			LCD_String("ALARM!!!!");
     1c6:	80 ed       	ldi	r24, 0xD0	; 208
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
     1ce:	2f ef       	ldi	r18, 0xFF	; 255
     1d0:	83 ec       	ldi	r24, 0xC3	; 195
     1d2:	99 e0       	ldi	r25, 0x09	; 9
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	80 40       	sbci	r24, 0x00	; 0
     1d8:	90 40       	sbci	r25, 0x00	; 0
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <ALARM+0x1e>
     1dc:	00 c0       	rjmp	.+0      	; 0x1de <ALARM+0x28>
     1de:	00 00       	nop
			_delay_ms(200);
			LCD_Clear();
     1e0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
			DIO_WriteChannel(DIO_ChannelB0,STD_High);
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	88 e0       	ldi	r24, 0x08	; 8
     1e8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
     1ec:	ea cf       	rjmp	.-44     	; 0x1c2 <ALARM+0xc>
     1ee:	08 95       	ret

000001f0 <DoorCheck>:
*************************************************************/

void DoorCheck(void)
{
	u8 Door_Status = STD_Low;
	Door_Status = EEPROM_ReadByte(DOOR_Status_Loc,0);
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	84 ea       	ldi	r24, 0xA4	; 164
     1f4:	0e 94 12 0a 	call	0x1424	; 0x1424 <EEPROM_ReadByte>
     1f8:	2f ef       	ldi	r18, 0xFF	; 255
     1fa:	30 e7       	ldi	r19, 0x70	; 112
     1fc:	92 e0       	ldi	r25, 0x02	; 2
     1fe:	21 50       	subi	r18, 0x01	; 1
     200:	30 40       	sbci	r19, 0x00	; 0
     202:	90 40       	sbci	r25, 0x00	; 0
     204:	e1 f7       	brne	.-8      	; 0x1fe <DoorCheck+0xe>
     206:	00 c0       	rjmp	.+0      	; 0x208 <DoorCheck+0x18>
     208:	00 00       	nop
	_delay_ms(50);
	if(Door_Status != 0xFF)
     20a:	8f 3f       	cpi	r24, 0xFF	; 255
     20c:	21 f0       	breq	.+8      	; 0x216 <DoorCheck+0x26>
	{
		ServoMotor(90);
     20e:	8a e5       	ldi	r24, 0x5A	; 90
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 ce 0b 	call	0x179c	; 0x179c <ServoMotor>
     216:	08 95       	ret

00000218 <Users_Count>:
}
}
}*/

u8 Users_Count(void)
{
     218:	cf 93       	push	r28
	u8 Password_characters_count = 0;
	if(Password_Exist(USER_PASS_LOC) == 1)
     21a:	80 ea       	ldi	r24, 0xA0	; 160
     21c:	0e 94 7e 00 	call	0xfc	; 0xfc <Password_Exist>
	{
		Password_characters_count++;
     220:	c1 e0       	ldi	r28, 0x01	; 1
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	09 f0       	breq	.+2      	; 0x228 <Users_Count+0x10>
     226:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		Password_characters_count = Password_characters_count;
	}
	
	if(Password_Exist(USER2_PASS_LOC) == 1)
     228:	88 ea       	ldi	r24, 0xA8	; 168
     22a:	0e 94 7e 00 	call	0xfc	; 0xfc <Password_Exist>
     22e:	81 30       	cpi	r24, 0x01	; 1
     230:	09 f4       	brne	.+2      	; 0x234 <Users_Count+0x1c>
	{
		Password_characters_count++;
     232:	cf 5f       	subi	r28, 0xFF	; 255
	else
	{
		Password_characters_count = Password_characters_count;
	}
	return Password_characters_count;
}
     234:	8c 2f       	mov	r24, r28
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <ChooseUser>:
}

void ChooseUser(void)
{
	u8 Key = STD_Low;
	LCD_Clear();
     23a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
	LCD_String("1:User1 2:User2");
     23e:	8a ed       	ldi	r24, 0xDA	; 218
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	while(Key == STD_Low)
	{
		Key = GetKey();
     246:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
		if(Key != STD_Low)
     24a:	88 23       	and	r24, r24
     24c:	e1 f3       	breq	.-8      	; 0x246 <ChooseUser+0xc>
		{
			switch(Key)
     24e:	81 33       	cpi	r24, 0x31	; 49
     250:	19 f0       	breq	.+6      	; 0x258 <ChooseUser+0x1e>
     252:	82 33       	cpi	r24, 0x32	; 50
     254:	69 f0       	breq	.+26     	; 0x270 <ChooseUser+0x36>
     256:	08 95       	ret
			{
				case '1':
				Menu2(USER_PASS_LOC);
     258:	80 ea       	ldi	r24, 0xA0	; 160
     25a:	0e 94 4b 03 	call	0x696	; 0x696 <Menu2>
				Bluetooth_TransmaitString("\nUser One is now in control!");
     25e:	8a ee       	ldi	r24, 0xEA	; 234
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
				Bluetooth_TransmaitString("\n\n\n\n\n\n\n\nUser One mode On!");
     266:	87 e0       	ldi	r24, 0x07	; 7
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
				break;
     26e:	08 95       	ret
				
				case '2':
				Menu2(USER2_PASS_LOC);
     270:	88 ea       	ldi	r24, 0xA8	; 168
     272:	0e 94 4b 03 	call	0x696	; 0x696 <Menu2>
				Bluetooth_TransmaitString("\nUser Two is now in control!");
     276:	81 e2       	ldi	r24, 0x21	; 33
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
				Bluetooth_TransmaitString("\n\n\n\n\n\n\n\nUser Two mode On!");
     27e:	8e e3       	ldi	r24, 0x3E	; 62
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     286:	08 95       	ret

00000288 <AdminMenu>:
/*************************************************************
Admin Mode Controlling Menu
*************************************************************/

void AdminMenu(void)
{
     288:	cf 93       	push	r28
	LCD_Clear();
     28a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
	LCD_String("Admin mode on");
     28e:	88 e5       	ldi	r24, 0x58	; 88
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	Bluetooth_TransmaitString("\n\nSmart-Home Project\nAdmin mode\n");
     296:	86 e6       	ldi	r24, 0x66	; 102
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
	Bluetooth_TransmaitString("Room1\n11)Lamp1\n22)Lamp2\n33)Air-Conditioner\n\n________________________________");
     29e:	87 e8       	ldi	r24, 0x87	; 135
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
	Bluetooth_TransmaitString("\nRoom2\n44)Lamp1\n55)Lamp2\n66)Lamp3\n7)Main-Door\n\n________________________________\nNumber\na)Register User\nb)Delete User One\nc)Delete User Two\nd)Number of registered users\ne)User-Mode");
     2a6:	84 ed       	ldi	r24, 0xD4	; 212
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
	u8 Admin_Choice = STD_Low, status = STD_Low, usersCount = 0;
	
	adminmenu:
	Admin_Choice = STD_Low;
	usersCount = 0;
	Admin_Choice = Bluetooth_Receive();
     2ae:	0e 94 ef 09 	call	0x13de	; 0x13de <Bluetooth_Receive>
	

	switch(Admin_Choice)
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	fc 01       	movw	r30, r24
     2b6:	f1 97       	sbiw	r30, 0x31	; 49
     2b8:	e5 33       	cpi	r30, 0x35	; 53
     2ba:	f1 05       	cpc	r31, r1
     2bc:	c0 f7       	brcc	.-16     	; 0x2ae <AdminMenu+0x26>
     2be:	e6 5d       	subi	r30, 0xD6	; 214
     2c0:	ff 4f       	sbci	r31, 0xFF	; 255
     2c2:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__tablejump2__>
	{
		case '1':
		status = SPI_TxRx(Led1);
     2c6:	81 e3       	ldi	r24, 0x31	; 49
     2c8:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
		if(status == On)
     2cc:	8f 34       	cpi	r24, 0x4F	; 79
     2ce:	41 f4       	brne	.+16     	; 0x2e0 <AdminMenu+0x58>
		{
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
     2d0:	88 e8       	ldi	r24, 0x88	; 136
     2d2:	92 e0       	ldi	r25, 0x02	; 2
     2d4:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			SPI_TxRx(Led1_TurnOff);
     2d8:	81 e2       	ldi	r24, 0x21	; 33
     2da:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
     2de:	e7 cf       	rjmp	.-50     	; 0x2ae <AdminMenu+0x26>
			Admin_Choice = STD_Low;
		}
		else if(status == Off)
     2e0:	86 34       	cpi	r24, 0x46	; 70
     2e2:	29 f7       	brne	.-54     	; 0x2ae <AdminMenu+0x26>
		{
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
     2e4:	8b e9       	ldi	r24, 0x9B	; 155
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			SPI_TxRx(Led1_TurnOn);
     2ec:	81 e1       	ldi	r24, 0x11	; 17
     2ee:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
     2f2:	dd cf       	rjmp	.-70     	; 0x2ae <AdminMenu+0x26>
		}
		goto adminmenu;
		break;
		
		case '2':
		status = SPI_TxRx(Led2);
     2f4:	82 e3       	ldi	r24, 0x32	; 50
     2f6:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
		if(status == On)
     2fa:	8f 34       	cpi	r24, 0x4F	; 79
     2fc:	41 f4       	brne	.+16     	; 0x30e <AdminMenu+0x86>
		{
			SPI_TxRx(Led2_TurnOff);
     2fe:	82 e2       	ldi	r24, 0x22	; 34
     300:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
     304:	88 e8       	ldi	r24, 0x88	; 136
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     30c:	d0 cf       	rjmp	.-96     	; 0x2ae <AdminMenu+0x26>
		}
		else if(status == Off)
     30e:	86 34       	cpi	r24, 0x46	; 70
     310:	71 f6       	brne	.-100    	; 0x2ae <AdminMenu+0x26>
		{
			SPI_TxRx(Led2_TurnOn);
     312:	82 e1       	ldi	r24, 0x12	; 18
     314:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
     318:	8b e9       	ldi	r24, 0x9B	; 155
     31a:	92 e0       	ldi	r25, 0x02	; 2
     31c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     320:	c6 cf       	rjmp	.-116    	; 0x2ae <AdminMenu+0x26>
		}
		goto adminmenu;
		break;
		
		case '3':
		status = SPI_TxRx(Air_Cond);
     322:	86 e3       	ldi	r24, 0x36	; 54
     324:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
		if(status == On)
     328:	8f 34       	cpi	r24, 0x4F	; 79
     32a:	41 f4       	brne	.+16     	; 0x33c <AdminMenu+0xb4>
		{
			SPI_TxRx(Air_Cond_TurnOff);
     32c:	86 e2       	ldi	r24, 0x26	; 38
     32e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nAir conditioner Turned Off!\n");
     332:	8d ea       	ldi	r24, 0xAD	; 173
     334:	92 e0       	ldi	r25, 0x02	; 2
     336:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     33a:	b9 cf       	rjmp	.-142    	; 0x2ae <AdminMenu+0x26>
		}
		else if(status == Off)
     33c:	86 34       	cpi	r24, 0x46	; 70
     33e:	09 f0       	breq	.+2      	; 0x342 <AdminMenu+0xba>
     340:	b6 cf       	rjmp	.-148    	; 0x2ae <AdminMenu+0x26>
		{
			SPI_TxRx(Air_Cond_TurnOn);
     342:	86 e1       	ldi	r24, 0x16	; 22
     344:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			SPI_TxRx(24);
     348:	88 e1       	ldi	r24, 0x18	; 24
     34a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nAir conditioner Turned on!\n");
     34e:	8b ec       	ldi	r24, 0xCB	; 203
     350:	92 e0       	ldi	r25, 0x02	; 2
     352:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     356:	ab cf       	rjmp	.-170    	; 0x2ae <AdminMenu+0x26>
		}
		goto adminmenu;
		break;
		
		case '4':
		status = SPI_TxRx(Led3);
     358:	83 e3       	ldi	r24, 0x33	; 51
     35a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
		if(status == On)
     35e:	8f 34       	cpi	r24, 0x4F	; 79
     360:	41 f4       	brne	.+16     	; 0x372 <AdminMenu+0xea>
		{
			SPI_TxRx(Led3_TurnOff);
     362:	83 e2       	ldi	r24, 0x23	; 35
     364:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
     368:	88 e8       	ldi	r24, 0x88	; 136
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     370:	9e cf       	rjmp	.-196    	; 0x2ae <AdminMenu+0x26>
		}
		else if(status == Off)
     372:	86 34       	cpi	r24, 0x46	; 70
     374:	09 f0       	breq	.+2      	; 0x378 <AdminMenu+0xf0>
     376:	9b cf       	rjmp	.-202    	; 0x2ae <AdminMenu+0x26>
		{
			SPI_TxRx(Led3_TurnOn);
     378:	83 e1       	ldi	r24, 0x13	; 19
     37a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
     37e:	8b e9       	ldi	r24, 0x9B	; 155
     380:	92 e0       	ldi	r25, 0x02	; 2
     382:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     386:	93 cf       	rjmp	.-218    	; 0x2ae <AdminMenu+0x26>
		}
		goto adminmenu;
		break;
		
		case '5':
		status = SPI_TxRx(Led4);
     388:	84 e3       	ldi	r24, 0x34	; 52
     38a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
		if(status == On)
     38e:	8f 34       	cpi	r24, 0x4F	; 79
     390:	41 f4       	brne	.+16     	; 0x3a2 <AdminMenu+0x11a>
		{
			SPI_TxRx(Led4_TurnOff);
     392:	84 e2       	ldi	r24, 0x24	; 36
     394:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
     398:	88 e8       	ldi	r24, 0x88	; 136
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     3a0:	86 cf       	rjmp	.-244    	; 0x2ae <AdminMenu+0x26>
		}
		else if(status == Off)
     3a2:	86 34       	cpi	r24, 0x46	; 70
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <AdminMenu+0x120>
     3a6:	83 cf       	rjmp	.-250    	; 0x2ae <AdminMenu+0x26>
		{
			SPI_TxRx(Led4_TurnOn);
     3a8:	84 e1       	ldi	r24, 0x14	; 20
     3aa:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
     3ae:	8b e9       	ldi	r24, 0x9B	; 155
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     3b6:	7b cf       	rjmp	.-266    	; 0x2ae <AdminMenu+0x26>
		}
		goto adminmenu;
		break;
		
		case '6':
		status = SPI_TxRx(Led5);
     3b8:	85 e3       	ldi	r24, 0x35	; 53
     3ba:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
		if(status == On)
     3be:	8f 34       	cpi	r24, 0x4F	; 79
     3c0:	41 f4       	brne	.+16     	; 0x3d2 <AdminMenu+0x14a>
		{
			SPI_TxRx(Led5_TurnOff);
     3c2:	85 e2       	ldi	r24, 0x25	; 37
     3c4:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned Off!\n");
     3c8:	88 e8       	ldi	r24, 0x88	; 136
     3ca:	92 e0       	ldi	r25, 0x02	; 2
     3cc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     3d0:	6e cf       	rjmp	.-292    	; 0x2ae <AdminMenu+0x26>
		}
		else if(status == Off)
     3d2:	86 34       	cpi	r24, 0x46	; 70
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <AdminMenu+0x150>
     3d6:	6b cf       	rjmp	.-298    	; 0x2ae <AdminMenu+0x26>
		{
			SPI_TxRx(Led5_TurnOn);
     3d8:	85 e1       	ldi	r24, 0x15	; 21
     3da:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
			Bluetooth_TransmaitString("\nLamp Turned on!\n");
     3de:	8b e9       	ldi	r24, 0x9B	; 155
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     3e6:	63 cf       	rjmp	.-314    	; 0x2ae <AdminMenu+0x26>
		}
		goto adminmenu;
		break;
		
		case '7':
		if(EEPROM_ReadByte(DOOR_Status_Loc,0) == 0xFF)
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	84 ea       	ldi	r24, 0xA4	; 164
     3ec:	0e 94 12 0a 	call	0x1424	; 0x1424 <EEPROM_ReadByte>
     3f0:	8f 3f       	cpi	r24, 0xFF	; 255
     3f2:	b9 f4       	brne	.+46     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		{
			UART_TransmaitString("\nOpening Main Door!\n");
     3f4:	88 ee       	ldi	r24, 0xE8	; 232
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <UART_TransmaitString>
			ServoMotor(90);
     3fc:	8a e5       	ldi	r24, 0x5A	; 90
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 ce 0b 	call	0x179c	; 0x179c <ServoMotor>
			EEPROM_WriteByte(DOOR_Status_Loc,0,'1');
     404:	41 e3       	ldi	r20, 0x31	; 49
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	84 ea       	ldi	r24, 0xA4	; 164
     40a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <EEPROM_WriteByte>
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	83 ec       	ldi	r24, 0xC3	; 195
     412:	99 e0       	ldi	r25, 0x09	; 9
     414:	21 50       	subi	r18, 0x01	; 1
     416:	80 40       	sbci	r24, 0x00	; 0
     418:	90 40       	sbci	r25, 0x00	; 0
     41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41e:	00 00       	nop
			_delay_ms(200);
			Admin_Choice = STD_Low;
			goto adminmenu;
     420:	46 cf       	rjmp	.-372    	; 0x2ae <AdminMenu+0x26>
		}
		else
		{
			UART_TransmaitString("\nClosing Main Door!\n");
     422:	8d ef       	ldi	r24, 0xFD	; 253
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <UART_TransmaitString>
			ServoMotor(0);
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 ce 0b 	call	0x179c	; 0x179c <ServoMotor>
			EEPROM_WriteByte(DOOR_Status_Loc,0,0xFF);
     432:	4f ef       	ldi	r20, 0xFF	; 255
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	84 ea       	ldi	r24, 0xA4	; 164
     438:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <EEPROM_WriteByte>
     43c:	2f ef       	ldi	r18, 0xFF	; 255
     43e:	83 ec       	ldi	r24, 0xC3	; 195
     440:	99 e0       	ldi	r25, 0x09	; 9
     442:	21 50       	subi	r18, 0x01	; 1
     444:	80 40       	sbci	r24, 0x00	; 0
     446:	90 40       	sbci	r25, 0x00	; 0
     448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     44c:	00 00       	nop
			_delay_ms(200);
			Admin_Choice = STD_Low;
			goto adminmenu;
     44e:	2f cf       	rjmp	.-418    	; 0x2ae <AdminMenu+0x26>
		}
		break;
		
		case 'e':
		usersCount = Users_Count();
     450:	0e 94 0c 01 	call	0x218	; 0x218 <Users_Count>
		if(usersCount == 0)
     454:	81 11       	cpse	r24, r1
     456:	05 c0       	rjmp	.+10     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		{
			Bluetooth_TransmaitString("\nNo Registered Users, register a user first!");
     458:	82 e1       	ldi	r24, 0x12	; 18
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			goto adminmenu;
     460:	26 cf       	rjmp	.-436    	; 0x2ae <AdminMenu+0x26>
		}
		else if(usersCount == 1)
     462:	81 30       	cpi	r24, 0x01	; 1
     464:	71 f5       	brne	.+92     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		{
			u8 exist1=STD_Low,exist2 = STD_Low;
			exist1 = Password_Exist(USER_PASS_LOC);
     466:	80 ea       	ldi	r24, 0xA0	; 160
     468:	0e 94 7e 00 	call	0xfc	; 0xfc <Password_Exist>
     46c:	c8 2f       	mov	r28, r24
			exist2 = Password_Exist(USER2_PASS_LOC);
     46e:	88 ea       	ldi	r24, 0xA8	; 168
     470:	0e 94 7e 00 	call	0xfc	; 0xfc <Password_Exist>
			if(exist1 == 1)
     474:	c1 30       	cpi	r28, 0x01	; 1
     476:	89 f4       	brne	.+34     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			{
				Bluetooth_TransmaitString("\n\n\n\n\n\n\n\nUser One mode On!");
     478:	87 e0       	ldi	r24, 0x07	; 7
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	80 e7       	ldi	r24, 0x70	; 112
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	21 50       	subi	r18, 0x01	; 1
     488:	80 40       	sbci	r24, 0x00	; 0
     48a:	90 40       	sbci	r25, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     490:	00 00       	nop
				_delay_ms(50);
				Menu1(USER_PASS_LOC);
     492:	80 ea       	ldi	r24, 0xA0	; 160
     494:	0e 94 8d 08 	call	0x111a	; 0x111a <Menu1>
     498:	92 c0       	rjmp	.+292    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
			}
			else if (exist2 == 1)
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	09 f0       	breq	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49e:	8f c0       	rjmp	.+286    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
			{
				Bluetooth_TransmaitString("\n\n\n\n\n\n\n\nUser Two mode On!");
     4a0:	8e e3       	ldi	r24, 0x3E	; 62
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
     4a8:	2f ef       	ldi	r18, 0xFF	; 255
     4aa:	80 e7       	ldi	r24, 0x70	; 112
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	21 50       	subi	r18, 0x01	; 1
     4b0:	80 40       	sbci	r24, 0x00	; 0
     4b2:	90 40       	sbci	r25, 0x00	; 0
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4b8:	00 00       	nop
				_delay_ms(50);
				Menu1(USER2_PASS_LOC);
     4ba:	88 ea       	ldi	r24, 0xA8	; 168
     4bc:	0e 94 8d 08 	call	0x111a	; 0x111a <Menu1>
     4c0:	7e c0       	rjmp	.+252    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
			else
			{
				//Do nothing
			}
		}
		else if(usersCount == 2)
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4c6:	7b c0       	rjmp	.+246    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
		{
			ChooseUser();
     4c8:	0e 94 1d 01 	call	0x23a	; 0x23a <ChooseUser>
     4cc:	78 c0       	rjmp	.+240    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
		}

		break;
		
		case 'd':
		usersCount = Users_Count();
     4ce:	0e 94 0c 01 	call	0x218	; 0x218 <Users_Count>
		if(usersCount == 0)
     4d2:	81 11       	cpse	r24, r1
     4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
		{
			Bluetooth_TransmaitString("\nNo users Registered! (0/2)");
     4d6:	8f e3       	ldi	r24, 0x3F	; 63
     4d8:	93 e0       	ldi	r25, 0x03	; 3
     4da:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			goto adminmenu;
     4de:	e7 ce       	rjmp	.-562    	; 0x2ae <AdminMenu+0x26>
		}
		else if(usersCount == 1)
     4e0:	81 30       	cpi	r24, 0x01	; 1
     4e2:	29 f4       	brne	.+10     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
		{
			Bluetooth_TransmaitString("\nOne users Registered! (1/2)");
     4e4:	8b e5       	ldi	r24, 0x5B	; 91
     4e6:	93 e0       	ldi	r25, 0x03	; 3
     4e8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			goto adminmenu;
     4ec:	e0 ce       	rjmp	.-576    	; 0x2ae <AdminMenu+0x26>
		}
		else if(usersCount == 2)
     4ee:	82 30       	cpi	r24, 0x02	; 2
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	dd ce       	rjmp	.-582    	; 0x2ae <AdminMenu+0x26>
		{
			Bluetooth_TransmaitString("\nTwo users Registered! (2/2)");
     4f4:	88 e7       	ldi	r24, 0x78	; 120
     4f6:	93 e0       	ldi	r25, 0x03	; 3
     4f8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			goto adminmenu;
     4fc:	d8 ce       	rjmp	.-592    	; 0x2ae <AdminMenu+0x26>
		}
		goto adminmenu;
		break;
		
		case 'a':
		usersCount = Users_Count();
     4fe:	0e 94 0c 01 	call	0x218	; 0x218 <Users_Count>
		if(usersCount == 2)
     502:	82 30       	cpi	r24, 0x02	; 2
     504:	29 f4       	brne	.+10     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
		{
			Bluetooth_TransmaitString("\nAll users are registered!");
     506:	85 e9       	ldi	r24, 0x95	; 149
     508:	93 e0       	ldi	r25, 0x03	; 3
     50a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			goto adminmenu;
     50e:	cf ce       	rjmp	.-610    	; 0x2ae <AdminMenu+0x26>
		}
		else
		{
			u8 exist1 = STD_Low;
			exist1 = Password_Exist(USER_PASS_LOC);
     510:	80 ea       	ldi	r24, 0xA0	; 160
     512:	0e 94 7e 00 	call	0xfc	; 0xfc <Password_Exist>
			if(exist1 == 1)
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	41 f4       	brne	.+16     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
			{
				Bluetooth_TransmaitString("\nRegister User Two Now!");
     51a:	80 eb       	ldi	r24, 0xB0	; 176
     51c:	93 e0       	ldi	r25, 0x03	; 3
     51e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
				Menu1(USER2_PASS_LOC);
     522:	88 ea       	ldi	r24, 0xA8	; 168
     524:	0e 94 8d 08 	call	0x111a	; 0x111a <Menu1>
     528:	4a c0       	rjmp	.+148    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
			}
			else
			{
				Bluetooth_TransmaitString("\nRegister user One Now!");
     52a:	88 ec       	ldi	r24, 0xC8	; 200
     52c:	93 e0       	ldi	r25, 0x03	; 3
     52e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
				Menu1(USER_PASS_LOC);
     532:	80 ea       	ldi	r24, 0xA0	; 160
     534:	0e 94 8d 08 	call	0x111a	; 0x111a <Menu1>
     538:	42 c0       	rjmp	.+132    	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
			}
		}
		break;
		
		case 'b':
		if(Password_Exist(USER_PASS_LOC) == 1)
     53a:	80 ea       	ldi	r24, 0xA0	; 160
     53c:	0e 94 7e 00 	call	0xfc	; 0xfc <Password_Exist>
     540:	81 30       	cpi	r24, 0x01	; 1
     542:	b9 f4       	brne	.+46     	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     544:	c0 e0       	ldi	r28, 0x00	; 0
		{
			for(u8 i = 0 ; i < 4; i++)
			{
				EEPROM_WriteByte(USER_PASS_LOC,i,0xFF);
     546:	4f ef       	ldi	r20, 0xFF	; 255
     548:	6c 2f       	mov	r22, r28
     54a:	80 ea       	ldi	r24, 0xA0	; 160
     54c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <EEPROM_WriteByte>
     550:	2f ef       	ldi	r18, 0xFF	; 255
     552:	83 ec       	ldi	r24, 0xC3	; 195
     554:	99 e0       	ldi	r25, 0x09	; 9
     556:	21 50       	subi	r18, 0x01	; 1
     558:	80 40       	sbci	r24, 0x00	; 0
     55a:	90 40       	sbci	r25, 0x00	; 0
     55c:	e1 f7       	brne	.-8      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     55e:	00 c0       	rjmp	.+0      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     560:	00 00       	nop
		break;
		
		case 'b':
		if(Password_Exist(USER_PASS_LOC) == 1)
		{
			for(u8 i = 0 ; i < 4; i++)
     562:	cf 5f       	subi	r28, 0xFF	; 255
     564:	c4 30       	cpi	r28, 0x04	; 4
     566:	79 f7       	brne	.-34     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
			{
				EEPROM_WriteByte(USER_PASS_LOC,i,0xFF);
				_delay_ms(200);
			}
			Bluetooth_TransmaitString("\nUser One deleted successfully!");
     568:	80 ee       	ldi	r24, 0xE0	; 224
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			goto adminmenu;
     570:	9e ce       	rjmp	.-708    	; 0x2ae <AdminMenu+0x26>
		}
		else
		{
			Bluetooth_TransmaitString("\nUser One is not registered yet!");
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	94 e0       	ldi	r25, 0x04	; 4
     576:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			goto adminmenu;
     57a:	99 ce       	rjmp	.-718    	; 0x2ae <AdminMenu+0x26>
		}
		break;
		
		case 'c':
		if(Password_Exist(USER2_PASS_LOC) == 1)
     57c:	88 ea       	ldi	r24, 0xA8	; 168
     57e:	0e 94 7e 00 	call	0xfc	; 0xfc <Password_Exist>
     582:	81 30       	cpi	r24, 0x01	; 1
     584:	b9 f4       	brne	.+46     	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     586:	c0 e0       	ldi	r28, 0x00	; 0
		{
			for(u8 i = 0 ; i < 4; i++)
			{
				EEPROM_WriteByte(USER2_PASS_LOC,i,0xFF);
     588:	4f ef       	ldi	r20, 0xFF	; 255
     58a:	6c 2f       	mov	r22, r28
     58c:	88 ea       	ldi	r24, 0xA8	; 168
     58e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <EEPROM_WriteByte>
     592:	2f ef       	ldi	r18, 0xFF	; 255
     594:	83 ec       	ldi	r24, 0xC3	; 195
     596:	99 e0       	ldi	r25, 0x09	; 9
     598:	21 50       	subi	r18, 0x01	; 1
     59a:	80 40       	sbci	r24, 0x00	; 0
     59c:	90 40       	sbci	r25, 0x00	; 0
     59e:	e1 f7       	brne	.-8      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     5a2:	00 00       	nop
		break;
		
		case 'c':
		if(Password_Exist(USER2_PASS_LOC) == 1)
		{
			for(u8 i = 0 ; i < 4; i++)
     5a4:	cf 5f       	subi	r28, 0xFF	; 255
     5a6:	c4 30       	cpi	r28, 0x04	; 4
     5a8:	79 f7       	brne	.-34     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
			{
				EEPROM_WriteByte(USER2_PASS_LOC,i,0xFF);
				_delay_ms(200);
			}
			Bluetooth_TransmaitString("\nUser Two deleted successfully!");
     5aa:	81 e2       	ldi	r24, 0x21	; 33
     5ac:	94 e0       	ldi	r25, 0x04	; 4
     5ae:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			goto adminmenu;
     5b2:	7d ce       	rjmp	.-774    	; 0x2ae <AdminMenu+0x26>
		}
		else
		{
			Bluetooth_TransmaitString("\nUser Two is not registered yet!");
     5b4:	81 e4       	ldi	r24, 0x41	; 65
     5b6:	94 e0       	ldi	r25, 0x04	; 4
     5b8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			goto adminmenu;
     5bc:	78 ce       	rjmp	.-784    	; 0x2ae <AdminMenu+0x26>
		
		default:
		goto adminmenu;
		break;
	}
}
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <MainMenu>:
/*************************************************************
User Control Main Menu
*************************************************************/

void MainMenu(u8 location) //Main App Menu
{
     5c2:	cf 93       	push	r28
     5c4:	c8 2f       	mov	r28, r24
	u8 PressKey = STD_Low;
	LCD_Clear();
     5c6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
	LCD_String("1:ROOM1  2:ROOM2");
     5ca:	82 e6       	ldi	r24, 0x62	; 98
     5cc:	94 e0       	ldi	r25, 0x04	; 4
     5ce:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	LCD_SetPos(2,0);
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
	LCD_String("3:Admin  4:Lock");
     5da:	83 e7       	ldi	r24, 0x73	; 115
     5dc:	94 e0       	ldi	r25, 0x04	; 4
     5de:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	
	while(PressKey == STD_Low){
		PressKey = GetKey(); //Wait for user Input
     5e2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
		if(PressKey != STD_Low)
     5e6:	88 23       	and	r24, r24
     5e8:	e1 f3       	breq	.-8      	; 0x5e2 <MainMenu+0x20>
		{
			switch(PressKey)
     5ea:	82 33       	cpi	r24, 0x32	; 50
     5ec:	79 f0       	breq	.+30     	; 0x60c <MainMenu+0x4a>
     5ee:	18 f4       	brcc	.+6      	; 0x5f6 <MainMenu+0x34>
     5f0:	81 33       	cpi	r24, 0x31	; 49
     5f2:	31 f0       	breq	.+12     	; 0x600 <MainMenu+0x3e>
     5f4:	3a c0       	rjmp	.+116    	; 0x66a <MainMenu+0xa8>
     5f6:	83 33       	cpi	r24, 0x33	; 51
     5f8:	79 f0       	breq	.+30     	; 0x618 <MainMenu+0x56>
     5fa:	84 33       	cpi	r24, 0x34	; 52
     5fc:	91 f0       	breq	.+36     	; 0x622 <MainMenu+0x60>
     5fe:	35 c0       	rjmp	.+106    	; 0x66a <MainMenu+0xa8>
			{
				case '1':
				LCD_Clear();
     600:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				PressKey = STD_Low;
				ROOM1(location);
     604:	8c 2f       	mov	r24, r28
     606:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
				break;
     60a:	eb cf       	rjmp	.-42     	; 0x5e2 <MainMenu+0x20>
				
				case '2':
				LCD_Clear();
     60c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				PressKey = STD_Low;
				ROOM2(location);
     610:	8c 2f       	mov	r24, r28
     612:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
				break;
     616:	e5 cf       	rjmp	.-54     	; 0x5e2 <MainMenu+0x20>
				
				case '3':
				LCD_Clear();
     618:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				PressKey = STD_Low;
				AdminMenu();
     61c:	0e 94 44 01 	call	0x288	; 0x288 <AdminMenu>
				break;
     620:	e0 cf       	rjmp	.-64     	; 0x5e2 <MainMenu+0x20>
				
				case '4':
				LCD_Clear();
     622:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				PressKey = STD_Low;
				LCD_String("Locking System...");
     626:	83 e8       	ldi	r24, 0x83	; 131
     628:	94 e0       	ldi	r25, 0x04	; 4
     62a:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
     62e:	2f ef       	ldi	r18, 0xFF	; 255
     630:	83 ec       	ldi	r24, 0xC3	; 195
     632:	99 e0       	ldi	r25, 0x09	; 9
     634:	21 50       	subi	r18, 0x01	; 1
     636:	80 40       	sbci	r24, 0x00	; 0
     638:	90 40       	sbci	r25, 0x00	; 0
     63a:	e1 f7       	brne	.-8      	; 0x634 <MainMenu+0x72>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <MainMenu+0x7c>
     63e:	00 00       	nop
				_delay_ms(200);
				LCD_SetPos(2,0);
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	82 e0       	ldi	r24, 0x02	; 2
     644:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
				LCD_String("System Locked");
     648:	85 e9       	ldi	r24, 0x95	; 149
     64a:	94 e0       	ldi	r25, 0x04	; 4
     64c:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
     650:	2f ef       	ldi	r18, 0xFF	; 255
     652:	83 ec       	ldi	r24, 0xC3	; 195
     654:	99 e0       	ldi	r25, 0x09	; 9
     656:	21 50       	subi	r18, 0x01	; 1
     658:	80 40       	sbci	r24, 0x00	; 0
     65a:	90 40       	sbci	r25, 0x00	; 0
     65c:	e1 f7       	brne	.-8      	; 0x656 <MainMenu+0x94>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <MainMenu+0x9e>
     660:	00 00       	nop
				_delay_ms(200);
				Menu2(location);
     662:	8c 2f       	mov	r24, r28
     664:	0e 94 4b 03 	call	0x696	; 0x696 <Menu2>
				break;
     668:	bc cf       	rjmp	.-136    	; 0x5e2 <MainMenu+0x20>
				
				default:
				LCD_Clear();
     66a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				LCD_String("Wrong Choice!");
     66e:	83 ea       	ldi	r24, 0xA3	; 163
     670:	94 e0       	ldi	r25, 0x04	; 4
     672:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
     676:	2f ef       	ldi	r18, 0xFF	; 255
     678:	87 e8       	ldi	r24, 0x87	; 135
     67a:	93 e1       	ldi	r25, 0x13	; 19
     67c:	21 50       	subi	r18, 0x01	; 1
     67e:	80 40       	sbci	r24, 0x00	; 0
     680:	90 40       	sbci	r25, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <MainMenu+0xba>
     684:	00 c0       	rjmp	.+0      	; 0x686 <MainMenu+0xc4>
     686:	00 00       	nop
				_delay_ms(400);
				LCD_Clear();
     688:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				MainMenu(location);
     68c:	8c 2f       	mov	r24, r28
     68e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <MainMenu>
				break;
			}
		}
	}
}
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <Menu2>:

/*************************************************************
Login Menu Function
*************************************************************/
void Menu2(u8 location)
{
     696:	8f 92       	push	r8
     698:	9f 92       	push	r9
     69a:	af 92       	push	r10
     69c:	bf 92       	push	r11
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
     6b2:	28 97       	sbiw	r28, 0x08	; 8
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	a8 2e       	mov	r10, r24
	s8 Password_User[PASSWORD_LENGTH] = {STD_Low};
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	1a 82       	std	Y+2, r1	; 0x02
     6c4:	1b 82       	std	Y+3, r1	; 0x03
     6c6:	1c 82       	std	Y+4, r1	; 0x04
	s8 SavedPassword[PASSWORD_LENGTH] = {STD_Low};
     6c8:	1d 82       	std	Y+5, r1	; 0x05
     6ca:	1e 82       	std	Y+6, r1	; 0x06
     6cc:	1f 82       	std	Y+7, r1	; 0x07
     6ce:	18 86       	std	Y+8, r1	; 0x08
	u8 password_trials = 0;
	s8 LCD_TRIALS_CHAR = '3';
	u8 Password_Counter = 0;
	
	getPassword(location,SavedPassword);
     6d0:	be 01       	movw	r22, r28
     6d2:	6b 5f       	subi	r22, 0xFB	; 251
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255
     6d6:	0e 94 bc 00 	call	0x178	; 0x178 <getPassword>
     6da:	2f ef       	ldi	r18, 0xFF	; 255
     6dc:	80 e7       	ldi	r24, 0x70	; 112
     6de:	92 e0       	ldi	r25, 0x02	; 2
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	80 40       	sbci	r24, 0x00	; 0
     6e4:	90 40       	sbci	r25, 0x00	; 0
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <Menu2+0x4a>
     6e8:	00 c0       	rjmp	.+0      	; 0x6ea <Menu2+0x54>
     6ea:	00 00       	nop
void Menu2(u8 location)
{
	s8 Password_User[PASSWORD_LENGTH] = {STD_Low};
	s8 SavedPassword[PASSWORD_LENGTH] = {STD_Low};
	u8 password_trials = 0;
	s8 LCD_TRIALS_CHAR = '3';
     6ec:	0f 2e       	mov	r0, r31
     6ee:	f3 e3       	ldi	r31, 0x33	; 51
     6f0:	bf 2e       	mov	r11, r31
     6f2:	f0 2d       	mov	r31, r0
     6f4:	6e 01       	movw	r12, r28
     6f6:	a9 e0       	ldi	r26, 0x09	; 9
     6f8:	ca 0e       	add	r12, r26
     6fa:	d1 1c       	adc	r13, r1
	getPassword(location,SavedPassword);
	_delay_ms(50);
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
	LCD_Clear();
     6fc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
	LCD_String("Password:");
     700:	8b e4       	ldi	r24, 0x4B	; 75
     702:	97 e0       	ldi	r25, 0x07	; 7
     704:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	LCD_SetPos(2,0);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
	if(location == USER_PASS_LOC)
     710:	b0 ea       	ldi	r27, 0xA0	; 160
     712:	ab 12       	cpse	r10, r27
     714:	05 c0       	rjmp	.+10     	; 0x720 <Menu2+0x8a>
	{
		LCD_String("*****USER1*****");
     716:	81 eb       	ldi	r24, 0xB1	; 177
     718:	94 e0       	ldi	r25, 0x04	; 4
     71a:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
     71e:	07 c0       	rjmp	.+14     	; 0x72e <Menu2+0x98>
	}
	else if (location == USER2_PASS_LOC)
     720:	e8 ea       	ldi	r30, 0xA8	; 168
     722:	ae 12       	cpse	r10, r30
     724:	04 c0       	rjmp	.+8      	; 0x72e <Menu2+0x98>
	{
		LCD_String("*****USER2*****");
     726:	81 ec       	ldi	r24, 0xC1	; 193
     728:	94 e0       	ldi	r25, 0x04	; 4
     72a:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	}
	else
	{
		//Do nothing
	}
	LCD_SetPos(1,9);
     72e:	69 e0       	ldi	r22, 0x09	; 9
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
     736:	8e 01       	movw	r16, r28
     738:	0f 5f       	subi	r16, 0xFF	; 255
     73a:	1f 4f       	sbci	r17, 0xFF	; 255
     73c:	48 01       	movw	r8, r16
	
	getPassword(location,SavedPassword);
	_delay_ms(50);
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
     73e:	e1 2c       	mov	r14, r1
	LCD_SetPos(1,9);
	
	while(Password_Counter<PASSWORD_LENGTH)
	{
		u8 keypad = STD_Low;
		keypad = GetKey();
     740:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     744:	f8 2e       	mov	r15, r24
		if(keypad != STD_Low)
     746:	88 23       	and	r24, r24
     748:	e1 f0       	breq	.+56     	; 0x782 <Menu2+0xec>
		{
			LCD_Char(keypad);
     74a:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
     74e:	ff ef       	ldi	r31, 0xFF	; 255
     750:	20 e7       	ldi	r18, 0x70	; 112
     752:	82 e0       	ldi	r24, 0x02	; 2
     754:	f1 50       	subi	r31, 0x01	; 1
     756:	20 40       	sbci	r18, 0x00	; 0
     758:	80 40       	sbci	r24, 0x00	; 0
     75a:	e1 f7       	brne	.-8      	; 0x754 <Menu2+0xbe>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <Menu2+0xc8>
     75e:	00 00       	nop
			_delay_ms(50);
			LCD_SetPos(1,9+Password_Counter);
     760:	69 e0       	ldi	r22, 0x09	; 9
     762:	6e 0d       	add	r22, r14
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
			LCD_Char('*');
     76a:	8a e2       	ldi	r24, 0x2A	; 42
     76c:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
			Password_User[Password_Counter] = keypad;
     770:	d4 01       	movw	r26, r8
     772:	fd 92       	st	X+, r15
     774:	4d 01       	movw	r8, r26
			Password_Counter++;
     776:	e3 94       	inc	r14
	{
		//Do nothing
	}
	LCD_SetPos(1,9);
	
	while(Password_Counter<PASSWORD_LENGTH)
     778:	b4 e0       	ldi	r27, 0x04	; 4
     77a:	eb 16       	cp	r14, r27
     77c:	09 f4       	brne	.+2      	; 0x780 <Menu2+0xea>
     77e:	88 c0       	rjmp	.+272    	; 0x890 <__stack+0x31>
     780:	df cf       	rjmp	.-66     	; 0x740 <Menu2+0xaa>
     782:	e3 e0       	ldi	r30, 0x03	; 3
     784:	ee 15       	cp	r30, r14
     786:	e0 f6       	brcc	.-72     	; 0x740 <Menu2+0xaa>
     788:	83 c0       	rjmp	.+262    	; 0x890 <__stack+0x31>
	}
	
	Password_Counter = 0;
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
	{
		if(SavedPassword[i] == Password_User[i])
     78a:	91 91       	ld	r25, Z+
     78c:	d8 01       	movw	r26, r16
     78e:	8d 91       	ld	r24, X+
     790:	8d 01       	movw	r16, r26
     792:	98 13       	cpse	r25, r24
     794:	01 c0       	rjmp	.+2      	; 0x798 <Menu2+0x102>
		{
			Password_Counter++;
     796:	2f 5f       	subi	r18, 0xFF	; 255
			Password_Counter++;
		}
	}
	
	Password_Counter = 0;
	for(u8 i = 0; i < PASSWORD_LENGTH; i++)
     798:	ce 16       	cp	r12, r30
     79a:	df 06       	cpc	r13, r31
     79c:	b1 f7       	brne	.-20     	; 0x78a <Menu2+0xf4>
		{
			Password_Counter++;
		}
	}
	
	if(Password_Counter == 4)
     79e:	24 30       	cpi	r18, 0x04	; 4
     7a0:	31 f5       	brne	.+76     	; 0x7ee <Menu2+0x158>
	{
		LCD_Clear();
     7a2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
		LCD_String("Correct Password!");
     7a6:	81 ed       	ldi	r24, 0xD1	; 209
     7a8:	94 e0       	ldi	r25, 0x04	; 4
     7aa:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
     7ae:	bf ef       	ldi	r27, 0xFF	; 255
     7b0:	e7 e8       	ldi	r30, 0x87	; 135
     7b2:	f3 e1       	ldi	r31, 0x13	; 19
     7b4:	b1 50       	subi	r27, 0x01	; 1
     7b6:	e0 40       	sbci	r30, 0x00	; 0
     7b8:	f0 40       	sbci	r31, 0x00	; 0
     7ba:	e1 f7       	brne	.-8      	; 0x7b4 <Menu2+0x11e>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <Menu2+0x128>
     7be:	00 00       	nop
		_delay_ms(400);
		LCD_SetPos(2,0);
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
		LCD_String("!HomeSweetHome!");
     7c8:	83 ee       	ldi	r24, 0xE3	; 227
     7ca:	94 e0       	ldi	r25, 0x04	; 4
     7cc:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
     7d0:	2f ef       	ldi	r18, 0xFF	; 255
     7d2:	89 e6       	ldi	r24, 0x69	; 105
     7d4:	98 e1       	ldi	r25, 0x18	; 24
     7d6:	21 50       	subi	r18, 0x01	; 1
     7d8:	80 40       	sbci	r24, 0x00	; 0
     7da:	90 40       	sbci	r25, 0x00	; 0
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <Menu2+0x140>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <Menu2+0x14a>
     7e0:	00 00       	nop
		_delay_ms(500);
		LCD_Clear();
     7e2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
		MainMenu(location);
     7e6:	8a 2d       	mov	r24, r10
     7e8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <MainMenu>
     7ec:	55 c0       	rjmp	.+170    	; 0x898 <__stack+0x39>
	}
	else
	{
		LCD_Clear();
     7ee:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
		LCD_String("Wrong Password!");
     7f2:	83 ef       	ldi	r24, 0xF3	; 243
     7f4:	94 e0       	ldi	r25, 0x04	; 4
     7f6:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
		password_trials++;
		LCD_TRIALS_CHAR--;
		if(password_trials == PASSWORD_TRIALS)
     7fa:	a1 e3       	ldi	r26, 0x31	; 49
     7fc:	ba 12       	cpse	r11, r26
     7fe:	30 c0       	rjmp	.+96     	; 0x860 <__stack+0x1>
		{
			LCD_Clear();
     800:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
			LCD_String("System Blocked!");
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	95 e0       	ldi	r25, 0x05	; 5
     808:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
			LCD_SetPos(2,0);
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	82 e0       	ldi	r24, 0x02	; 2
     810:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
			LCD_String("Firing Alarm!!!");
     814:	83 e1       	ldi	r24, 0x13	; 19
     816:	95 e0       	ldi	r25, 0x05	; 5
     818:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
			Bluetooth_TransmaitString("Alarm triggered!");
     81c:	83 e2       	ldi	r24, 0x23	; 35
     81e:	95 e0       	ldi	r25, 0x05	; 5
     820:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			EEPROM_WriteByte(ALARM_LOC,0,'1');
     824:	41 e3       	ldi	r20, 0x31	; 49
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	82 ea       	ldi	r24, 0xA2	; 162
     82a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <EEPROM_WriteByte>
     82e:	bf ef       	ldi	r27, 0xFF	; 255
     830:	e0 e7       	ldi	r30, 0x70	; 112
     832:	f2 e0       	ldi	r31, 0x02	; 2
     834:	b1 50       	subi	r27, 0x01	; 1
     836:	e0 40       	sbci	r30, 0x00	; 0
     838:	f0 40       	sbci	r31, 0x00	; 0
     83a:	e1 f7       	brne	.-8      	; 0x834 <Menu2+0x19e>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <Menu2+0x1a8>
     83e:	00 00       	nop
			_delay_ms(50);
			DIO_WriteChannel(DIO_ChannelB0,STD_High);
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	88 e0       	ldi	r24, 0x08	; 8
     844:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
     848:	2f ef       	ldi	r18, 0xFF	; 255
     84a:	87 e8       	ldi	r24, 0x87	; 135
     84c:	93 e1       	ldi	r25, 0x13	; 19
     84e:	21 50       	subi	r18, 0x01	; 1
     850:	80 40       	sbci	r24, 0x00	; 0
     852:	90 40       	sbci	r25, 0x00	; 0
     854:	e1 f7       	brne	.-8      	; 0x84e <Menu2+0x1b8>
     856:	00 c0       	rjmp	.+0      	; 0x858 <Menu2+0x1c2>
     858:	00 00       	nop
			_delay_ms(400);
			ALARM();
     85a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ALARM>
     85e:	1c c0       	rjmp	.+56     	; 0x898 <__stack+0x39>
	else
	{
		LCD_Clear();
		LCD_String("Wrong Password!");
		password_trials++;
		LCD_TRIALS_CHAR--;
     860:	ba 94       	dec	r11
			_delay_ms(400);
			ALARM();
		}
		else
		{
			LCD_SetPos(2,0);
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
			LCD_String("Trials left: ");
     86a:	84 e3       	ldi	r24, 0x34	; 52
     86c:	95 e0       	ldi	r25, 0x05	; 5
     86e:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
			LCD_Char(LCD_TRIALS_CHAR);
     872:	8b 2d       	mov	r24, r11
     874:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
     878:	af ef       	ldi	r26, 0xFF	; 255
     87a:	b7 e8       	ldi	r27, 0x87	; 135
     87c:	e3 e1       	ldi	r30, 0x13	; 19
     87e:	a1 50       	subi	r26, 0x01	; 1
     880:	b0 40       	sbci	r27, 0x00	; 0
     882:	e0 40       	sbci	r30, 0x00	; 0
     884:	e1 f7       	brne	.-8      	; 0x87e <__stack+0x1f>
     886:	00 c0       	rjmp	.+0      	; 0x888 <__stack+0x29>
     888:	00 00       	nop
			_delay_ms(400);
			LCD_Clear();
     88a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
			goto Retry;
     88e:	36 cf       	rjmp	.-404    	; 0x6fc <Menu2+0x66>
     890:	fe 01       	movw	r30, r28
     892:	35 96       	adiw	r30, 0x05	; 5
	
	getPassword(location,SavedPassword);
	_delay_ms(50);
	
	Retry://If Entered Password wrong return here
	Password_Counter = 0;
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	79 cf       	rjmp	.-270    	; 0x78a <Menu2+0xf4>
			_delay_ms(400);
			LCD_Clear();
			goto Retry;
		}
	}
}
     898:	28 96       	adiw	r28, 0x08	; 8
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	bf 90       	pop	r11
     8b6:	af 90       	pop	r10
     8b8:	9f 90       	pop	r9
     8ba:	8f 90       	pop	r8
     8bc:	08 95       	ret

000008be <ROOM1>:
/*************************************************************
Room1 Controlling Menu
*************************************************************/

void ROOM1(u8 location)
{
     8be:	9f 92       	push	r9
     8c0:	af 92       	push	r10
     8c2:	bf 92       	push	r11
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	d8 2f       	mov	r29, r24
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
     8d6:	91 2c       	mov	r9, r1
     8d8:	68 94       	set
     8da:	ff 24       	eor	r15, r15
     8dc:	f1 f8       	bld	r15, 1
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     8de:	df 2c       	mov	r13, r15
							_delay_ms(100);
							switch(Key)
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
     8e0:	19 2d       	mov	r17, r9
     8e2:	c9 2c       	mov	r12, r9
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     8e4:	af 2c       	mov	r10, r15

void ROOM1(u8 location)
{
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
     8e6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
	LCD_String("1:Lamp1 2:Lamp2");
     8ea:	82 e4       	ldi	r24, 0x42	; 66
     8ec:	95 e0       	ldi	r25, 0x05	; 5
     8ee:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	LCD_SetPos(2,0);
     8f2:	69 2d       	mov	r22, r9
     8f4:	8f 2d       	mov	r24, r15
     8f6:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
	LCD_String("3:AC    4:Return");
     8fa:	82 e5       	ldi	r24, 0x52	; 82
     8fc:	95 e0       	ldi	r25, 0x05	; 5
     8fe:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	
	while(Key == STD_Low)
	{
		Key = GetKey();
     902:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
		if (Key != STD_Low)
     906:	88 23       	and	r24, r24
     908:	e1 f3       	breq	.-8      	; 0x902 <ROOM1+0x44>
		{
			switch(Key)
     90a:	82 33       	cpi	r24, 0x32	; 50
     90c:	09 f4       	brne	.+2      	; 0x910 <ROOM1+0x52>
     90e:	96 c0       	rjmp	.+300    	; 0xa3c <ROOM1+0x17e>
     910:	18 f4       	brcc	.+6      	; 0x918 <ROOM1+0x5a>
     912:	81 33       	cpi	r24, 0x31	; 49
     914:	41 f0       	breq	.+16     	; 0x926 <ROOM1+0x68>
     916:	fc c1       	rjmp	.+1016   	; 0xd10 <ROOM1+0x452>
     918:	83 33       	cpi	r24, 0x33	; 51
     91a:	09 f4       	brne	.+2      	; 0x91e <ROOM1+0x60>
     91c:	1a c1       	rjmp	.+564    	; 0xb52 <ROOM1+0x294>
     91e:	84 33       	cpi	r24, 0x34	; 52
     920:	09 f4       	brne	.+2      	; 0x924 <ROOM1+0x66>
     922:	f0 c1       	rjmp	.+992    	; 0xd04 <ROOM1+0x446>
     924:	f5 c1       	rjmp	.+1002   	; 0xd10 <ROOM1+0x452>
			{
				case '1':
				LCD_Clear();
     926:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
     92a:	2f ef       	ldi	r18, 0xFF	; 255
     92c:	80 e7       	ldi	r24, 0x70	; 112
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	21 50       	subi	r18, 0x01	; 1
     932:	80 40       	sbci	r24, 0x00	; 0
     934:	90 40       	sbci	r25, 0x00	; 0
     936:	e1 f7       	brne	.-8      	; 0x930 <ROOM1+0x72>
     938:	00 c0       	rjmp	.+0      	; 0x93a <ROOM1+0x7c>
     93a:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led1);
     93c:	81 e3       	ldi	r24, 0x31	; 49
     93e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
     942:	2f ef       	ldi	r18, 0xFF	; 255
     944:	80 e7       	ldi	r24, 0x70	; 112
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	21 50       	subi	r18, 0x01	; 1
     94a:	80 40       	sbci	r24, 0x00	; 0
     94c:	90 40       	sbci	r25, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <ROOM1+0x8a>
     950:	00 c0       	rjmp	.+0      	; 0x952 <ROOM1+0x94>
     952:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
				if(Slave_Status == On)
     95a:	8f 34       	cpi	r24, 0x4F	; 79
     95c:	99 f5       	brne	.+102    	; 0x9c4 <ROOM1+0x106>
				{
					LCD_Clear();
     95e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Led is On!");
     962:	83 e6       	ldi	r24, 0x63	; 99
     964:	95 e0       	ldi	r25, 0x05	; 5
     966:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
     96a:	61 2f       	mov	r22, r17
     96c:	8d 2d       	mov	r24, r13
     96e:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     972:	8e e6       	ldi	r24, 0x6E	; 110
     974:	95 e0       	ldi	r25, 0x05	; 5
     976:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     97a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     97e:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     980:	88 23       	and	r24, r24
     982:	d9 f3       	breq	.-10     	; 0x97a <ROOM1+0xbc>
     984:	2f ef       	ldi	r18, 0xFF	; 255
     986:	81 ee       	ldi	r24, 0xE1	; 225
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	21 50       	subi	r18, 0x01	; 1
     98c:	80 40       	sbci	r24, 0x00	; 0
     98e:	90 40       	sbci	r25, 0x00	; 0
     990:	e1 f7       	brne	.-8      	; 0x98a <ROOM1+0xcc>
     992:	00 c0       	rjmp	.+0      	; 0x994 <ROOM1+0xd6>
     994:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     996:	c1 33       	cpi	r28, 0x31	; 49
     998:	19 f0       	breq	.+6      	; 0x9a0 <ROOM1+0xe2>
     99a:	c2 33       	cpi	r28, 0x32	; 50
     99c:	61 f0       	breq	.+24     	; 0x9b6 <ROOM1+0xf8>
     99e:	48 c0       	rjmp	.+144    	; 0xa30 <ROOM1+0x172>
							{
								case '1':
								SPI_TxRx(Led1_TurnOff);
     9a0:	81 e2       	ldi	r24, 0x21	; 33
     9a2:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room1 is Off now!");
     9a6:	8f e7       	ldi	r24, 0x7F	; 127
     9a8:	95 e0       	ldi	r25, 0x05	; 5
     9aa:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM1(location);
     9ae:	8d 2f       	mov	r24, r29
     9b0:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
     9b4:	e2 cf       	rjmp	.-60     	; 0x97a <ROOM1+0xbc>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     9b6:	89 e9       	ldi	r24, 0x99	; 153
     9b8:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								ROOM1(location);
     9bc:	8d 2f       	mov	r24, r29
     9be:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
     9c2:	36 c0       	rjmp	.+108    	; 0xa30 <ROOM1+0x172>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     9c4:	86 34       	cpi	r24, 0x46	; 70
     9c6:	99 f5       	brne	.+102    	; 0xa2e <ROOM1+0x170>
				{
					LCD_Clear();
     9c8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Led is Off!");
     9cc:	88 e9       	ldi	r24, 0x98	; 152
     9ce:	95 e0       	ldi	r25, 0x05	; 5
     9d0:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
     9d4:	61 2f       	mov	r22, r17
     9d6:	8d 2d       	mov	r24, r13
     9d8:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     9dc:	84 ea       	ldi	r24, 0xA4	; 164
     9de:	95 e0       	ldi	r25, 0x05	; 5
     9e0:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     9e4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     9e8:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     9ea:	88 23       	and	r24, r24
     9ec:	d9 f3       	breq	.-10     	; 0x9e4 <ROOM1+0x126>
     9ee:	2f ef       	ldi	r18, 0xFF	; 255
     9f0:	81 ee       	ldi	r24, 0xE1	; 225
     9f2:	94 e0       	ldi	r25, 0x04	; 4
     9f4:	21 50       	subi	r18, 0x01	; 1
     9f6:	80 40       	sbci	r24, 0x00	; 0
     9f8:	90 40       	sbci	r25, 0x00	; 0
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <ROOM1+0x136>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <ROOM1+0x140>
     9fe:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     a00:	c1 33       	cpi	r28, 0x31	; 49
     a02:	19 f0       	breq	.+6      	; 0xa0a <ROOM1+0x14c>
     a04:	c2 33       	cpi	r28, 0x32	; 50
     a06:	61 f0       	breq	.+24     	; 0xa20 <ROOM1+0x162>
     a08:	13 c0       	rjmp	.+38     	; 0xa30 <ROOM1+0x172>
							{
								case '1':
								SPI_TxRx(Led1_TurnOn);
     a0a:	81 e1       	ldi	r24, 0x11	; 17
     a0c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room1 is on now!");
     a10:	84 eb       	ldi	r24, 0xB4	; 180
     a12:	95 e0       	ldi	r25, 0x05	; 5
     a14:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM1(location);
     a18:	8d 2f       	mov	r24, r29
     a1a:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
     a1e:	e2 cf       	rjmp	.-60     	; 0x9e4 <ROOM1+0x126>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     a20:	89 e9       	ldi	r24, 0x99	; 153
     a22:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								ROOM1(location);
     a26:	8d 2f       	mov	r24, r29
     a28:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <ROOM1+0x172>
		{
			switch(Key)
			{
				case '1':
				LCD_Clear();
				Key = STD_Low;
     a2e:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     a30:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				ROOM1(location);
     a34:	8d 2f       	mov	r24, r29
     a36:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
				break;
     a3a:	7a c1       	rjmp	.+756    	; 0xd30 <ROOM1+0x472>
				
				
				case '2':
				LCD_Clear();
     a3c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	80 e7       	ldi	r24, 0x70	; 112
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	21 50       	subi	r18, 0x01	; 1
     a48:	80 40       	sbci	r24, 0x00	; 0
     a4a:	90 40       	sbci	r25, 0x00	; 0
     a4c:	e1 f7       	brne	.-8      	; 0xa46 <ROOM1+0x188>
     a4e:	00 c0       	rjmp	.+0      	; 0xa50 <ROOM1+0x192>
     a50:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led2);
     a52:	82 e3       	ldi	r24, 0x32	; 50
     a54:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
     a58:	2f ef       	ldi	r18, 0xFF	; 255
     a5a:	80 e7       	ldi	r24, 0x70	; 112
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	21 50       	subi	r18, 0x01	; 1
     a60:	80 40       	sbci	r24, 0x00	; 0
     a62:	90 40       	sbci	r25, 0x00	; 0
     a64:	e1 f7       	brne	.-8      	; 0xa5e <ROOM1+0x1a0>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <ROOM1+0x1aa>
     a68:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
				if(Slave_Status == On)
     a70:	8f 34       	cpi	r24, 0x4F	; 79
     a72:	99 f5       	brne	.+102    	; 0xada <ROOM1+0x21c>
				{
					LCD_Clear();
     a74:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Led is On!");
     a78:	83 e6       	ldi	r24, 0x63	; 99
     a7a:	95 e0       	ldi	r25, 0x05	; 5
     a7c:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
     a80:	61 2f       	mov	r22, r17
     a82:	8d 2d       	mov	r24, r13
     a84:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     a88:	8e e6       	ldi	r24, 0x6E	; 110
     a8a:	95 e0       	ldi	r25, 0x05	; 5
     a8c:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     a90:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     a94:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     a96:	88 23       	and	r24, r24
     a98:	d9 f3       	breq	.-10     	; 0xa90 <ROOM1+0x1d2>
     a9a:	2f ef       	ldi	r18, 0xFF	; 255
     a9c:	81 ee       	ldi	r24, 0xE1	; 225
     a9e:	94 e0       	ldi	r25, 0x04	; 4
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	80 40       	sbci	r24, 0x00	; 0
     aa4:	90 40       	sbci	r25, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <ROOM1+0x1e2>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <ROOM1+0x1ec>
     aaa:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     aac:	c1 33       	cpi	r28, 0x31	; 49
     aae:	19 f0       	breq	.+6      	; 0xab6 <ROOM1+0x1f8>
     ab0:	c2 33       	cpi	r28, 0x32	; 50
     ab2:	61 f0       	breq	.+24     	; 0xacc <ROOM1+0x20e>
     ab4:	48 c0       	rjmp	.+144    	; 0xb46 <ROOM1+0x288>
							{
								case '1':
								SPI_TxRx(Led2_TurnOff);
     ab6:	82 e2       	ldi	r24, 0x22	; 34
     ab8:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room1 is Off now!");
     abc:	8c ec       	ldi	r24, 0xCC	; 204
     abe:	95 e0       	ldi	r25, 0x05	; 5
     ac0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM1(location);
     ac4:	8d 2f       	mov	r24, r29
     ac6:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
     aca:	e2 cf       	rjmp	.-60     	; 0xa90 <ROOM1+0x1d2>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     acc:	89 e9       	ldi	r24, 0x99	; 153
     ace:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								ROOM1(location);
     ad2:	8d 2f       	mov	r24, r29
     ad4:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
     ad8:	36 c0       	rjmp	.+108    	; 0xb46 <ROOM1+0x288>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     ada:	86 34       	cpi	r24, 0x46	; 70
     adc:	99 f5       	brne	.+102    	; 0xb44 <ROOM1+0x286>
				{
					LCD_Clear();
     ade:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Led is Off!");
     ae2:	88 e9       	ldi	r24, 0x98	; 152
     ae4:	95 e0       	ldi	r25, 0x05	; 5
     ae6:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
     aea:	61 2f       	mov	r22, r17
     aec:	8d 2d       	mov	r24, r13
     aee:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     af2:	84 ea       	ldi	r24, 0xA4	; 164
     af4:	95 e0       	ldi	r25, 0x05	; 5
     af6:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     afa:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     afe:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     b00:	88 23       	and	r24, r24
     b02:	d9 f3       	breq	.-10     	; 0xafa <ROOM1+0x23c>
     b04:	2f ef       	ldi	r18, 0xFF	; 255
     b06:	81 ee       	ldi	r24, 0xE1	; 225
     b08:	94 e0       	ldi	r25, 0x04	; 4
     b0a:	21 50       	subi	r18, 0x01	; 1
     b0c:	80 40       	sbci	r24, 0x00	; 0
     b0e:	90 40       	sbci	r25, 0x00	; 0
     b10:	e1 f7       	brne	.-8      	; 0xb0a <ROOM1+0x24c>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <ROOM1+0x256>
     b14:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     b16:	c1 33       	cpi	r28, 0x31	; 49
     b18:	19 f0       	breq	.+6      	; 0xb20 <ROOM1+0x262>
     b1a:	c2 33       	cpi	r28, 0x32	; 50
     b1c:	61 f0       	breq	.+24     	; 0xb36 <ROOM1+0x278>
     b1e:	13 c0       	rjmp	.+38     	; 0xb46 <ROOM1+0x288>
							{
								case '1':
								SPI_TxRx(Led2_TurnOn);
     b20:	82 e1       	ldi	r24, 0x12	; 18
     b22:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room1 is on now!");
     b26:	85 ee       	ldi	r24, 0xE5	; 229
     b28:	95 e0       	ldi	r25, 0x05	; 5
     b2a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM1(location);
     b2e:	8d 2f       	mov	r24, r29
     b30:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
								break;
     b34:	e2 cf       	rjmp	.-60     	; 0xafa <ROOM1+0x23c>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     b36:	89 e9       	ldi	r24, 0x99	; 153
     b38:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Key = STD_Low;
								ROOM1(location);
     b3c:	8d 2f       	mov	r24, r29
     b3e:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
								break;
     b42:	db cf       	rjmp	.-74     	; 0xafa <ROOM1+0x23c>
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     b44:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     b46:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				ROOM1(location);
     b4a:	8d 2f       	mov	r24, r29
     b4c:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
				break;
     b50:	ef c0       	rjmp	.+478    	; 0xd30 <ROOM1+0x472>
				
				case '3':
				LCD_Clear();
     b52:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
     b56:	2f ef       	ldi	r18, 0xFF	; 255
     b58:	80 e7       	ldi	r24, 0x70	; 112
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	21 50       	subi	r18, 0x01	; 1
     b5e:	80 40       	sbci	r24, 0x00	; 0
     b60:	90 40       	sbci	r25, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <ROOM1+0x29e>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <ROOM1+0x2a8>
     b66:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Air_Cond);
     b68:	86 e3       	ldi	r24, 0x36	; 54
     b6a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
     b6e:	2f ef       	ldi	r18, 0xFF	; 255
     b70:	80 e7       	ldi	r24, 0x70	; 112
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	21 50       	subi	r18, 0x01	; 1
     b76:	80 40       	sbci	r24, 0x00	; 0
     b78:	90 40       	sbci	r25, 0x00	; 0
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <ROOM1+0x2b6>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <ROOM1+0x2c0>
     b7e:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
				if(Slave_Status == On)
     b86:	8f 34       	cpi	r24, 0x4F	; 79
     b88:	99 f5       	brne	.+102    	; 0xbf0 <ROOM1+0x332>
				{
					LCD_Clear();
     b8a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Air-Cond is On!");
     b8e:	8d ef       	ldi	r24, 0xFD	; 253
     b90:	95 e0       	ldi	r25, 0x05	; 5
     b92:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
     b96:	61 2f       	mov	r22, r17
     b98:	8d 2d       	mov	r24, r13
     b9a:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     b9e:	8e e6       	ldi	r24, 0x6E	; 110
     ba0:	95 e0       	ldi	r25, 0x05	; 5
     ba2:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     ba6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     baa:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     bac:	88 23       	and	r24, r24
     bae:	d9 f3       	breq	.-10     	; 0xba6 <ROOM1+0x2e8>
     bb0:	2f ef       	ldi	r18, 0xFF	; 255
     bb2:	81 ee       	ldi	r24, 0xE1	; 225
     bb4:	94 e0       	ldi	r25, 0x04	; 4
     bb6:	21 50       	subi	r18, 0x01	; 1
     bb8:	80 40       	sbci	r24, 0x00	; 0
     bba:	90 40       	sbci	r25, 0x00	; 0
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <ROOM1+0x2f8>
     bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <ROOM1+0x302>
     bc0:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     bc2:	c1 33       	cpi	r28, 0x31	; 49
     bc4:	19 f0       	breq	.+6      	; 0xbcc <ROOM1+0x30e>
     bc6:	c2 33       	cpi	r28, 0x32	; 50
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <ROOM1+0x324>
     bca:	96 c0       	rjmp	.+300    	; 0xcf8 <ROOM1+0x43a>
							{
								case '1':
								SPI_TxRx(Air_Cond_TurnOff);
     bcc:	86 e2       	ldi	r24, 0x26	; 38
     bce:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nAir conditioner,Room1 is Off now!");
     bd2:	8d e0       	ldi	r24, 0x0D	; 13
     bd4:	96 e0       	ldi	r25, 0x06	; 6
     bd6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM1(location);
     bda:	8d 2f       	mov	r24, r29
     bdc:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
     be0:	e2 cf       	rjmp	.-60     	; 0xba6 <ROOM1+0x2e8>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     be2:	89 e9       	ldi	r24, 0x99	; 153
     be4:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								ROOM1(location);
     be8:	8d 2f       	mov	r24, r29
     bea:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
     bee:	84 c0       	rjmp	.+264    	; 0xcf8 <ROOM1+0x43a>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     bf0:	86 34       	cpi	r24, 0x46	; 70
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <ROOM1+0x338>
     bf4:	80 c0       	rjmp	.+256    	; 0xcf6 <ROOM1+0x438>
				{
					LCD_Clear();
     bf6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Air-Cond is Off!");
     bfa:	80 e3       	ldi	r24, 0x30	; 48
     bfc:	96 e0       	ldi	r25, 0x06	; 6
     bfe:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
     c02:	61 2f       	mov	r22, r17
     c04:	8d 2d       	mov	r24, r13
     c06:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     c0a:	84 ea       	ldi	r24, 0xA4	; 164
     c0c:	95 e0       	ldi	r25, 0x05	; 5
     c0e:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     c12:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     c16:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     c18:	88 23       	and	r24, r24
     c1a:	d9 f3       	breq	.-10     	; 0xc12 <ROOM1+0x354>
     c1c:	2f ef       	ldi	r18, 0xFF	; 255
     c1e:	81 ee       	ldi	r24, 0xE1	; 225
     c20:	94 e0       	ldi	r25, 0x04	; 4
     c22:	21 50       	subi	r18, 0x01	; 1
     c24:	80 40       	sbci	r24, 0x00	; 0
     c26:	90 40       	sbci	r25, 0x00	; 0
     c28:	e1 f7       	brne	.-8      	; 0xc22 <ROOM1+0x364>
     c2a:	00 c0       	rjmp	.+0      	; 0xc2c <ROOM1+0x36e>
     c2c:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     c2e:	c1 33       	cpi	r28, 0x31	; 49
     c30:	21 f0       	breq	.+8      	; 0xc3a <ROOM1+0x37c>
     c32:	c2 33       	cpi	r28, 0x32	; 50
     c34:	09 f4       	brne	.+2      	; 0xc38 <ROOM1+0x37a>
     c36:	54 c0       	rjmp	.+168    	; 0xce0 <ROOM1+0x422>
     c38:	5a c0       	rjmp	.+180    	; 0xcee <ROOM1+0x430>
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
								LCD_Clear();
     c3a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
								LCD_String("Set Temp:__");
     c3e:	81 e4       	ldi	r24, 0x41	; 65
     c40:	96 e0       	ldi	r25, 0x06	; 6
     c42:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
								LCD_Custome_Char(1,customChar); //Degree symbol
     c46:	60 e6       	ldi	r22, 0x60	; 96
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	0e 94 af 0b 	call	0x175e	; 0x175e <LCD_Custome_Char>
								LCD_SetPos(1,11);
     c50:	6b e0       	ldi	r22, 0x0B	; 11
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
								LCD_Char(1);
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
								LCD_Char('C');
     c5e:	83 e4       	ldi	r24, 0x43	; 67
     c60:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
								LCD_SetPos(1,9);
     c64:	69 e0       	ldi	r22, 0x09	; 9
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
							_delay_ms(100);
							switch(Key)
							{
								case '1':
								Key = STD_Low;
								u8 Tenth = STD_Low, Ones = STD_Low, Temperature = STD_Low, Counter = 1;
     c6c:	01 e0       	ldi	r16, 0x01	; 1
     c6e:	bc 2c       	mov	r11, r12
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     c70:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     c74:	c8 2f       	mov	r28, r24
									if((Key != STD_Low) && (Counter == 1))
     c76:	88 23       	and	r24, r24
     c78:	71 f0       	breq	.+28     	; 0xc96 <ROOM1+0x3d8>
     c7a:	01 30       	cpi	r16, 0x01	; 1
     c7c:	29 f4       	brne	.+10     	; 0xc88 <ROOM1+0x3ca>
									{
										Tenth = Key;
										LCD_Char(Tenth);
     c7e:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     c82:	bc 2e       	mov	r11, r28
									if((Key != STD_Low) && (Counter == 1))
									{
										Tenth = Key;
										LCD_Char(Tenth);
										Key = STD_Low;
										Counter++;
     c84:	0a 2d       	mov	r16, r10
     c86:	f4 cf       	rjmp	.-24     	; 0xc70 <ROOM1+0x3b2>
									}
									else if((Key != STD_Low) && (Counter == 2))
     c88:	02 30       	cpi	r16, 0x02	; 2
     c8a:	49 f4       	brne	.+18     	; 0xc9e <ROOM1+0x3e0>
									{
										Ones = Key;
										LCD_Char(Ones);
     c8c:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
								{
									Key = GetKey();
     c90:	9c 2f       	mov	r25, r28
										Counter++;
									}
									else if((Key != STD_Low) && (Counter == 2))
									{
										Ones = Key;
										LCD_Char(Ones);
     c92:	cc 2d       	mov	r28, r12
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <ROOM1+0x3e2>
								LCD_Custome_Char(1,customChar); //Degree symbol
								LCD_SetPos(1,11);
								LCD_Char(1);
								LCD_Char('C');
								LCD_SetPos(1,9);
								while(Key == STD_Low && Counter <= 2)
     c96:	03 30       	cpi	r16, 0x03	; 3
     c98:	58 f3       	brcs	.-42     	; 0xc70 <ROOM1+0x3b2>
     c9a:	98 2f       	mov	r25, r24
     c9c:	01 c0       	rjmp	.+2      	; 0xca0 <ROOM1+0x3e2>
     c9e:	9c 2d       	mov	r25, r12
									else
									{
										//Do Nothing
									}
								}
								Temperature = (unsigned char)((((unsigned char)Tenth - '0') * 10) + (Ones - '0'));
     ca0:	8b 2d       	mov	r24, r11
     ca2:	88 0f       	add	r24, r24
     ca4:	80 56       	subi	r24, 0x60	; 96
     ca6:	e8 2e       	mov	r14, r24
     ca8:	ee 0c       	add	r14, r14
     caa:	ee 0c       	add	r14, r14
     cac:	e8 0e       	add	r14, r24
     cae:	90 53       	subi	r25, 0x30	; 48
     cb0:	e9 0e       	add	r14, r25
     cb2:	2f ef       	ldi	r18, 0xFF	; 255
     cb4:	81 ee       	ldi	r24, 0xE1	; 225
     cb6:	94 e0       	ldi	r25, 0x04	; 4
     cb8:	21 50       	subi	r18, 0x01	; 1
     cba:	80 40       	sbci	r24, 0x00	; 0
     cbc:	90 40       	sbci	r25, 0x00	; 0
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <ROOM1+0x3fa>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <ROOM1+0x404>
     cc2:	00 00       	nop
								_delay_ms(100);
								SPI_TxRx(Air_Cond_TurnOn);
     cc4:	86 e1       	ldi	r24, 0x16	; 22
     cc6:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nAir conditioner,Room1 is on now!");
     cca:	8d e4       	ldi	r24, 0x4D	; 77
     ccc:	96 e0       	ldi	r25, 0x06	; 6
     cce:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								SPI_TxRx(Temperature);
     cd2:	8e 2d       	mov	r24, r14
     cd4:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								ROOM1(location);
     cd8:	8d 2f       	mov	r24, r29
     cda:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
								break;
     cde:	07 c0       	rjmp	.+14     	; 0xcee <ROOM1+0x430>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     ce0:	89 e9       	ldi	r24, 0x99	; 153
     ce2:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Key = STD_Low;
								ROOM1(location);
     ce6:	8d 2f       	mov	r24, r29
     ce8:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
     cec:	92 cf       	rjmp	.-220    	; 0xc12 <ROOM1+0x354>
					LCD_Clear();
					LCD_String("Air-Cond is Off!");
					LCD_SetPos(2,0);
					LCD_String("1:TurnOn 2:back");
					
					while(Key == STD_Low)
     cee:	cc 23       	and	r28, r28
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <ROOM1+0x436>
     cf2:	8f cf       	rjmp	.-226    	; 0xc12 <ROOM1+0x354>
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <ROOM1+0x43a>
				ROOM1(location);
				break;
				
				case '3':
				LCD_Clear();
				Key = STD_Low;
     cf6:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     cf8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				ROOM1(location);
     cfc:	8d 2f       	mov	r24, r29
     cfe:	0e 94 5f 04 	call	0x8be	; 0x8be <ROOM1>
				break;
     d02:	16 c0       	rjmp	.+44     	; 0xd30 <ROOM1+0x472>
				
				case '4':
				LCD_Clear();
     d04:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				MainMenu(location);
     d08:	8d 2f       	mov	r24, r29
     d0a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <MainMenu>
     d0e:	13 c0       	rjmp	.+38     	; 0xd36 <ROOM1+0x478>
				break;
				
				default:
				LCD_Clear();
     d10:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				LCD_String("Wrong choice!");
     d14:	8f e6       	ldi	r24, 0x6F	; 111
     d16:	96 e0       	ldi	r25, 0x06	; 6
     d18:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
     d1c:	2f ef       	ldi	r18, 0xFF	; 255
     d1e:	89 e6       	ldi	r24, 0x69	; 105
     d20:	98 e1       	ldi	r25, 0x18	; 24
     d22:	21 50       	subi	r18, 0x01	; 1
     d24:	80 40       	sbci	r24, 0x00	; 0
     d26:	90 40       	sbci	r25, 0x00	; 0
     d28:	e1 f7       	brne	.-8      	; 0xd22 <ROOM1+0x464>
     d2a:	00 c0       	rjmp	.+0      	; 0xd2c <ROOM1+0x46e>
     d2c:	00 00       	nop
				_delay_ms(500);
				Key = STD_Low;
				goto Trylamp;
     d2e:	db cd       	rjmp	.-1098   	; 0x8e6 <ROOM1+0x28>
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
	LCD_String("3:AC    4:Return");
	
	while(Key == STD_Low)
     d30:	cc 23       	and	r28, r28
     d32:	09 f4       	brne	.+2      	; 0xd36 <ROOM1+0x478>
     d34:	e6 cd       	rjmp	.-1076   	; 0x902 <ROOM1+0x44>
				goto Trylamp;
				break;
			}
		}
	}
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	bf 90       	pop	r11
     d48:	af 90       	pop	r10
     d4a:	9f 90       	pop	r9
     d4c:	08 95       	ret

00000d4e <ROOM2>:

/*************************************************************
Room2 Controlling Menu
*************************************************************/
void ROOM2(u8 location)
{
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	d8 2f       	mov	r29, r24
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
     d58:	00 e0       	ldi	r16, 0x00	; 0
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     d5a:	10 2f       	mov	r17, r16
*************************************************************/
void ROOM2(u8 location)
{
	u8 Key = STD_Low;
	u8 Slave_Status = STD_Low;
	Trylamp:LCD_Clear();
     d5c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
	LCD_String("1:Lamp1 2:Lamp2");
     d60:	82 e4       	ldi	r24, 0x42	; 66
     d62:	95 e0       	ldi	r25, 0x05	; 5
     d64:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	LCD_SetPos(2,0);
     d68:	60 2f       	mov	r22, r16
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
	LCD_String("3:Lamp3 4:Return");
     d70:	8d e7       	ldi	r24, 0x7D	; 125
     d72:	96 e0       	ldi	r25, 0x06	; 6
     d74:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	
	while(Key == STD_Low)
	{
		Key = GetKey();
     d78:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
		if (Key != STD_Low)
     d7c:	88 23       	and	r24, r24
     d7e:	e1 f3       	breq	.-8      	; 0xd78 <ROOM2+0x2a>
		{
			switch(Key)
     d80:	82 33       	cpi	r24, 0x32	; 50
     d82:	09 f4       	brne	.+2      	; 0xd86 <ROOM2+0x38>
     d84:	96 c0       	rjmp	.+300    	; 0xeb2 <ROOM2+0x164>
     d86:	18 f4       	brcc	.+6      	; 0xd8e <ROOM2+0x40>
     d88:	81 33       	cpi	r24, 0x31	; 49
     d8a:	41 f0       	breq	.+16     	; 0xd9c <ROOM2+0x4e>
     d8c:	ae c1       	rjmp	.+860    	; 0x10ea <ROOM2+0x39c>
     d8e:	83 33       	cpi	r24, 0x33	; 51
     d90:	09 f4       	brne	.+2      	; 0xd94 <ROOM2+0x46>
     d92:	1a c1       	rjmp	.+564    	; 0xfc8 <ROOM2+0x27a>
     d94:	84 33       	cpi	r24, 0x34	; 52
     d96:	09 f4       	brne	.+2      	; 0xd9a <ROOM2+0x4c>
     d98:	a2 c1       	rjmp	.+836    	; 0x10de <ROOM2+0x390>
     d9a:	a7 c1       	rjmp	.+846    	; 0x10ea <ROOM2+0x39c>
			{
				case '1':
				LCD_Clear();
     d9c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
     da0:	2f ef       	ldi	r18, 0xFF	; 255
     da2:	80 e7       	ldi	r24, 0x70	; 112
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	21 50       	subi	r18, 0x01	; 1
     da8:	80 40       	sbci	r24, 0x00	; 0
     daa:	90 40       	sbci	r25, 0x00	; 0
     dac:	e1 f7       	brne	.-8      	; 0xda6 <ROOM2+0x58>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <ROOM2+0x62>
     db0:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led3);
     db2:	83 e3       	ldi	r24, 0x33	; 51
     db4:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
     db8:	2f ef       	ldi	r18, 0xFF	; 255
     dba:	80 e7       	ldi	r24, 0x70	; 112
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	21 50       	subi	r18, 0x01	; 1
     dc0:	80 40       	sbci	r24, 0x00	; 0
     dc2:	90 40       	sbci	r25, 0x00	; 0
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <ROOM2+0x70>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <ROOM2+0x7a>
     dc8:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
				if(Slave_Status == On)
     dd0:	8f 34       	cpi	r24, 0x4F	; 79
     dd2:	99 f5       	brne	.+102    	; 0xe3a <ROOM2+0xec>
				{
					LCD_Clear();
     dd4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Led is On!");
     dd8:	83 e6       	ldi	r24, 0x63	; 99
     dda:	95 e0       	ldi	r25, 0x05	; 5
     ddc:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
     de0:	61 2f       	mov	r22, r17
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     de8:	8e e6       	ldi	r24, 0x6E	; 110
     dea:	95 e0       	ldi	r25, 0x05	; 5
     dec:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     df0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     df4:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     df6:	88 23       	and	r24, r24
     df8:	d9 f3       	breq	.-10     	; 0xdf0 <ROOM2+0xa2>
     dfa:	2f ef       	ldi	r18, 0xFF	; 255
     dfc:	81 ee       	ldi	r24, 0xE1	; 225
     dfe:	94 e0       	ldi	r25, 0x04	; 4
     e00:	21 50       	subi	r18, 0x01	; 1
     e02:	80 40       	sbci	r24, 0x00	; 0
     e04:	90 40       	sbci	r25, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <ROOM2+0xb2>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <ROOM2+0xbc>
     e0a:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     e0c:	c1 33       	cpi	r28, 0x31	; 49
     e0e:	19 f0       	breq	.+6      	; 0xe16 <ROOM2+0xc8>
     e10:	c2 33       	cpi	r28, 0x32	; 50
     e12:	61 f0       	breq	.+24     	; 0xe2c <ROOM2+0xde>
     e14:	48 c0       	rjmp	.+144    	; 0xea6 <ROOM2+0x158>
							{
								case '1':
								SPI_TxRx(Led3_TurnOff);
     e16:	83 e2       	ldi	r24, 0x23	; 35
     e18:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room2 is Off now!");
     e1c:	8e e8       	ldi	r24, 0x8E	; 142
     e1e:	96 e0       	ldi	r25, 0x06	; 6
     e20:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2(location);
     e24:	8d 2f       	mov	r24, r29
     e26:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
     e2a:	e2 cf       	rjmp	.-60     	; 0xdf0 <ROOM2+0xa2>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     e2c:	89 e9       	ldi	r24, 0x99	; 153
     e2e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								ROOM2(location);
     e32:	8d 2f       	mov	r24, r29
     e34:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
     e38:	36 c0       	rjmp	.+108    	; 0xea6 <ROOM2+0x158>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     e3a:	86 34       	cpi	r24, 0x46	; 70
     e3c:	99 f5       	brne	.+102    	; 0xea4 <ROOM2+0x156>
				{
					LCD_Clear();
     e3e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Led is Off!");
     e42:	88 e9       	ldi	r24, 0x98	; 152
     e44:	95 e0       	ldi	r25, 0x05	; 5
     e46:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
     e4a:	61 2f       	mov	r22, r17
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     e52:	84 ea       	ldi	r24, 0xA4	; 164
     e54:	95 e0       	ldi	r25, 0x05	; 5
     e56:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     e5a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     e5e:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     e60:	88 23       	and	r24, r24
     e62:	d9 f3       	breq	.-10     	; 0xe5a <ROOM2+0x10c>
     e64:	2f ef       	ldi	r18, 0xFF	; 255
     e66:	81 ee       	ldi	r24, 0xE1	; 225
     e68:	94 e0       	ldi	r25, 0x04	; 4
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	80 40       	sbci	r24, 0x00	; 0
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <ROOM2+0x11c>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <ROOM2+0x126>
     e74:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     e76:	c1 33       	cpi	r28, 0x31	; 49
     e78:	19 f0       	breq	.+6      	; 0xe80 <ROOM2+0x132>
     e7a:	c2 33       	cpi	r28, 0x32	; 50
     e7c:	61 f0       	breq	.+24     	; 0xe96 <ROOM2+0x148>
     e7e:	13 c0       	rjmp	.+38     	; 0xea6 <ROOM2+0x158>
							{
								case '1':
								SPI_TxRx(Led3_TurnOn);
     e80:	83 e1       	ldi	r24, 0x13	; 19
     e82:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp1,Room2 is on now!");
     e86:	87 ea       	ldi	r24, 0xA7	; 167
     e88:	96 e0       	ldi	r25, 0x06	; 6
     e8a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2(location);
     e8e:	8d 2f       	mov	r24, r29
     e90:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
     e94:	e2 cf       	rjmp	.-60     	; 0xe5a <ROOM2+0x10c>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     e96:	89 e9       	ldi	r24, 0x99	; 153
     e98:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								ROOM2(location);
     e9c:	8d 2f       	mov	r24, r29
     e9e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <ROOM2+0x158>
		{
			switch(Key)
			{
				case '1':
				LCD_Clear();
				Key = STD_Low;
     ea4:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     ea6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				ROOM2(location);
     eaa:	8d 2f       	mov	r24, r29
     eac:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
				break;
     eb0:	2c c1       	rjmp	.+600    	; 0x110a <ROOM2+0x3bc>
				
				
				case '2':
				LCD_Clear();
     eb2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
     eb6:	2f ef       	ldi	r18, 0xFF	; 255
     eb8:	80 e7       	ldi	r24, 0x70	; 112
     eba:	92 e0       	ldi	r25, 0x02	; 2
     ebc:	21 50       	subi	r18, 0x01	; 1
     ebe:	80 40       	sbci	r24, 0x00	; 0
     ec0:	90 40       	sbci	r25, 0x00	; 0
     ec2:	e1 f7       	brne	.-8      	; 0xebc <ROOM2+0x16e>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <ROOM2+0x178>
     ec6:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led4);
     ec8:	84 e3       	ldi	r24, 0x34	; 52
     eca:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
     ece:	2f ef       	ldi	r18, 0xFF	; 255
     ed0:	80 e7       	ldi	r24, 0x70	; 112
     ed2:	92 e0       	ldi	r25, 0x02	; 2
     ed4:	21 50       	subi	r18, 0x01	; 1
     ed6:	80 40       	sbci	r24, 0x00	; 0
     ed8:	90 40       	sbci	r25, 0x00	; 0
     eda:	e1 f7       	brne	.-8      	; 0xed4 <ROOM2+0x186>
     edc:	00 c0       	rjmp	.+0      	; 0xede <ROOM2+0x190>
     ede:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
				if(Slave_Status == On)
     ee6:	8f 34       	cpi	r24, 0x4F	; 79
     ee8:	99 f5       	brne	.+102    	; 0xf50 <ROOM2+0x202>
				{
					LCD_Clear();
     eea:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Led is On!");
     eee:	83 e6       	ldi	r24, 0x63	; 99
     ef0:	95 e0       	ldi	r25, 0x05	; 5
     ef2:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
     ef6:	61 2f       	mov	r22, r17
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
     efe:	8e e6       	ldi	r24, 0x6E	; 110
     f00:	95 e0       	ldi	r25, 0x05	; 5
     f02:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     f06:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     f0a:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     f0c:	88 23       	and	r24, r24
     f0e:	d9 f3       	breq	.-10     	; 0xf06 <ROOM2+0x1b8>
     f10:	2f ef       	ldi	r18, 0xFF	; 255
     f12:	81 ee       	ldi	r24, 0xE1	; 225
     f14:	94 e0       	ldi	r25, 0x04	; 4
     f16:	21 50       	subi	r18, 0x01	; 1
     f18:	80 40       	sbci	r24, 0x00	; 0
     f1a:	90 40       	sbci	r25, 0x00	; 0
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <ROOM2+0x1c8>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <ROOM2+0x1d2>
     f20:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     f22:	c1 33       	cpi	r28, 0x31	; 49
     f24:	19 f0       	breq	.+6      	; 0xf2c <ROOM2+0x1de>
     f26:	c2 33       	cpi	r28, 0x32	; 50
     f28:	61 f0       	breq	.+24     	; 0xf42 <ROOM2+0x1f4>
     f2a:	48 c0       	rjmp	.+144    	; 0xfbc <ROOM2+0x26e>
							{
								case '1':
								SPI_TxRx(Led4_TurnOff);
     f2c:	84 e2       	ldi	r24, 0x24	; 36
     f2e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room2 is Off now!");
     f32:	8f eb       	ldi	r24, 0xBF	; 191
     f34:	96 e0       	ldi	r25, 0x06	; 6
     f36:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2(location);
     f3a:	8d 2f       	mov	r24, r29
     f3c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
     f40:	e2 cf       	rjmp	.-60     	; 0xf06 <ROOM2+0x1b8>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     f42:	89 e9       	ldi	r24, 0x99	; 153
     f44:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								ROOM2(location);
     f48:	8d 2f       	mov	r24, r29
     f4a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
     f4e:	36 c0       	rjmp	.+108    	; 0xfbc <ROOM2+0x26e>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
     f50:	86 34       	cpi	r24, 0x46	; 70
     f52:	99 f5       	brne	.+102    	; 0xfba <ROOM2+0x26c>
				{
					LCD_Clear();
     f54:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Led is Off!");
     f58:	88 e9       	ldi	r24, 0x98	; 152
     f5a:	95 e0       	ldi	r25, 0x05	; 5
     f5c:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
     f60:	61 2f       	mov	r22, r17
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
     f68:	84 ea       	ldi	r24, 0xA4	; 164
     f6a:	95 e0       	ldi	r25, 0x05	; 5
     f6c:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
     f70:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
     f74:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
     f76:	88 23       	and	r24, r24
     f78:	d9 f3       	breq	.-10     	; 0xf70 <ROOM2+0x222>
     f7a:	2f ef       	ldi	r18, 0xFF	; 255
     f7c:	81 ee       	ldi	r24, 0xE1	; 225
     f7e:	94 e0       	ldi	r25, 0x04	; 4
     f80:	21 50       	subi	r18, 0x01	; 1
     f82:	80 40       	sbci	r24, 0x00	; 0
     f84:	90 40       	sbci	r25, 0x00	; 0
     f86:	e1 f7       	brne	.-8      	; 0xf80 <ROOM2+0x232>
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <ROOM2+0x23c>
     f8a:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
     f8c:	c1 33       	cpi	r28, 0x31	; 49
     f8e:	19 f0       	breq	.+6      	; 0xf96 <ROOM2+0x248>
     f90:	c2 33       	cpi	r28, 0x32	; 50
     f92:	61 f0       	breq	.+24     	; 0xfac <ROOM2+0x25e>
     f94:	13 c0       	rjmp	.+38     	; 0xfbc <ROOM2+0x26e>
							{
								case '1':
								SPI_TxRx(Led4_TurnOn);
     f96:	84 e1       	ldi	r24, 0x14	; 20
     f98:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp2,Room2 is on now!");
     f9c:	88 ed       	ldi	r24, 0xD8	; 216
     f9e:	96 e0       	ldi	r25, 0x06	; 6
     fa0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2(location);
     fa4:	8d 2f       	mov	r24, r29
     fa6:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
								break;
     faa:	e2 cf       	rjmp	.-60     	; 0xf70 <ROOM2+0x222>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
     fac:	89 e9       	ldi	r24, 0x99	; 153
     fae:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Key = STD_Low;
								ROOM2(location);
     fb2:	8d 2f       	mov	r24, r29
     fb4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
								break;
     fb8:	db cf       	rjmp	.-74     	; 0xf70 <ROOM2+0x222>
				break;
				
				
				case '2':
				LCD_Clear();
				Key = STD_Low;
     fba:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
     fbc:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				ROOM2(location);
     fc0:	8d 2f       	mov	r24, r29
     fc2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
				break;
     fc6:	a1 c0       	rjmp	.+322    	; 0x110a <ROOM2+0x3bc>
				
				case '3':
				LCD_Clear();
     fc8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
     fcc:	2f ef       	ldi	r18, 0xFF	; 255
     fce:	80 e7       	ldi	r24, 0x70	; 112
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	21 50       	subi	r18, 0x01	; 1
     fd4:	80 40       	sbci	r24, 0x00	; 0
     fd6:	90 40       	sbci	r25, 0x00	; 0
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <ROOM2+0x284>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <ROOM2+0x28e>
     fdc:	00 00       	nop
				Key = STD_Low;
				_delay_ms(50);
				SPI_TxRx(Led5);
     fde:	85 e3       	ldi	r24, 0x35	; 53
     fe0:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
     fe4:	2f ef       	ldi	r18, 0xFF	; 255
     fe6:	80 e7       	ldi	r24, 0x70	; 112
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	21 50       	subi	r18, 0x01	; 1
     fec:	80 40       	sbci	r24, 0x00	; 0
     fee:	90 40       	sbci	r25, 0x00	; 0
     ff0:	e1 f7       	brne	.-8      	; 0xfea <ROOM2+0x29c>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <ROOM2+0x2a6>
     ff4:	00 00       	nop
				_delay_ms(50);
				Slave_Status = SPI_TxRx(Ack);
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
				if(Slave_Status == On)
     ffc:	8f 34       	cpi	r24, 0x4F	; 79
     ffe:	99 f5       	brne	.+102    	; 0x1066 <ROOM2+0x318>
				{
					LCD_Clear();
    1000:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Led is On!");
    1004:	83 e6       	ldi	r24, 0x63	; 99
    1006:	95 e0       	ldi	r25, 0x05	; 5
    1008:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
    100c:	61 2f       	mov	r22, r17
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:Turnoff 2:back");
    1014:	8e e6       	ldi	r24, 0x6E	; 110
    1016:	95 e0       	ldi	r25, 0x05	; 5
    1018:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
    101c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
    1020:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
    1022:	88 23       	and	r24, r24
    1024:	d9 f3       	breq	.-10     	; 0x101c <ROOM2+0x2ce>
    1026:	2f ef       	ldi	r18, 0xFF	; 255
    1028:	81 ee       	ldi	r24, 0xE1	; 225
    102a:	94 e0       	ldi	r25, 0x04	; 4
    102c:	21 50       	subi	r18, 0x01	; 1
    102e:	80 40       	sbci	r24, 0x00	; 0
    1030:	90 40       	sbci	r25, 0x00	; 0
    1032:	e1 f7       	brne	.-8      	; 0x102c <ROOM2+0x2de>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <ROOM2+0x2e8>
    1036:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
    1038:	c1 33       	cpi	r28, 0x31	; 49
    103a:	19 f0       	breq	.+6      	; 0x1042 <ROOM2+0x2f4>
    103c:	c2 33       	cpi	r28, 0x32	; 50
    103e:	61 f0       	breq	.+24     	; 0x1058 <ROOM2+0x30a>
    1040:	48 c0       	rjmp	.+144    	; 0x10d2 <ROOM2+0x384>
							{
								case '1':
								SPI_TxRx(Led5_TurnOff);
    1042:	85 e2       	ldi	r24, 0x25	; 37
    1044:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp3,Room2 is Off now!");
    1048:	80 ef       	ldi	r24, 0xF0	; 240
    104a:	96 e0       	ldi	r25, 0x06	; 6
    104c:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2(location);
    1050:	8d 2f       	mov	r24, r29
    1052:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
    1056:	e2 cf       	rjmp	.-60     	; 0x101c <ROOM2+0x2ce>
								break;
								
								case '2':
								SPI_TxRx(Return_MainMenu);
    1058:	89 e9       	ldi	r24, 0x99	; 153
    105a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								ROOM2(location);
    105e:	8d 2f       	mov	r24, r29
    1060:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
    1064:	36 c0       	rjmp	.+108    	; 0x10d2 <ROOM2+0x384>
								break;
							}
						}
					}
				}
				else if (Slave_Status == Off)
    1066:	86 34       	cpi	r24, 0x46	; 70
    1068:	99 f5       	brne	.+102    	; 0x10d0 <ROOM2+0x382>
				{
					LCD_Clear();
    106a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
					LCD_String("Led is Off!");
    106e:	88 e9       	ldi	r24, 0x98	; 152
    1070:	95 e0       	ldi	r25, 0x05	; 5
    1072:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					LCD_SetPos(2,0);
    1076:	61 2f       	mov	r22, r17
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
					LCD_String("1:TurnOn 2:back");
    107e:	84 ea       	ldi	r24, 0xA4	; 164
    1080:	95 e0       	ldi	r25, 0x05	; 5
    1082:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
					
					while(Key == STD_Low)
					{
						Key = GetKey();
    1086:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
    108a:	c8 2f       	mov	r28, r24
						if(Key != STD_Low)
    108c:	88 23       	and	r24, r24
    108e:	d9 f3       	breq	.-10     	; 0x1086 <ROOM2+0x338>
    1090:	2f ef       	ldi	r18, 0xFF	; 255
    1092:	81 ee       	ldi	r24, 0xE1	; 225
    1094:	94 e0       	ldi	r25, 0x04	; 4
    1096:	21 50       	subi	r18, 0x01	; 1
    1098:	80 40       	sbci	r24, 0x00	; 0
    109a:	90 40       	sbci	r25, 0x00	; 0
    109c:	e1 f7       	brne	.-8      	; 0x1096 <ROOM2+0x348>
    109e:	00 c0       	rjmp	.+0      	; 0x10a0 <ROOM2+0x352>
    10a0:	00 00       	nop
						{
							_delay_ms(100);
							switch(Key)
    10a2:	c1 33       	cpi	r28, 0x31	; 49
    10a4:	19 f0       	breq	.+6      	; 0x10ac <ROOM2+0x35e>
    10a6:	c2 33       	cpi	r28, 0x32	; 50
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <ROOM2+0x374>
    10aa:	13 c0       	rjmp	.+38     	; 0x10d2 <ROOM2+0x384>
							{
								case '1':
								SPI_TxRx(Led5_TurnOn);
    10ac:	85 e1       	ldi	r24, 0x15	; 21
    10ae:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Bluetooth_TransmaitString("\nLamp3,Room2 is on now!");
    10b2:	89 e0       	ldi	r24, 0x09	; 9
    10b4:	97 e0       	ldi	r25, 0x07	; 7
    10b6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
								Key = STD_Low;
								ROOM2(location);
    10ba:	8d 2f       	mov	r24, r29
    10bc:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
								break;
    10c0:	e2 cf       	rjmp	.-60     	; 0x1086 <ROOM2+0x338>
								
								case '2':
								SPI_TxRx(Return_MainMenu);
    10c2:	89 e9       	ldi	r24, 0x99	; 153
    10c4:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <SPI_TxRx>
								Key = STD_Low;
								ROOM2(location);
    10c8:	8d 2f       	mov	r24, r29
    10ca:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
								break;
    10ce:	db cf       	rjmp	.-74     	; 0x1086 <ROOM2+0x338>
				ROOM2(location);
				break;
				
				case '3':
				LCD_Clear();
				Key = STD_Low;
    10d0:	c1 2f       	mov	r28, r17
				}
				else
				{
					//Do nothing
				}
				LCD_Clear();
    10d2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				ROOM2(location);
    10d6:	8d 2f       	mov	r24, r29
    10d8:	0e 94 a7 06 	call	0xd4e	; 0xd4e <ROOM2>
				break;
    10dc:	16 c0       	rjmp	.+44     	; 0x110a <ROOM2+0x3bc>
				
				case '4':
				LCD_Clear();
    10de:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				MainMenu(location);
    10e2:	8d 2f       	mov	r24, r29
    10e4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <MainMenu>
    10e8:	13 c0       	rjmp	.+38     	; 0x1110 <ROOM2+0x3c2>
				break;
				
				default:
				LCD_Clear();
    10ea:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
				LCD_String("Wrong choice!");
    10ee:	8f e6       	ldi	r24, 0x6F	; 111
    10f0:	96 e0       	ldi	r25, 0x06	; 6
    10f2:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
    10f6:	2f ef       	ldi	r18, 0xFF	; 255
    10f8:	89 e6       	ldi	r24, 0x69	; 105
    10fa:	98 e1       	ldi	r25, 0x18	; 24
    10fc:	21 50       	subi	r18, 0x01	; 1
    10fe:	80 40       	sbci	r24, 0x00	; 0
    1100:	90 40       	sbci	r25, 0x00	; 0
    1102:	e1 f7       	brne	.-8      	; 0x10fc <ROOM2+0x3ae>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <ROOM2+0x3b8>
    1106:	00 00       	nop
				_delay_ms(500);
				Key = STD_Low;
				goto Trylamp;
    1108:	29 ce       	rjmp	.-942    	; 0xd5c <ROOM2+0xe>
	Trylamp:LCD_Clear();
	LCD_String("1:Lamp1 2:Lamp2");
	LCD_SetPos(2,0);
	LCD_String("3:Lamp3 4:Return");
	
	while(Key == STD_Low)
    110a:	cc 23       	and	r28, r28
    110c:	09 f4       	brne	.+2      	; 0x1110 <ROOM2+0x3c2>
    110e:	34 ce       	rjmp	.-920    	; 0xd78 <ROOM2+0x2a>
				goto Trylamp;
				break;
			}
		}
	}
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <Menu1>:

/*************************************************************
Registration Menu Function
*************************************************************/
void Menu1(u8 location)
{
    111a:	7f 92       	push	r7
    111c:	8f 92       	push	r8
    111e:	9f 92       	push	r9
    1120:	af 92       	push	r10
    1122:	bf 92       	push	r11
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	28 97       	sbiw	r28, 0x08	; 8
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	78 2e       	mov	r7, r24
	LCD_Clear();
    1146:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
    114a:	2f ef       	ldi	r18, 0xFF	; 255
    114c:	86 e7       	ldi	r24, 0x76	; 118
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	21 50       	subi	r18, 0x01	; 1
    1152:	80 40       	sbci	r24, 0x00	; 0
    1154:	90 40       	sbci	r25, 0x00	; 0
    1156:	e1 f7       	brne	.-8      	; 0x1150 <Menu1+0x36>
    1158:	00 c0       	rjmp	.+0      	; 0x115a <Menu1+0x40>
    115a:	00 00       	nop
	_delay_ms(30);
	LCD_SetPos(1,2);
    115c:	62 e0       	ldi	r22, 0x02	; 2
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
	LCD_String("Smart - Home");
    1164:	81 e2       	ldi	r24, 0x21	; 33
    1166:	97 e0       	ldi	r25, 0x07	; 7
    1168:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
	LCD_SetPos(2,4);
    116c:	64 e0       	ldi	r22, 0x04	; 4
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
	LCD_String("Project!");
    1174:	8e e2       	ldi	r24, 0x2E	; 46
    1176:	97 e0       	ldi	r25, 0x07	; 7
    1178:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
    117c:	af ef       	ldi	r26, 0xFF	; 255
    117e:	b7 e8       	ldi	r27, 0x87	; 135
    1180:	e3 e1       	ldi	r30, 0x13	; 19
    1182:	a1 50       	subi	r26, 0x01	; 1
    1184:	b0 40       	sbci	r27, 0x00	; 0
    1186:	e0 40       	sbci	r30, 0x00	; 0
    1188:	e1 f7       	brne	.-8      	; 0x1182 <Menu1+0x68>
    118a:	00 c0       	rjmp	.+0      	; 0x118c <Menu1+0x72>
    118c:	00 00       	nop
	_delay_ms(400);
	LCD_Clear();
    118e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
	
	if(Password_Exist(location) == 0)
    1192:	87 2d       	mov	r24, r7
    1194:	0e 94 7e 00 	call	0xfc	; 0xfc <Password_Exist>
    1198:	81 11       	cpse	r24, r1
    119a:	ef c0       	rjmp	.+478    	; 0x137a <Menu1+0x260>
	{
		s8 Password_User[PASSWORD_LENGTH] = {STD_Low};
    119c:	1d 82       	std	Y+5, r1	; 0x05
    119e:	1e 82       	std	Y+6, r1	; 0x06
    11a0:	1f 82       	std	Y+7, r1	; 0x07
    11a2:	18 86       	std	Y+8, r1	; 0x08
		s8 Password_Confirm[PASSWORD_LENGTH] = {STD_Low};
    11a4:	19 82       	std	Y+1, r1	; 0x01
    11a6:	1a 82       	std	Y+2, r1	; 0x02
    11a8:	1b 82       	std	Y+3, r1	; 0x03
    11aa:	1c 82       	std	Y+4, r1	; 0x04
		
		LCD_String("Login first time");
    11ac:	87 e3       	ldi	r24, 0x37	; 55
    11ae:	97 e0       	ldi	r25, 0x07	; 7
    11b0:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
    11b4:	ff ef       	ldi	r31, 0xFF	; 255
    11b6:	27 e8       	ldi	r18, 0x87	; 135
    11b8:	83 e1       	ldi	r24, 0x13	; 19
    11ba:	f1 50       	subi	r31, 0x01	; 1
    11bc:	20 40       	sbci	r18, 0x00	; 0
    11be:	80 40       	sbci	r24, 0x00	; 0
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <Menu1+0xa0>
    11c2:	00 c0       	rjmp	.+0      	; 0x11c4 <Menu1+0xaa>
    11c4:	00 00       	nop
		_delay_ms(400);
		LCD_Clear();
    11c6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
    11ca:	6e 01       	movw	r12, r28
    11cc:	99 e0       	ldi	r25, 0x09	; 9
    11ce:	c9 0e       	add	r12, r25
    11d0:	d1 1c       	adc	r13, r1
		
		RetryPassword:LCD_String("SetPassword:");
    11d2:	88 e4       	ldi	r24, 0x48	; 72
    11d4:	97 e0       	ldi	r25, 0x07	; 7
    11d6:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
		if(location == USER_PASS_LOC)
    11da:	a0 ea       	ldi	r26, 0xA0	; 160
    11dc:	7a 12       	cpse	r7, r26
    11de:	13 c0       	rjmp	.+38     	; 0x1206 <Menu1+0xec>
		{
			LCD_SetPos(2,0);
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
			LCD_String("*****USER1*****");
    11e8:	81 eb       	ldi	r24, 0xB1	; 177
    11ea:	94 e0       	ldi	r25, 0x04	; 4
    11ec:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
			LCD_SetPos(1,12);
    11f0:	6c e0       	ldi	r22, 0x0C	; 12
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
    11f8:	5e 01       	movw	r10, r28
    11fa:	b5 e0       	ldi	r27, 0x05	; 5
    11fc:	ab 0e       	add	r10, r27
    11fe:	b1 1c       	adc	r11, r1

/*************************************************************
Registration Menu Function
*************************************************************/
void Menu1(u8 location)
{
    1200:	75 01       	movw	r14, r10
    1202:	00 e0       	ldi	r16, 0x00	; 0
    1204:	10 c0       	rjmp	.+32     	; 0x1226 <Menu1+0x10c>
		{
			LCD_SetPos(2,0);
			LCD_String("*****USER1*****");
			LCD_SetPos(1,12);
		}
		else if (location == USER2_PASS_LOC)
    1206:	e8 ea       	ldi	r30, 0xA8	; 168
    1208:	7e 12       	cpse	r7, r30
    120a:	f6 cf       	rjmp	.-20     	; 0x11f8 <Menu1+0xde>
		{
			LCD_SetPos(2,0);
    120c:	60 e0       	ldi	r22, 0x00	; 0
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
			LCD_String("*****USER2*****");	
    1214:	81 ec       	ldi	r24, 0xC1	; 193
    1216:	94 e0       	ldi	r25, 0x04	; 4
    1218:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
			LCD_SetPos(1,12);		
    121c:	6c e0       	ldi	r22, 0x0C	; 12
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
    1224:	e9 cf       	rjmp	.-46     	; 0x11f8 <Menu1+0xde>
		}
		u8 Password_Counter = 0;
		while(Password_Counter<PASSWORD_LENGTH)
		{
			u8 keypad = STD_Low;
			keypad = GetKey();
    1226:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
    122a:	18 2f       	mov	r17, r24
			if(keypad != STD_Low)
    122c:	88 23       	and	r24, r24
    122e:	d1 f0       	breq	.+52     	; 0x1264 <Menu1+0x14a>
			{
				LCD_Char(keypad);
    1230:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
    1234:	ff ef       	ldi	r31, 0xFF	; 255
    1236:	20 e7       	ldi	r18, 0x70	; 112
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	f1 50       	subi	r31, 0x01	; 1
    123c:	20 40       	sbci	r18, 0x00	; 0
    123e:	80 40       	sbci	r24, 0x00	; 0
    1240:	e1 f7       	brne	.-8      	; 0x123a <Menu1+0x120>
    1242:	00 c0       	rjmp	.+0      	; 0x1244 <Menu1+0x12a>
    1244:	00 00       	nop
				_delay_ms(50);
				LCD_SetPos(1,12+Password_Counter);
    1246:	6c e0       	ldi	r22, 0x0C	; 12
    1248:	60 0f       	add	r22, r16
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
				LCD_Char('*');
    1250:	8a e2       	ldi	r24, 0x2A	; 42
    1252:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
				Password_User[Password_Counter] = keypad;
    1256:	d7 01       	movw	r26, r14
    1258:	1d 93       	st	X+, r17
    125a:	7d 01       	movw	r14, r26
				Password_Counter++;
    125c:	0f 5f       	subi	r16, 0xFF	; 255
			LCD_SetPos(2,0);
			LCD_String("*****USER2*****");	
			LCD_SetPos(1,12);		
		}
		u8 Password_Counter = 0;
		while(Password_Counter<PASSWORD_LENGTH)
    125e:	04 30       	cpi	r16, 0x04	; 4
    1260:	19 f0       	breq	.+6      	; 0x1268 <Menu1+0x14e>
    1262:	e1 cf       	rjmp	.-62     	; 0x1226 <Menu1+0x10c>
    1264:	04 30       	cpi	r16, 0x04	; 4
    1266:	f8 f2       	brcs	.-66     	; 0x1226 <Menu1+0x10c>
				Password_User[Password_Counter] = keypad;
				Password_Counter++;
			}
		}
		
		LCD_Clear();
    1268:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
		LCD_String("Confirm:");
    126c:	85 e5       	ldi	r24, 0x55	; 85
    126e:	97 e0       	ldi	r25, 0x07	; 7
    1270:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
    1274:	8e 01       	movw	r16, r28
    1276:	0f 5f       	subi	r16, 0xFF	; 255
    1278:	1f 4f       	sbci	r17, 0xFF	; 255
    127a:	48 01       	movw	r8, r16
		Password_Counter = 0;
    127c:	e1 2c       	mov	r14, r1
		while(Password_Counter<PASSWORD_LENGTH)
		{
			u8 keypad = STD_Low;
			keypad = GetKey();
    127e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <GetKey>
    1282:	f8 2e       	mov	r15, r24
			if(keypad != STD_Low)
    1284:	88 23       	and	r24, r24
    1286:	d9 f0       	breq	.+54     	; 0x12be <Menu1+0x1a4>
			{
				LCD_Char(keypad);
    1288:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
    128c:	bf ef       	ldi	r27, 0xFF	; 255
    128e:	e0 e7       	ldi	r30, 0x70	; 112
    1290:	f2 e0       	ldi	r31, 0x02	; 2
    1292:	b1 50       	subi	r27, 0x01	; 1
    1294:	e0 40       	sbci	r30, 0x00	; 0
    1296:	f0 40       	sbci	r31, 0x00	; 0
    1298:	e1 f7       	brne	.-8      	; 0x1292 <Menu1+0x178>
    129a:	00 c0       	rjmp	.+0      	; 0x129c <Menu1+0x182>
    129c:	00 00       	nop
				_delay_ms(50);
				LCD_SetPos(1,8+Password_Counter);
    129e:	68 e0       	ldi	r22, 0x08	; 8
    12a0:	6e 0d       	add	r22, r14
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
				LCD_Char('*');
    12a8:	8a e2       	ldi	r24, 0x2A	; 42
    12aa:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
				Password_Confirm[Password_Counter] = keypad;
    12ae:	d4 01       	movw	r26, r8
    12b0:	fd 92       	st	X+, r15
    12b2:	4d 01       	movw	r8, r26
				Password_Counter++;
    12b4:	e3 94       	inc	r14
		}
		
		LCD_Clear();
		LCD_String("Confirm:");
		Password_Counter = 0;
		while(Password_Counter<PASSWORD_LENGTH)
    12b6:	b4 e0       	ldi	r27, 0x04	; 4
    12b8:	eb 16       	cp	r14, r27
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <Menu1+0x1aa>
    12bc:	e0 cf       	rjmp	.-64     	; 0x127e <Menu1+0x164>
    12be:	e3 e0       	ldi	r30, 0x03	; 3
    12c0:	ee 15       	cp	r30, r14
    12c2:	e8 f6       	brcc	.-70     	; 0x127e <Menu1+0x164>
				Password_Counter++;
			}
		}
		
		Password_Counter = 0;
		LCD_Clear();
    12c4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
    12c8:	f5 01       	movw	r30, r10
				Password_Confirm[Password_Counter] = keypad;
				Password_Counter++;
			}
		}
		
		Password_Counter = 0;
    12ca:	20 e0       	ldi	r18, 0x00	; 0
		LCD_Clear();
		for(u8 i = 0; i < PASSWORD_LENGTH; i++)
		{
			if(Password_User[i] == Password_Confirm[i])
    12cc:	91 91       	ld	r25, Z+
    12ce:	d8 01       	movw	r26, r16
    12d0:	8d 91       	ld	r24, X+
    12d2:	8d 01       	movw	r16, r26
    12d4:	98 13       	cpse	r25, r24
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <Menu1+0x1c0>
			{
				Password_Counter++;
    12d8:	2f 5f       	subi	r18, 0xFF	; 255
			}
		}
		
		Password_Counter = 0;
		LCD_Clear();
		for(u8 i = 0; i < PASSWORD_LENGTH; i++)
    12da:	ce 16       	cp	r12, r30
    12dc:	df 06       	cpc	r13, r31
    12de:	b1 f7       	brne	.-20     	; 0x12cc <Menu1+0x1b2>
			{
				Password_Counter++;
			}
		}
		
		if(Password_Counter == 4)
    12e0:	24 30       	cpi	r18, 0x04	; 4
    12e2:	51 f5       	brne	.+84     	; 0x1338 <Menu1+0x21e>
    12e4:	10 e0       	ldi	r17, 0x00	; 0
		{
			for(u8 i = 0; i < PASSWORD_LENGTH; i++)
			{
				EEPROM_WriteByte(location,i,Password_User[i]);
    12e6:	f5 01       	movw	r30, r10
    12e8:	41 91       	ld	r20, Z+
    12ea:	5f 01       	movw	r10, r30
    12ec:	61 2f       	mov	r22, r17
    12ee:	87 2d       	mov	r24, r7
    12f0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <EEPROM_WriteByte>
    12f4:	ff ef       	ldi	r31, 0xFF	; 255
    12f6:	23 ec       	ldi	r18, 0xC3	; 195
    12f8:	89 e0       	ldi	r24, 0x09	; 9
    12fa:	f1 50       	subi	r31, 0x01	; 1
    12fc:	20 40       	sbci	r18, 0x00	; 0
    12fe:	80 40       	sbci	r24, 0x00	; 0
    1300:	e1 f7       	brne	.-8      	; 0x12fa <Menu1+0x1e0>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <Menu1+0x1ea>
    1304:	00 00       	nop
			}
		}
		
		if(Password_Counter == 4)
		{
			for(u8 i = 0; i < PASSWORD_LENGTH; i++)
    1306:	1f 5f       	subi	r17, 0xFF	; 255
    1308:	14 30       	cpi	r17, 0x04	; 4
    130a:	69 f7       	brne	.-38     	; 0x12e6 <Menu1+0x1cc>
			{
				EEPROM_WriteByte(location,i,Password_User[i]);
				_delay_ms(200);
			}
			LCD_String("Password Saved!");
    130c:	8e e5       	ldi	r24, 0x5E	; 94
    130e:	97 e0       	ldi	r25, 0x07	; 7
    1310:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
    1314:	9f ef       	ldi	r25, 0xFF	; 255
    1316:	a7 e8       	ldi	r26, 0x87	; 135
    1318:	b3 e1       	ldi	r27, 0x13	; 19
    131a:	91 50       	subi	r25, 0x01	; 1
    131c:	a0 40       	sbci	r26, 0x00	; 0
    131e:	b0 40       	sbci	r27, 0x00	; 0
    1320:	e1 f7       	brne	.-8      	; 0x131a <Menu1+0x200>
    1322:	00 c0       	rjmp	.+0      	; 0x1324 <Menu1+0x20a>
    1324:	00 00       	nop
			_delay_ms(400);
			LCD_Clear();
    1326:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
			Bluetooth_TransmaitString("\nUser Registered successfully!");
    132a:	8e e6       	ldi	r24, 0x6E	; 110
    132c:	97 e0       	ldi	r25, 0x07	; 7
    132e:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <Bluetooth_TransmaitString>
			AdminMenu();
    1332:	0e 94 44 01 	call	0x288	; 0x288 <AdminMenu>
    1336:	39 c0       	rjmp	.+114    	; 0x13aa <Menu1+0x290>
		}
		else
		{
			LCD_String("Pass mismatch!");
    1338:	8d e8       	ldi	r24, 0x8D	; 141
    133a:	97 e0       	ldi	r25, 0x07	; 7
    133c:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
    1340:	ef ef       	ldi	r30, 0xFF	; 255
    1342:	f3 ec       	ldi	r31, 0xC3	; 195
    1344:	29 e0       	ldi	r18, 0x09	; 9
    1346:	e1 50       	subi	r30, 0x01	; 1
    1348:	f0 40       	sbci	r31, 0x00	; 0
    134a:	20 40       	sbci	r18, 0x00	; 0
    134c:	e1 f7       	brne	.-8      	; 0x1346 <Menu1+0x22c>
    134e:	00 c0       	rjmp	.+0      	; 0x1350 <Menu1+0x236>
    1350:	00 00       	nop
			_delay_ms(200);
			LCD_SetPos(2,0);
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
			LCD_String("Try again!");
    135a:	8c e9       	ldi	r24, 0x9C	; 156
    135c:	97 e0       	ldi	r25, 0x07	; 7
    135e:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
    1362:	8f ef       	ldi	r24, 0xFF	; 255
    1364:	93 ec       	ldi	r25, 0xC3	; 195
    1366:	a9 e0       	ldi	r26, 0x09	; 9
    1368:	81 50       	subi	r24, 0x01	; 1
    136a:	90 40       	sbci	r25, 0x00	; 0
    136c:	a0 40       	sbci	r26, 0x00	; 0
    136e:	e1 f7       	brne	.-8      	; 0x1368 <Menu1+0x24e>
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <Menu1+0x258>
    1372:	00 00       	nop
			_delay_ms(200);
			LCD_Clear();
    1374:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
			goto RetryPassword;
    1378:	2c cf       	rjmp	.-424    	; 0x11d2 <Menu1+0xb8>
	}
	else
	{
		//Already have an account
		//Greetings
		LCD_Clear();
    137a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
		LCD_SetPos(1,2);
    137e:	62 e0       	ldi	r22, 0x02	; 2
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	0e 94 9e 0b 	call	0x173c	; 0x173c <LCD_SetPos>
		LCD_String("Welcome Home");
    1386:	87 ea       	ldi	r24, 0xA7	; 167
    1388:	97 e0       	ldi	r25, 0x07	; 7
    138a:	0e 94 88 0b 	call	0x1710	; 0x1710 <LCD_String>
    138e:	bf ef       	ldi	r27, 0xFF	; 255
    1390:	e7 e8       	ldi	r30, 0x87	; 135
    1392:	f3 e1       	ldi	r31, 0x13	; 19
    1394:	b1 50       	subi	r27, 0x01	; 1
    1396:	e0 40       	sbci	r30, 0x00	; 0
    1398:	f0 40       	sbci	r31, 0x00	; 0
    139a:	e1 f7       	brne	.-8      	; 0x1394 <Menu1+0x27a>
    139c:	00 c0       	rjmp	.+0      	; 0x139e <Menu1+0x284>
    139e:	00 00       	nop
		_delay_ms(400);
		LCD_Clear();
    13a0:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Clear>
		Menu2(location);
    13a4:	87 2d       	mov	r24, r7
    13a6:	0e 94 4b 03 	call	0x696	; 0x696 <Menu2>
	}
}
    13aa:	28 96       	adiw	r28, 0x08	; 8
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	ff 90       	pop	r15
    13c0:	ef 90       	pop	r14
    13c2:	df 90       	pop	r13
    13c4:	cf 90       	pop	r12
    13c6:	bf 90       	pop	r11
    13c8:	af 90       	pop	r10
    13ca:	9f 90       	pop	r9
    13cc:	8f 90       	pop	r8
    13ce:	7f 90       	pop	r7
    13d0:	08 95       	ret

000013d2 <Bluetooth_Init>:
    13d2:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <UART_Init>
    13d6:	08 95       	ret

000013d8 <Bluetooth_TransmaitString>:
    13d8:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <UART_TransmaitString>
    13dc:	08 95       	ret

000013de <Bluetooth_Receive>:
    13de:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <UART_Receive>
    13e2:	08 95       	ret

000013e4 <EEPROM_WriteByte>:
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	c8 2f       	mov	r28, r24
    13ec:	d6 2f       	mov	r29, r22
    13ee:	14 2f       	mov	r17, r20
    13f0:	0e 94 17 10 	call	0x202e	; 0x202e <TWI_Start>
    13f4:	88 30       	cpi	r24, 0x08	; 8
    13f6:	91 f4       	brne	.+36     	; 0x141c <EEPROM_WriteByte+0x38>
    13f8:	8c 2f       	mov	r24, r28
    13fa:	8e 7f       	andi	r24, 0xFE	; 254
    13fc:	0e 94 2c 10 	call	0x2058	; 0x2058 <TWI_Send>
    1400:	88 31       	cpi	r24, 0x18	; 24
    1402:	61 f4       	brne	.+24     	; 0x141c <EEPROM_WriteByte+0x38>
    1404:	8d 2f       	mov	r24, r29
    1406:	0e 94 2c 10 	call	0x2058	; 0x2058 <TWI_Send>
    140a:	88 32       	cpi	r24, 0x28	; 40
    140c:	39 f4       	brne	.+14     	; 0x141c <EEPROM_WriteByte+0x38>
    140e:	81 2f       	mov	r24, r17
    1410:	0e 94 2c 10 	call	0x2058	; 0x2058 <TWI_Send>
    1414:	88 32       	cpi	r24, 0x28	; 40
    1416:	11 f4       	brne	.+4      	; 0x141c <EEPROM_WriteByte+0x38>
    1418:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_Stop>
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	08 95       	ret

00001424 <EEPROM_ReadByte>:
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	1f 92       	push	r1
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	18 2f       	mov	r17, r24
    1434:	06 2f       	mov	r16, r22
    1436:	19 82       	std	Y+1, r1	; 0x01
    1438:	0e 94 17 10 	call	0x202e	; 0x202e <TWI_Start>
    143c:	88 30       	cpi	r24, 0x08	; 8
    143e:	e9 f4       	brne	.+58     	; 0x147a <EEPROM_ReadByte+0x56>
    1440:	81 2f       	mov	r24, r17
    1442:	8e 7f       	andi	r24, 0xFE	; 254
    1444:	0e 94 2c 10 	call	0x2058	; 0x2058 <TWI_Send>
    1448:	88 31       	cpi	r24, 0x18	; 24
    144a:	b9 f4       	brne	.+46     	; 0x147a <EEPROM_ReadByte+0x56>
    144c:	80 2f       	mov	r24, r16
    144e:	0e 94 2c 10 	call	0x2058	; 0x2058 <TWI_Send>
    1452:	88 32       	cpi	r24, 0x28	; 40
    1454:	91 f4       	brne	.+36     	; 0x147a <EEPROM_ReadByte+0x56>
    1456:	0e 94 17 10 	call	0x202e	; 0x202e <TWI_Start>
    145a:	80 31       	cpi	r24, 0x10	; 16
    145c:	71 f4       	brne	.+28     	; 0x147a <EEPROM_ReadByte+0x56>
    145e:	81 2f       	mov	r24, r17
    1460:	81 60       	ori	r24, 0x01	; 1
    1462:	0e 94 2c 10 	call	0x2058	; 0x2058 <TWI_Send>
    1466:	80 34       	cpi	r24, 0x40	; 64
    1468:	41 f4       	brne	.+16     	; 0x147a <EEPROM_ReadByte+0x56>
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	0e 94 42 10 	call	0x2084	; 0x2084 <TWI_Read_NAck>
    1472:	88 35       	cpi	r24, 0x58	; 88
    1474:	11 f4       	brne	.+4      	; 0x147a <EEPROM_ReadByte+0x56>
    1476:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <TWI_Stop>
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	0f 90       	pop	r0
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	08 95       	ret

00001488 <Keypad_Init>:
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	c8 e7       	ldi	r28, 0x78	; 120
    1496:	d0 e0       	ldi	r29, 0x00	; 0
    1498:	0f 2e       	mov	r0, r31
    149a:	fc e7       	ldi	r31, 0x7C	; 124
    149c:	ef 2e       	mov	r14, r31
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	ff 2e       	mov	r15, r31
    14a2:	f0 2d       	mov	r31, r0
    14a4:	8e 01       	movw	r16, r28
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	89 91       	ld	r24, Y+
    14aa:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    14ae:	61 e0       	ldi	r22, 0x01	; 1
    14b0:	f8 01       	movw	r30, r16
    14b2:	80 81       	ld	r24, Z
    14b4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
    14b8:	ce 15       	cp	r28, r14
    14ba:	df 05       	cpc	r29, r15
    14bc:	99 f7       	brne	.-26     	; 0x14a4 <Keypad_Init+0x1c>
    14be:	cc e7       	ldi	r28, 0x7C	; 124
    14c0:	d0 e0       	ldi	r29, 0x00	; 0
    14c2:	0f 2e       	mov	r0, r31
    14c4:	f0 e8       	ldi	r31, 0x80	; 128
    14c6:	ef 2e       	mov	r14, r31
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	ff 2e       	mov	r15, r31
    14cc:	f0 2d       	mov	r31, r0
    14ce:	8e 01       	movw	r16, r28
    14d0:	61 e0       	ldi	r22, 0x01	; 1
    14d2:	89 91       	ld	r24, Y+
    14d4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    14d8:	61 e0       	ldi	r22, 0x01	; 1
    14da:	f8 01       	movw	r30, r16
    14dc:	80 81       	ld	r24, Z
    14de:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
    14e2:	ce 15       	cp	r28, r14
    14e4:	df 05       	cpc	r29, r15
    14e6:	99 f7       	brne	.-26     	; 0x14ce <Keypad_Init+0x46>
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	1f 91       	pop	r17
    14ee:	0f 91       	pop	r16
    14f0:	ff 90       	pop	r15
    14f2:	ef 90       	pop	r14
    14f4:	08 95       	ret

000014f6 <GetKey>:
    14f6:	6f 92       	push	r6
    14f8:	7f 92       	push	r7
    14fa:	8f 92       	push	r8
    14fc:	9f 92       	push	r9
    14fe:	af 92       	push	r10
    1500:	bf 92       	push	r11
    1502:	cf 92       	push	r12
    1504:	df 92       	push	r13
    1506:	ef 92       	push	r14
    1508:	ff 92       	push	r15
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	0c e7       	ldi	r16, 0x7C	; 124
    1514:	10 e0       	ldi	r17, 0x00	; 0
    1516:	c1 2c       	mov	r12, r1
    1518:	d1 2c       	mov	r13, r1
    151a:	46 01       	movw	r8, r12
    151c:	58 01       	movw	r10, r16
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	f8 01       	movw	r30, r16
    1522:	80 81       	ld	r24, Z
    1524:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
    1528:	c8 e7       	ldi	r28, 0x78	; 120
    152a:	d0 e0       	ldi	r29, 0x00	; 0
    152c:	61 2c       	mov	r6, r1
    152e:	71 2c       	mov	r7, r1
    1530:	73 01       	movw	r14, r6
    1532:	89 91       	ld	r24, Y+
    1534:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <DIO_ReadChannel>
    1538:	81 11       	cpse	r24, r1
    153a:	14 c0       	rjmp	.+40     	; 0x1564 <GetKey+0x6e>
    153c:	e3 01       	movw	r28, r6
    153e:	c8 58       	subi	r28, 0x88	; 136
    1540:	df 4f       	sbci	r29, 0xFF	; 255
    1542:	88 81       	ld	r24, Y
    1544:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <DIO_ReadChannel>
    1548:	88 23       	and	r24, r24
    154a:	d9 f3       	breq	.-10     	; 0x1542 <GetKey+0x4c>
    154c:	c4 01       	movw	r24, r8
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	88 59       	subi	r24, 0x98	; 152
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	fc 01       	movw	r30, r24
    155c:	ee 0d       	add	r30, r14
    155e:	ff 1d       	adc	r31, r15
    1560:	80 81       	ld	r24, Z
    1562:	16 c0       	rjmp	.+44     	; 0x1590 <GetKey+0x9a>
    1564:	ff ef       	ldi	r31, 0xFF	; 255
    1566:	6f 1a       	sub	r6, r31
    1568:	7f 0a       	sbc	r7, r31
    156a:	84 e0       	ldi	r24, 0x04	; 4
    156c:	68 16       	cp	r6, r24
    156e:	71 04       	cpc	r7, r1
    1570:	f9 f6       	brne	.-66     	; 0x1530 <GetKey+0x3a>
    1572:	0f 5f       	subi	r16, 0xFF	; 255
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	f5 01       	movw	r30, r10
    157a:	80 81       	ld	r24, Z
    157c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
    1580:	ff ef       	ldi	r31, 0xFF	; 255
    1582:	cf 1a       	sub	r12, r31
    1584:	df 0a       	sbc	r13, r31
    1586:	84 e0       	ldi	r24, 0x04	; 4
    1588:	c8 16       	cp	r12, r24
    158a:	d1 04       	cpc	r13, r1
    158c:	31 f6       	brne	.-116    	; 0x151a <GetKey+0x24>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	df 90       	pop	r13
    159e:	cf 90       	pop	r12
    15a0:	bf 90       	pop	r11
    15a2:	af 90       	pop	r10
    15a4:	9f 90       	pop	r9
    15a6:	8f 90       	pop	r8
    15a8:	7f 90       	pop	r7
    15aa:	6f 90       	pop	r6
    15ac:	08 95       	ret

000015ae <LCD_Cmd>:
    15ae:	cf 93       	push	r28
    15b0:	c8 2f       	mov	r28, r24
    15b2:	60 e0       	ldi	r22, 0x00	; 0
    15b4:	89 e0       	ldi	r24, 0x09	; 9
    15b6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_ReadPort>
    15c0:	8f 70       	andi	r24, 0x0F	; 15
    15c2:	9c 2f       	mov	r25, r28
    15c4:	90 7f       	andi	r25, 0xF0	; 240
    15c6:	68 2f       	mov	r22, r24
    15c8:	69 2b       	or	r22, r25
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_WritePort>
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	8b e0       	ldi	r24, 0x0B	; 11
    15d4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15d8:	8f e8       	ldi	r24, 0x8F	; 143
    15da:	91 e0       	ldi	r25, 0x01	; 1
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	f1 f7       	brne	.-4      	; 0x15dc <LCD_Cmd+0x2e>
    15e0:	00 c0       	rjmp	.+0      	; 0x15e2 <LCD_Cmd+0x34>
    15e2:	00 00       	nop
    15e4:	61 e0       	ldi	r22, 0x01	; 1
    15e6:	8b e0       	ldi	r24, 0x0B	; 11
    15e8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15ec:	8f e1       	ldi	r24, 0x1F	; 31
    15ee:	9e e4       	ldi	r25, 0x4E	; 78
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCD_Cmd+0x42>
    15f4:	00 c0       	rjmp	.+0      	; 0x15f6 <LCD_Cmd+0x48>
    15f6:	00 00       	nop
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_ReadPort>
    15fe:	8f 70       	andi	r24, 0x0F	; 15
    1600:	90 e1       	ldi	r25, 0x10	; 16
    1602:	c9 9f       	mul	r28, r25
    1604:	90 01       	movw	r18, r0
    1606:	11 24       	eor	r1, r1
    1608:	68 2f       	mov	r22, r24
    160a:	62 2b       	or	r22, r18
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_WritePort>
    1612:	60 e0       	ldi	r22, 0x00	; 0
    1614:	8b e0       	ldi	r24, 0x0B	; 11
    1616:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    161a:	8f e8       	ldi	r24, 0x8F	; 143
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <LCD_Cmd+0x70>
    1622:	00 c0       	rjmp	.+0      	; 0x1624 <LCD_Cmd+0x76>
    1624:	00 00       	nop
    1626:	61 e0       	ldi	r22, 0x01	; 1
    1628:	8b e0       	ldi	r24, 0x0B	; 11
    162a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    162e:	8f e3       	ldi	r24, 0x3F	; 63
    1630:	9f e1       	ldi	r25, 0x1F	; 31
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <LCD_Cmd+0x84>
    1636:	00 c0       	rjmp	.+0      	; 0x1638 <LCD_Cmd+0x8a>
    1638:	00 00       	nop
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <LCD_Init>:
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	8a e0       	ldi	r24, 0x0A	; 10
    1642:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	8b e0       	ldi	r24, 0x0B	; 11
    164a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
    164e:	2f ef       	ldi	r18, 0xFF	; 255
    1650:	89 ef       	ldi	r24, 0xF9	; 249
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	21 50       	subi	r18, 0x01	; 1
    1656:	80 40       	sbci	r24, 0x00	; 0
    1658:	90 40       	sbci	r25, 0x00	; 0
    165a:	e1 f7       	brne	.-8      	; 0x1654 <LCD_Init+0x16>
    165c:	00 c0       	rjmp	.+0      	; 0x165e <LCD_Init+0x20>
    165e:	00 00       	nop
    1660:	83 e3       	ldi	r24, 0x33	; 51
    1662:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_Cmd>
    1666:	82 e3       	ldi	r24, 0x32	; 50
    1668:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_Cmd>
    166c:	88 e2       	ldi	r24, 0x28	; 40
    166e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_Cmd>
    1672:	86 e0       	ldi	r24, 0x06	; 6
    1674:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_Cmd>
    1678:	8c e0       	ldi	r24, 0x0C	; 12
    167a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_Cmd>
    167e:	08 95       	ret

00001680 <LCD_Char>:
    1680:	cf 93       	push	r28
    1682:	c8 2f       	mov	r28, r24
    1684:	61 e0       	ldi	r22, 0x01	; 1
    1686:	89 e0       	ldi	r24, 0x09	; 9
    1688:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_ReadPort>
    1692:	8f 70       	andi	r24, 0x0F	; 15
    1694:	9c 2f       	mov	r25, r28
    1696:	90 7f       	andi	r25, 0xF0	; 240
    1698:	68 2f       	mov	r22, r24
    169a:	69 2b       	or	r22, r25
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_WritePort>
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	8b e0       	ldi	r24, 0x0B	; 11
    16a6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16aa:	8f e8       	ldi	r24, 0x8F	; 143
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f7       	brne	.-4      	; 0x16ae <LCD_Char+0x2e>
    16b2:	00 c0       	rjmp	.+0      	; 0x16b4 <LCD_Char+0x34>
    16b4:	00 00       	nop
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	8b e0       	ldi	r24, 0x0B	; 11
    16ba:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16be:	8f e1       	ldi	r24, 0x1F	; 31
    16c0:	9e e4       	ldi	r25, 0x4E	; 78
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <LCD_Char+0x42>
    16c6:	00 c0       	rjmp	.+0      	; 0x16c8 <LCD_Char+0x48>
    16c8:	00 00       	nop
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <DIO_ReadPort>
    16d0:	8f 70       	andi	r24, 0x0F	; 15
    16d2:	90 e1       	ldi	r25, 0x10	; 16
    16d4:	c9 9f       	mul	r28, r25
    16d6:	90 01       	movw	r18, r0
    16d8:	11 24       	eor	r1, r1
    16da:	68 2f       	mov	r22, r24
    16dc:	62 2b       	or	r22, r18
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <DIO_WritePort>
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	8b e0       	ldi	r24, 0x0B	; 11
    16e8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16ec:	8f e8       	ldi	r24, 0x8F	; 143
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <LCD_Char+0x70>
    16f4:	00 c0       	rjmp	.+0      	; 0x16f6 <LCD_Char+0x76>
    16f6:	00 00       	nop
    16f8:	61 e0       	ldi	r22, 0x01	; 1
    16fa:	8b e0       	ldi	r24, 0x0B	; 11
    16fc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1700:	8f e3       	ldi	r24, 0x3F	; 63
    1702:	9f e1       	ldi	r25, 0x1F	; 31
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <LCD_Char+0x84>
    1708:	00 c0       	rjmp	.+0      	; 0x170a <LCD_Char+0x8a>
    170a:	00 00       	nop
    170c:	cf 91       	pop	r28
    170e:	08 95       	ret

00001710 <LCD_String>:
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	fc 01       	movw	r30, r24
    1718:	80 81       	ld	r24, Z
    171a:	88 23       	and	r24, r24
    171c:	59 f0       	breq	.+22     	; 0x1734 <LCD_String+0x24>
    171e:	8f 01       	movw	r16, r30
    1720:	c0 e0       	ldi	r28, 0x00	; 0
    1722:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
    1726:	cf 5f       	subi	r28, 0xFF	; 255
    1728:	f8 01       	movw	r30, r16
    172a:	ec 0f       	add	r30, r28
    172c:	f1 1d       	adc	r31, r1
    172e:	80 81       	ld	r24, Z
    1730:	81 11       	cpse	r24, r1
    1732:	f7 cf       	rjmp	.-18     	; 0x1722 <LCD_String+0x12>
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	0f 91       	pop	r16
    173a:	08 95       	ret

0000173c <LCD_SetPos>:
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	19 f0       	breq	.+6      	; 0x1746 <LCD_SetPos+0xa>
    1740:	82 30       	cpi	r24, 0x02	; 2
    1742:	39 f0       	breq	.+14     	; 0x1752 <LCD_SetPos+0x16>
    1744:	08 95       	ret
    1746:	86 2f       	mov	r24, r22
    1748:	8f 70       	andi	r24, 0x0F	; 15
    174a:	80 68       	ori	r24, 0x80	; 128
    174c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_Cmd>
    1750:	08 95       	ret
    1752:	86 2f       	mov	r24, r22
    1754:	8f 70       	andi	r24, 0x0F	; 15
    1756:	80 6c       	ori	r24, 0xC0	; 192
    1758:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_Cmd>
    175c:	08 95       	ret

0000175e <LCD_Custome_Char>:
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	88 30       	cpi	r24, 0x08	; 8
    1768:	80 f4       	brcc	.+32     	; 0x178a <LCD_Custome_Char+0x2c>
    176a:	8b 01       	movw	r16, r22
    176c:	88 0f       	add	r24, r24
    176e:	88 0f       	add	r24, r24
    1770:	88 0f       	add	r24, r24
    1772:	80 5c       	subi	r24, 0xC0	; 192
    1774:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_Cmd>
    1778:	e8 01       	movw	r28, r16
    177a:	08 5f       	subi	r16, 0xF8	; 248
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	89 91       	ld	r24, Y+
    1780:	0e 94 40 0b 	call	0x1680	; 0x1680 <LCD_Char>
    1784:	c0 17       	cp	r28, r16
    1786:	d1 07       	cpc	r29, r17
    1788:	d1 f7       	brne	.-12     	; 0x177e <LCD_Custome_Char+0x20>
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <LCD_Clear>:
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <LCD_Cmd>
    179a:	08 95       	ret

0000179c <ServoMotor>:
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	28 97       	sbiw	r28, 0x08	; 8
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	8c 01       	movw	r16, r24
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	8d e1       	ldi	r24, 0x1D	; 29
    17ba:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    17be:	87 e8       	ldi	r24, 0x87	; 135
    17c0:	93 e1       	ldi	r25, 0x13	; 19
    17c2:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <TIMER1_ICR_SetValue>
    17c6:	b8 01       	movw	r22, r16
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 98 11 	call	0x2330	; 0x2330 <__floatunsisf>
    17d0:	2c e1       	ldi	r18, 0x1C	; 28
    17d2:	37 ec       	ldi	r19, 0xC7	; 199
    17d4:	41 eb       	ldi	r20, 0xB1	; 177
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 26 12 	call	0x244c	; 0x244c <__mulsf3>
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	4a e7       	ldi	r20, 0x7A	; 122
    17e2:	53 e4       	ldi	r21, 0x43	; 67
    17e4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__addsf3>
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e8       	ldi	r20, 0x80	; 128
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__subsf3>
    17f4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__fixunssfsi>
    17f8:	cb 01       	movw	r24, r22
    17fa:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <TIMER1_OCR1A_SetValue>
    17fe:	88 e0       	ldi	r24, 0x08	; 8
    1800:	e0 ec       	ldi	r30, 0xC0	; 192
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	de 01       	movw	r26, r28
    1806:	11 96       	adiw	r26, 0x01	; 1
    1808:	01 90       	ld	r0, Z+
    180a:	0d 92       	st	X+, r0
    180c:	8a 95       	dec	r24
    180e:	e1 f7       	brne	.-8      	; 0x1808 <ServoMotor+0x6c>
    1810:	ce 01       	movw	r24, r28
    1812:	01 96       	adiw	r24, 0x01	; 1
    1814:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <TIMER1_Init>
    1818:	28 96       	adiw	r28, 0x08	; 8
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	1f 91       	pop	r17
    182a:	0f 91       	pop	r16
    182c:	08 95       	ret

0000182e <main>:
#include "EEPROM.h"
#include "APP.h"


int main(void)
{
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	2c 97       	sbiw	r28, 0x0c	; 12
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
	SPI_ConfigTypes options = {Master,MSB,SPIClock_64,DoupleSpeedDisable}; //SPI Config to master
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	1a 82       	std	Y+2, r1	; 0x02
    1848:	82 e0       	ldi	r24, 0x02	; 2
    184a:	8b 83       	std	Y+3, r24	; 0x03
    184c:	1c 82       	std	Y+4, r1	; 0x04
	DIO_Init(); //Initialize DIO with MASTER MCU
    184e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <DIO_Init>
	LCD_Init(); //Initialize LCD with MASTER MCU
    1852:	0e 94 1f 0b 	call	0x163e	; 0x163e <LCD_Init>
	Keypad_Init(); //Initialize keypad with MASTER MCU
    1856:	0e 94 44 0a 	call	0x1488	; 0x1488 <Keypad_Init>
	TWI_Init(0x66); //Setting Master MCU address "I2C COMM."
    185a:	86 e6       	ldi	r24, 0x66	; 102
    185c:	0e 94 13 10 	call	0x2026	; 0x2026 <TWI_Init>
	SPI_Init(&options); //Initialize Master SPI
    1860:	ce 01       	movw	r24, r28
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <SPI_Init>
	UART_Config uartconf = {BaudRate_9600,DoupleSpeedDisable,CharacterSize_8Bits,Stop_1Bit,Parity_Disable,TX_Enable,RX_Enable}; //Configure UART
    1868:	88 e0       	ldi	r24, 0x08	; 8
    186a:	e8 ec       	ldi	r30, 0xC8	; 200
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	de 01       	movw	r26, r28
    1870:	15 96       	adiw	r26, 0x05	; 5
    1872:	01 90       	ld	r0, Z+
    1874:	0d 92       	st	X+, r0
    1876:	8a 95       	dec	r24
    1878:	e1 f7       	brne	.-8      	; 0x1872 <main+0x44>
	Bluetooth_Init(&uartconf); //Initialize bluetooth module
    187a:	ce 01       	movw	r24, r28
    187c:	05 96       	adiw	r24, 0x05	; 5
    187e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Bluetooth_Init>
	DIO_ConfigChannel(DIO_ChannelD0,Input); //Make RX pin input for receiving 
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	88 e1       	ldi	r24, 0x18	; 24
    1886:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    188a:	2f ef       	ldi	r18, 0xFF	; 255
    188c:	81 ee       	ldi	r24, 0xE1	; 225
    188e:	94 e0       	ldi	r25, 0x04	; 4
    1890:	21 50       	subi	r18, 0x01	; 1
    1892:	80 40       	sbci	r24, 0x00	; 0
    1894:	90 40       	sbci	r25, 0x00	; 0
    1896:	e1 f7       	brne	.-8      	; 0x1890 <main+0x62>
    1898:	00 c0       	rjmp	.+0      	; 0x189a <main+0x6c>
    189a:	00 00       	nop
	
	_delay_ms(100);
	
	ALARM(); //if alarm not set, will proceed to main door checking
    189c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <ALARM>
	DoorCheck();
    18a0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DoorCheck>
	
	while (1)
	{
		AdminMenu();
    18a4:	0e 94 44 01 	call	0x288	; 0x288 <AdminMenu>
    18a8:	fd cf       	rjmp	.-6      	; 0x18a4 <main+0x76>

000018aa <DIO_WriteChannel>:
    18aa:	98 2f       	mov	r25, r24
    18ac:	97 70       	andi	r25, 0x07	; 7
    18ae:	86 95       	lsr	r24
    18b0:	86 95       	lsr	r24
    18b2:	86 95       	lsr	r24
    18b4:	81 30       	cpi	r24, 0x01	; 1
    18b6:	21 f1       	breq	.+72     	; 0x1900 <DIO_WriteChannel+0x56>
    18b8:	30 f0       	brcs	.+12     	; 0x18c6 <DIO_WriteChannel+0x1c>
    18ba:	82 30       	cpi	r24, 0x02	; 2
    18bc:	f1 f1       	breq	.+124    	; 0x193a <DIO_WriteChannel+0x90>
    18be:	83 30       	cpi	r24, 0x03	; 3
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <DIO_WriteChannel+0x1a>
    18c2:	58 c0       	rjmp	.+176    	; 0x1974 <DIO_WriteChannel+0xca>
    18c4:	08 95       	ret
    18c6:	61 30       	cpi	r22, 0x01	; 1
    18c8:	69 f4       	brne	.+26     	; 0x18e4 <DIO_WriteChannel+0x3a>
    18ca:	4b b3       	in	r20, 0x1b	; 27
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	b9 01       	movw	r22, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_WriteChannel+0x2e>
    18d4:	66 0f       	add	r22, r22
    18d6:	77 1f       	adc	r23, r23
    18d8:	9a 95       	dec	r25
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <DIO_WriteChannel+0x2a>
    18dc:	cb 01       	movw	r24, r22
    18de:	84 2b       	or	r24, r20
    18e0:	8b bb       	out	0x1b, r24	; 27
    18e2:	08 95       	ret
    18e4:	4b b3       	in	r20, 0x1b	; 27
    18e6:	21 e0       	ldi	r18, 0x01	; 1
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	b9 01       	movw	r22, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <DIO_WriteChannel+0x48>
    18ee:	66 0f       	add	r22, r22
    18f0:	77 1f       	adc	r23, r23
    18f2:	9a 95       	dec	r25
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <DIO_WriteChannel+0x44>
    18f6:	cb 01       	movw	r24, r22
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8b bb       	out	0x1b, r24	; 27
    18fe:	08 95       	ret
    1900:	61 30       	cpi	r22, 0x01	; 1
    1902:	69 f4       	brne	.+26     	; 0x191e <DIO_WriteChannel+0x74>
    1904:	48 b3       	in	r20, 0x18	; 24
    1906:	21 e0       	ldi	r18, 0x01	; 1
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	b9 01       	movw	r22, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <DIO_WriteChannel+0x68>
    190e:	66 0f       	add	r22, r22
    1910:	77 1f       	adc	r23, r23
    1912:	9a 95       	dec	r25
    1914:	e2 f7       	brpl	.-8      	; 0x190e <DIO_WriteChannel+0x64>
    1916:	cb 01       	movw	r24, r22
    1918:	84 2b       	or	r24, r20
    191a:	88 bb       	out	0x18, r24	; 24
    191c:	08 95       	ret
    191e:	48 b3       	in	r20, 0x18	; 24
    1920:	21 e0       	ldi	r18, 0x01	; 1
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	b9 01       	movw	r22, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_WriteChannel+0x82>
    1928:	66 0f       	add	r22, r22
    192a:	77 1f       	adc	r23, r23
    192c:	9a 95       	dec	r25
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_WriteChannel+0x7e>
    1930:	cb 01       	movw	r24, r22
    1932:	80 95       	com	r24
    1934:	84 23       	and	r24, r20
    1936:	88 bb       	out	0x18, r24	; 24
    1938:	08 95       	ret
    193a:	61 30       	cpi	r22, 0x01	; 1
    193c:	69 f4       	brne	.+26     	; 0x1958 <DIO_WriteChannel+0xae>
    193e:	45 b3       	in	r20, 0x15	; 21
    1940:	21 e0       	ldi	r18, 0x01	; 1
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	b9 01       	movw	r22, r18
    1946:	02 c0       	rjmp	.+4      	; 0x194c <DIO_WriteChannel+0xa2>
    1948:	66 0f       	add	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	9a 95       	dec	r25
    194e:	e2 f7       	brpl	.-8      	; 0x1948 <DIO_WriteChannel+0x9e>
    1950:	cb 01       	movw	r24, r22
    1952:	84 2b       	or	r24, r20
    1954:	85 bb       	out	0x15, r24	; 21
    1956:	08 95       	ret
    1958:	45 b3       	in	r20, 0x15	; 21
    195a:	21 e0       	ldi	r18, 0x01	; 1
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	b9 01       	movw	r22, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_WriteChannel+0xbc>
    1962:	66 0f       	add	r22, r22
    1964:	77 1f       	adc	r23, r23
    1966:	9a 95       	dec	r25
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_WriteChannel+0xb8>
    196a:	cb 01       	movw	r24, r22
    196c:	80 95       	com	r24
    196e:	84 23       	and	r24, r20
    1970:	85 bb       	out	0x15, r24	; 21
    1972:	08 95       	ret
    1974:	61 30       	cpi	r22, 0x01	; 1
    1976:	69 f4       	brne	.+26     	; 0x1992 <DIO_WriteChannel+0xe8>
    1978:	42 b3       	in	r20, 0x12	; 18
    197a:	21 e0       	ldi	r18, 0x01	; 1
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	b9 01       	movw	r22, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <DIO_WriteChannel+0xdc>
    1982:	66 0f       	add	r22, r22
    1984:	77 1f       	adc	r23, r23
    1986:	9a 95       	dec	r25
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <DIO_WriteChannel+0xd8>
    198a:	cb 01       	movw	r24, r22
    198c:	84 2b       	or	r24, r20
    198e:	82 bb       	out	0x12, r24	; 18
    1990:	08 95       	ret
    1992:	42 b3       	in	r20, 0x12	; 18
    1994:	21 e0       	ldi	r18, 0x01	; 1
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	b9 01       	movw	r22, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <DIO_WriteChannel+0xf6>
    199c:	66 0f       	add	r22, r22
    199e:	77 1f       	adc	r23, r23
    19a0:	9a 95       	dec	r25
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <DIO_WriteChannel+0xf2>
    19a4:	cb 01       	movw	r24, r22
    19a6:	80 95       	com	r24
    19a8:	84 23       	and	r24, r20
    19aa:	82 bb       	out	0x12, r24	; 18
    19ac:	08 95       	ret

000019ae <DIO_ReadChannel>:
    19ae:	28 2f       	mov	r18, r24
    19b0:	27 70       	andi	r18, 0x07	; 7
    19b2:	86 95       	lsr	r24
    19b4:	86 95       	lsr	r24
    19b6:	86 95       	lsr	r24
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	79 f0       	breq	.+30     	; 0x19da <DIO_ReadChannel+0x2c>
    19bc:	28 f0       	brcs	.+10     	; 0x19c8 <DIO_ReadChannel+0x1a>
    19be:	82 30       	cpi	r24, 0x02	; 2
    19c0:	a9 f0       	breq	.+42     	; 0x19ec <DIO_ReadChannel+0x3e>
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	e1 f0       	breq	.+56     	; 0x19fe <DIO_ReadChannel+0x50>
    19c6:	24 c0       	rjmp	.+72     	; 0x1a10 <DIO_ReadChannel+0x62>
    19c8:	89 b3       	in	r24, 0x19	; 25
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_ReadChannel+0x24>
    19ce:	95 95       	asr	r25
    19d0:	87 95       	ror	r24
    19d2:	2a 95       	dec	r18
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_ReadChannel+0x20>
    19d6:	81 70       	andi	r24, 0x01	; 1
    19d8:	08 95       	ret
    19da:	86 b3       	in	r24, 0x16	; 22
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <DIO_ReadChannel+0x36>
    19e0:	95 95       	asr	r25
    19e2:	87 95       	ror	r24
    19e4:	2a 95       	dec	r18
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <DIO_ReadChannel+0x32>
    19e8:	81 70       	andi	r24, 0x01	; 1
    19ea:	08 95       	ret
    19ec:	83 b3       	in	r24, 0x13	; 19
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_ReadChannel+0x48>
    19f2:	95 95       	asr	r25
    19f4:	87 95       	ror	r24
    19f6:	2a 95       	dec	r18
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_ReadChannel+0x44>
    19fa:	81 70       	andi	r24, 0x01	; 1
    19fc:	08 95       	ret
    19fe:	80 b3       	in	r24, 0x10	; 16
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <DIO_ReadChannel+0x5a>
    1a04:	95 95       	asr	r25
    1a06:	87 95       	ror	r24
    1a08:	2a 95       	dec	r18
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <DIO_ReadChannel+0x56>
    1a0c:	81 70       	andi	r24, 0x01	; 1
    1a0e:	08 95       	ret
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	08 95       	ret

00001a14 <DIO_ConfigChannel>:
    1a14:	98 2f       	mov	r25, r24
    1a16:	97 70       	andi	r25, 0x07	; 7
    1a18:	86 95       	lsr	r24
    1a1a:	86 95       	lsr	r24
    1a1c:	86 95       	lsr	r24
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	21 f1       	breq	.+72     	; 0x1a6a <DIO_ConfigChannel+0x56>
    1a22:	30 f0       	brcs	.+12     	; 0x1a30 <DIO_ConfigChannel+0x1c>
    1a24:	82 30       	cpi	r24, 0x02	; 2
    1a26:	f1 f1       	breq	.+124    	; 0x1aa4 <DIO_ConfigChannel+0x90>
    1a28:	83 30       	cpi	r24, 0x03	; 3
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <DIO_ConfigChannel+0x1a>
    1a2c:	58 c0       	rjmp	.+176    	; 0x1ade <DIO_ConfigChannel+0xca>
    1a2e:	08 95       	ret
    1a30:	61 30       	cpi	r22, 0x01	; 1
    1a32:	69 f4       	brne	.+26     	; 0x1a4e <DIO_ConfigChannel+0x3a>
    1a34:	4a b3       	in	r20, 0x1a	; 26
    1a36:	21 e0       	ldi	r18, 0x01	; 1
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <DIO_ConfigChannel+0x2e>
    1a3e:	66 0f       	add	r22, r22
    1a40:	77 1f       	adc	r23, r23
    1a42:	9a 95       	dec	r25
    1a44:	e2 f7       	brpl	.-8      	; 0x1a3e <DIO_ConfigChannel+0x2a>
    1a46:	cb 01       	movw	r24, r22
    1a48:	84 2b       	or	r24, r20
    1a4a:	8a bb       	out	0x1a, r24	; 26
    1a4c:	08 95       	ret
    1a4e:	4a b3       	in	r20, 0x1a	; 26
    1a50:	21 e0       	ldi	r18, 0x01	; 1
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	b9 01       	movw	r22, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_ConfigChannel+0x48>
    1a58:	66 0f       	add	r22, r22
    1a5a:	77 1f       	adc	r23, r23
    1a5c:	9a 95       	dec	r25
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_ConfigChannel+0x44>
    1a60:	cb 01       	movw	r24, r22
    1a62:	80 95       	com	r24
    1a64:	84 23       	and	r24, r20
    1a66:	8a bb       	out	0x1a, r24	; 26
    1a68:	08 95       	ret
    1a6a:	61 30       	cpi	r22, 0x01	; 1
    1a6c:	69 f4       	brne	.+26     	; 0x1a88 <DIO_ConfigChannel+0x74>
    1a6e:	47 b3       	in	r20, 0x17	; 23
    1a70:	21 e0       	ldi	r18, 0x01	; 1
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	b9 01       	movw	r22, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <DIO_ConfigChannel+0x68>
    1a78:	66 0f       	add	r22, r22
    1a7a:	77 1f       	adc	r23, r23
    1a7c:	9a 95       	dec	r25
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <DIO_ConfigChannel+0x64>
    1a80:	cb 01       	movw	r24, r22
    1a82:	84 2b       	or	r24, r20
    1a84:	87 bb       	out	0x17, r24	; 23
    1a86:	08 95       	ret
    1a88:	47 b3       	in	r20, 0x17	; 23
    1a8a:	21 e0       	ldi	r18, 0x01	; 1
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	b9 01       	movw	r22, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_ConfigChannel+0x82>
    1a92:	66 0f       	add	r22, r22
    1a94:	77 1f       	adc	r23, r23
    1a96:	9a 95       	dec	r25
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <DIO_ConfigChannel+0x7e>
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	80 95       	com	r24
    1a9e:	84 23       	and	r24, r20
    1aa0:	87 bb       	out	0x17, r24	; 23
    1aa2:	08 95       	ret
    1aa4:	61 30       	cpi	r22, 0x01	; 1
    1aa6:	69 f4       	brne	.+26     	; 0x1ac2 <DIO_ConfigChannel+0xae>
    1aa8:	44 b3       	in	r20, 0x14	; 20
    1aaa:	21 e0       	ldi	r18, 0x01	; 1
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	b9 01       	movw	r22, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <DIO_ConfigChannel+0xa2>
    1ab2:	66 0f       	add	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	9a 95       	dec	r25
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <DIO_ConfigChannel+0x9e>
    1aba:	cb 01       	movw	r24, r22
    1abc:	84 2b       	or	r24, r20
    1abe:	84 bb       	out	0x14, r24	; 20
    1ac0:	08 95       	ret
    1ac2:	44 b3       	in	r20, 0x14	; 20
    1ac4:	21 e0       	ldi	r18, 0x01	; 1
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	b9 01       	movw	r22, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <DIO_ConfigChannel+0xbc>
    1acc:	66 0f       	add	r22, r22
    1ace:	77 1f       	adc	r23, r23
    1ad0:	9a 95       	dec	r25
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <DIO_ConfigChannel+0xb8>
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	80 95       	com	r24
    1ad8:	84 23       	and	r24, r20
    1ada:	84 bb       	out	0x14, r24	; 20
    1adc:	08 95       	ret
    1ade:	61 30       	cpi	r22, 0x01	; 1
    1ae0:	69 f4       	brne	.+26     	; 0x1afc <DIO_ConfigChannel+0xe8>
    1ae2:	41 b3       	in	r20, 0x11	; 17
    1ae4:	21 e0       	ldi	r18, 0x01	; 1
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	b9 01       	movw	r22, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_ConfigChannel+0xdc>
    1aec:	66 0f       	add	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	9a 95       	dec	r25
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_ConfigChannel+0xd8>
    1af4:	cb 01       	movw	r24, r22
    1af6:	84 2b       	or	r24, r20
    1af8:	81 bb       	out	0x11, r24	; 17
    1afa:	08 95       	ret
    1afc:	41 b3       	in	r20, 0x11	; 17
    1afe:	21 e0       	ldi	r18, 0x01	; 1
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	b9 01       	movw	r22, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <DIO_ConfigChannel+0xf6>
    1b06:	66 0f       	add	r22, r22
    1b08:	77 1f       	adc	r23, r23
    1b0a:	9a 95       	dec	r25
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <DIO_ConfigChannel+0xf2>
    1b0e:	cb 01       	movw	r24, r22
    1b10:	80 95       	com	r24
    1b12:	84 23       	and	r24, r20
    1b14:	81 bb       	out	0x11, r24	; 17
    1b16:	08 95       	ret

00001b18 <DIO_ReadPort>:
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	41 f0       	breq	.+16     	; 0x1b2c <DIO_ReadPort+0x14>
    1b1c:	28 f0       	brcs	.+10     	; 0x1b28 <DIO_ReadPort+0x10>
    1b1e:	82 30       	cpi	r24, 0x02	; 2
    1b20:	39 f0       	breq	.+14     	; 0x1b30 <DIO_ReadPort+0x18>
    1b22:	83 30       	cpi	r24, 0x03	; 3
    1b24:	39 f0       	breq	.+14     	; 0x1b34 <DIO_ReadPort+0x1c>
    1b26:	08 c0       	rjmp	.+16     	; 0x1b38 <DIO_ReadPort+0x20>
    1b28:	8b b3       	in	r24, 0x1b	; 27
    1b2a:	08 95       	ret
    1b2c:	88 b3       	in	r24, 0x18	; 24
    1b2e:	08 95       	ret
    1b30:	85 b3       	in	r24, 0x15	; 21
    1b32:	08 95       	ret
    1b34:	82 b3       	in	r24, 0x12	; 18
    1b36:	08 95       	ret
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	08 95       	ret

00001b3c <DIO_WritePort>:
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	41 f0       	breq	.+16     	; 0x1b50 <DIO_WritePort+0x14>
    1b40:	28 f0       	brcs	.+10     	; 0x1b4c <DIO_WritePort+0x10>
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	39 f0       	breq	.+14     	; 0x1b54 <DIO_WritePort+0x18>
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	39 f0       	breq	.+14     	; 0x1b58 <DIO_WritePort+0x1c>
    1b4a:	08 95       	ret
    1b4c:	6b bb       	out	0x1b, r22	; 27
    1b4e:	08 95       	ret
    1b50:	68 bb       	out	0x18, r22	; 24
    1b52:	08 95       	ret
    1b54:	65 bb       	out	0x15, r22	; 21
    1b56:	08 95       	ret
    1b58:	62 bb       	out	0x12, r22	; 18
    1b5a:	08 95       	ret

00001b5c <DIO_Init>:
    1b5c:	e0 e8       	ldi	r30, 0x80	; 128
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	50 e0       	ldi	r21, 0x00	; 0
    1b66:	28 2f       	mov	r18, r24
    1b68:	27 70       	andi	r18, 0x07	; 7
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	96 95       	lsr	r25
    1b6e:	96 95       	lsr	r25
    1b70:	96 95       	lsr	r25
    1b72:	91 30       	cpi	r25, 0x01	; 1
    1b74:	09 f1       	breq	.+66     	; 0x1bb8 <DIO_Init+0x5c>
    1b76:	30 f0       	brcs	.+12     	; 0x1b84 <DIO_Init+0x28>
    1b78:	92 30       	cpi	r25, 0x02	; 2
    1b7a:	c1 f1       	breq	.+112    	; 0x1bec <DIO_Init+0x90>
    1b7c:	93 30       	cpi	r25, 0x03	; 3
    1b7e:	09 f4       	brne	.+2      	; 0x1b82 <DIO_Init+0x26>
    1b80:	4f c0       	rjmp	.+158    	; 0x1c20 <DIO_Init+0xc4>
    1b82:	67 c0       	rjmp	.+206    	; 0x1c52 <DIO_Init+0xf6>
    1b84:	90 81       	ld	r25, Z
    1b86:	91 30       	cpi	r25, 0x01	; 1
    1b88:	59 f4       	brne	.+22     	; 0x1ba0 <DIO_Init+0x44>
    1b8a:	9a b3       	in	r25, 0x1a	; 26
    1b8c:	ba 01       	movw	r22, r20
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <DIO_Init+0x38>
    1b90:	66 0f       	add	r22, r22
    1b92:	77 1f       	adc	r23, r23
    1b94:	2a 95       	dec	r18
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <DIO_Init+0x34>
    1b98:	9b 01       	movw	r18, r22
    1b9a:	29 2b       	or	r18, r25
    1b9c:	2a bb       	out	0x1a, r18	; 26
    1b9e:	59 c0       	rjmp	.+178    	; 0x1c52 <DIO_Init+0xf6>
    1ba0:	3a b3       	in	r19, 0x1a	; 26
    1ba2:	ba 01       	movw	r22, r20
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <DIO_Init+0x4e>
    1ba6:	66 0f       	add	r22, r22
    1ba8:	77 1f       	adc	r23, r23
    1baa:	2a 95       	dec	r18
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <DIO_Init+0x4a>
    1bae:	96 2f       	mov	r25, r22
    1bb0:	90 95       	com	r25
    1bb2:	93 23       	and	r25, r19
    1bb4:	9a bb       	out	0x1a, r25	; 26
    1bb6:	4d c0       	rjmp	.+154    	; 0x1c52 <DIO_Init+0xf6>
    1bb8:	90 81       	ld	r25, Z
    1bba:	91 30       	cpi	r25, 0x01	; 1
    1bbc:	59 f4       	brne	.+22     	; 0x1bd4 <DIO_Init+0x78>
    1bbe:	97 b3       	in	r25, 0x17	; 23
    1bc0:	ba 01       	movw	r22, r20
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_Init+0x6c>
    1bc4:	66 0f       	add	r22, r22
    1bc6:	77 1f       	adc	r23, r23
    1bc8:	2a 95       	dec	r18
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_Init+0x68>
    1bcc:	9b 01       	movw	r18, r22
    1bce:	29 2b       	or	r18, r25
    1bd0:	27 bb       	out	0x17, r18	; 23
    1bd2:	3f c0       	rjmp	.+126    	; 0x1c52 <DIO_Init+0xf6>
    1bd4:	37 b3       	in	r19, 0x17	; 23
    1bd6:	ba 01       	movw	r22, r20
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_Init+0x82>
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	2a 95       	dec	r18
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <DIO_Init+0x7e>
    1be2:	96 2f       	mov	r25, r22
    1be4:	90 95       	com	r25
    1be6:	93 23       	and	r25, r19
    1be8:	97 bb       	out	0x17, r25	; 23
    1bea:	33 c0       	rjmp	.+102    	; 0x1c52 <DIO_Init+0xf6>
    1bec:	90 81       	ld	r25, Z
    1bee:	91 30       	cpi	r25, 0x01	; 1
    1bf0:	59 f4       	brne	.+22     	; 0x1c08 <DIO_Init+0xac>
    1bf2:	94 b3       	in	r25, 0x14	; 20
    1bf4:	ba 01       	movw	r22, r20
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <DIO_Init+0xa0>
    1bf8:	66 0f       	add	r22, r22
    1bfa:	77 1f       	adc	r23, r23
    1bfc:	2a 95       	dec	r18
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <DIO_Init+0x9c>
    1c00:	9b 01       	movw	r18, r22
    1c02:	29 2b       	or	r18, r25
    1c04:	24 bb       	out	0x14, r18	; 20
    1c06:	25 c0       	rjmp	.+74     	; 0x1c52 <DIO_Init+0xf6>
    1c08:	34 b3       	in	r19, 0x14	; 20
    1c0a:	ba 01       	movw	r22, r20
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <DIO_Init+0xb6>
    1c0e:	66 0f       	add	r22, r22
    1c10:	77 1f       	adc	r23, r23
    1c12:	2a 95       	dec	r18
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <DIO_Init+0xb2>
    1c16:	96 2f       	mov	r25, r22
    1c18:	90 95       	com	r25
    1c1a:	93 23       	and	r25, r19
    1c1c:	94 bb       	out	0x14, r25	; 20
    1c1e:	19 c0       	rjmp	.+50     	; 0x1c52 <DIO_Init+0xf6>
    1c20:	90 81       	ld	r25, Z
    1c22:	91 30       	cpi	r25, 0x01	; 1
    1c24:	59 f4       	brne	.+22     	; 0x1c3c <DIO_Init+0xe0>
    1c26:	91 b3       	in	r25, 0x11	; 17
    1c28:	ba 01       	movw	r22, r20
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <DIO_Init+0xd4>
    1c2c:	66 0f       	add	r22, r22
    1c2e:	77 1f       	adc	r23, r23
    1c30:	2a 95       	dec	r18
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <DIO_Init+0xd0>
    1c34:	9b 01       	movw	r18, r22
    1c36:	29 2b       	or	r18, r25
    1c38:	21 bb       	out	0x11, r18	; 17
    1c3a:	0b c0       	rjmp	.+22     	; 0x1c52 <DIO_Init+0xf6>
    1c3c:	31 b3       	in	r19, 0x11	; 17
    1c3e:	ba 01       	movw	r22, r20
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <DIO_Init+0xea>
    1c42:	66 0f       	add	r22, r22
    1c44:	77 1f       	adc	r23, r23
    1c46:	2a 95       	dec	r18
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <DIO_Init+0xe6>
    1c4a:	96 2f       	mov	r25, r22
    1c4c:	90 95       	com	r25
    1c4e:	93 23       	and	r25, r19
    1c50:	91 bb       	out	0x11, r25	; 17
    1c52:	8f 5f       	subi	r24, 0xFF	; 255
    1c54:	32 96       	adiw	r30, 0x02	; 2
    1c56:	80 32       	cpi	r24, 0x20	; 32
    1c58:	09 f0       	breq	.+2      	; 0x1c5c <DIO_Init+0x100>
    1c5a:	85 cf       	rjmp	.-246    	; 0x1b66 <DIO_Init+0xa>
    1c5c:	08 95       	ret

00001c5e <__vector_1>:
    1c5e:	1f 92       	push	r1
    1c60:	0f 92       	push	r0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	0f 92       	push	r0
    1c66:	11 24       	eor	r1, r1
    1c68:	2f 93       	push	r18
    1c6a:	3f 93       	push	r19
    1c6c:	4f 93       	push	r20
    1c6e:	5f 93       	push	r21
    1c70:	6f 93       	push	r22
    1c72:	7f 93       	push	r23
    1c74:	8f 93       	push	r24
    1c76:	9f 93       	push	r25
    1c78:	af 93       	push	r26
    1c7a:	bf 93       	push	r27
    1c7c:	ef 93       	push	r30
    1c7e:	ff 93       	push	r31
    1c80:	e0 91 b8 07 	lds	r30, 0x07B8	; 0x8007b8 <ExtInt0FunPtr>
    1c84:	f0 91 b9 07 	lds	r31, 0x07B9	; 0x8007b9 <ExtInt0FunPtr+0x1>
    1c88:	09 95       	icall
    1c8a:	ff 91       	pop	r31
    1c8c:	ef 91       	pop	r30
    1c8e:	bf 91       	pop	r27
    1c90:	af 91       	pop	r26
    1c92:	9f 91       	pop	r25
    1c94:	8f 91       	pop	r24
    1c96:	7f 91       	pop	r23
    1c98:	6f 91       	pop	r22
    1c9a:	5f 91       	pop	r21
    1c9c:	4f 91       	pop	r20
    1c9e:	3f 91       	pop	r19
    1ca0:	2f 91       	pop	r18
    1ca2:	0f 90       	pop	r0
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	0f 90       	pop	r0
    1ca8:	1f 90       	pop	r1
    1caa:	18 95       	reti

00001cac <__vector_2>:
    1cac:	1f 92       	push	r1
    1cae:	0f 92       	push	r0
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	0f 92       	push	r0
    1cb4:	11 24       	eor	r1, r1
    1cb6:	2f 93       	push	r18
    1cb8:	3f 93       	push	r19
    1cba:	4f 93       	push	r20
    1cbc:	5f 93       	push	r21
    1cbe:	6f 93       	push	r22
    1cc0:	7f 93       	push	r23
    1cc2:	8f 93       	push	r24
    1cc4:	9f 93       	push	r25
    1cc6:	af 93       	push	r26
    1cc8:	bf 93       	push	r27
    1cca:	ef 93       	push	r30
    1ccc:	ff 93       	push	r31
    1cce:	e0 91 b6 07 	lds	r30, 0x07B6	; 0x8007b6 <ExtInt1FunPtr>
    1cd2:	f0 91 b7 07 	lds	r31, 0x07B7	; 0x8007b7 <ExtInt1FunPtr+0x1>
    1cd6:	09 95       	icall
    1cd8:	ff 91       	pop	r31
    1cda:	ef 91       	pop	r30
    1cdc:	bf 91       	pop	r27
    1cde:	af 91       	pop	r26
    1ce0:	9f 91       	pop	r25
    1ce2:	8f 91       	pop	r24
    1ce4:	7f 91       	pop	r23
    1ce6:	6f 91       	pop	r22
    1ce8:	5f 91       	pop	r21
    1cea:	4f 91       	pop	r20
    1cec:	3f 91       	pop	r19
    1cee:	2f 91       	pop	r18
    1cf0:	0f 90       	pop	r0
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	0f 90       	pop	r0
    1cf6:	1f 90       	pop	r1
    1cf8:	18 95       	reti

00001cfa <__vector_3>:
    1cfa:	1f 92       	push	r1
    1cfc:	0f 92       	push	r0
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	0f 92       	push	r0
    1d02:	11 24       	eor	r1, r1
    1d04:	2f 93       	push	r18
    1d06:	3f 93       	push	r19
    1d08:	4f 93       	push	r20
    1d0a:	5f 93       	push	r21
    1d0c:	6f 93       	push	r22
    1d0e:	7f 93       	push	r23
    1d10:	8f 93       	push	r24
    1d12:	9f 93       	push	r25
    1d14:	af 93       	push	r26
    1d16:	bf 93       	push	r27
    1d18:	ef 93       	push	r30
    1d1a:	ff 93       	push	r31
    1d1c:	e0 91 b4 07 	lds	r30, 0x07B4	; 0x8007b4 <__data_end>
    1d20:	f0 91 b5 07 	lds	r31, 0x07B5	; 0x8007b5 <__data_end+0x1>
    1d24:	09 95       	icall
    1d26:	ff 91       	pop	r31
    1d28:	ef 91       	pop	r30
    1d2a:	bf 91       	pop	r27
    1d2c:	af 91       	pop	r26
    1d2e:	9f 91       	pop	r25
    1d30:	8f 91       	pop	r24
    1d32:	7f 91       	pop	r23
    1d34:	6f 91       	pop	r22
    1d36:	5f 91       	pop	r21
    1d38:	4f 91       	pop	r20
    1d3a:	3f 91       	pop	r19
    1d3c:	2f 91       	pop	r18
    1d3e:	0f 90       	pop	r0
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	0f 90       	pop	r0
    1d44:	1f 90       	pop	r1
    1d46:	18 95       	reti

00001d48 <SPI_Init>:
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	ec 01       	movw	r28, r24
    1d4e:	88 81       	ld	r24, Y
    1d50:	88 23       	and	r24, r24
    1d52:	a9 f0       	breq	.+42     	; 0x1d7e <SPI_Init+0x36>
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	29 f5       	brne	.+74     	; 0x1da2 <SPI_Init+0x5a>
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	8c e0       	ldi	r24, 0x0C	; 12
    1d5c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    1d60:	61 e0       	ldi	r22, 0x01	; 1
    1d62:	8d e0       	ldi	r24, 0x0D	; 13
    1d64:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    1d68:	60 e0       	ldi	r22, 0x00	; 0
    1d6a:	8e e0       	ldi	r24, 0x0E	; 14
    1d6c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    1d70:	61 e0       	ldi	r22, 0x01	; 1
    1d72:	8f e0       	ldi	r24, 0x0F	; 15
    1d74:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    1d78:	6c 9a       	sbi	0x0d, 4	; 13
    1d7a:	6e 9a       	sbi	0x0d, 6	; 13
    1d7c:	12 c0       	rjmp	.+36     	; 0x1da2 <SPI_Init+0x5a>
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	8c e0       	ldi	r24, 0x0C	; 12
    1d82:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	8d e0       	ldi	r24, 0x0D	; 13
    1d8a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    1d8e:	61 e0       	ldi	r22, 0x01	; 1
    1d90:	8e e0       	ldi	r24, 0x0E	; 14
    1d92:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	8f e0       	ldi	r24, 0x0F	; 15
    1d9a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_ConfigChannel>
    1d9e:	6c 98       	cbi	0x0d, 4	; 13
    1da0:	6e 9a       	sbi	0x0d, 6	; 13
    1da2:	2d b1       	in	r18, 0x0d	; 13
    1da4:	99 81       	ldd	r25, Y+1	; 0x01
    1da6:	30 e2       	ldi	r19, 0x20	; 32
    1da8:	93 9f       	mul	r25, r19
    1daa:	c0 01       	movw	r24, r0
    1dac:	11 24       	eor	r1, r1
    1dae:	82 2b       	or	r24, r18
    1db0:	8d b9       	out	0x0d, r24	; 13
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	31 f4       	brne	.+12     	; 0x1dc4 <SPI_Init+0x7c>
    1db8:	70 9a       	sbi	0x0e, 0	; 14
    1dba:	9d b1       	in	r25, 0x0d	; 13
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	89 2b       	or	r24, r25
    1dc0:	8d b9       	out	0x0d, r24	; 13
    1dc2:	05 c0       	rjmp	.+10     	; 0x1dce <SPI_Init+0x86>
    1dc4:	70 98       	cbi	0x0e, 0	; 14
    1dc6:	9d b1       	in	r25, 0x0d	; 13
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	89 2b       	or	r24, r25
    1dcc:	8d b9       	out	0x0d, r24	; 13
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	08 95       	ret

00001dd4 <SPI_TxRx>:
    1dd4:	8f b9       	out	0x0f, r24	; 15
    1dd6:	77 9b       	sbis	0x0e, 7	; 14
    1dd8:	fe cf       	rjmp	.-4      	; 0x1dd6 <SPI_TxRx+0x2>
    1dda:	8f b1       	in	r24, 0x0f	; 15
    1ddc:	08 95       	ret

00001dde <TIMER1_Init>:
    1dde:	fc 01       	movw	r30, r24
    1de0:	80 81       	ld	r24, Z
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	99 f0       	breq	.+38     	; 0x1e0c <TIMER1_Init+0x2e>
    1de6:	28 f0       	brcs	.+10     	; 0x1df2 <TIMER1_Init+0x14>
    1de8:	82 30       	cpi	r24, 0x02	; 2
    1dea:	e9 f0       	breq	.+58     	; 0x1e26 <TIMER1_Init+0x48>
    1dec:	83 30       	cpi	r24, 0x03	; 3
    1dee:	41 f1       	breq	.+80     	; 0x1e40 <TIMER1_Init+0x62>
    1df0:	33 c0       	rjmp	.+102    	; 0x1e58 <TIMER1_Init+0x7a>
    1df2:	8f b5       	in	r24, 0x2f	; 47
    1df4:	8e 7f       	andi	r24, 0xFE	; 254
    1df6:	8f bd       	out	0x2f, r24	; 47
    1df8:	8f b5       	in	r24, 0x2f	; 47
    1dfa:	8d 7f       	andi	r24, 0xFD	; 253
    1dfc:	8f bd       	out	0x2f, r24	; 47
    1dfe:	8e b5       	in	r24, 0x2e	; 46
    1e00:	87 7f       	andi	r24, 0xF7	; 247
    1e02:	8e bd       	out	0x2e, r24	; 46
    1e04:	8e b5       	in	r24, 0x2e	; 46
    1e06:	8f 7e       	andi	r24, 0xEF	; 239
    1e08:	8e bd       	out	0x2e, r24	; 46
    1e0a:	26 c0       	rjmp	.+76     	; 0x1e58 <TIMER1_Init+0x7a>
    1e0c:	8f b5       	in	r24, 0x2f	; 47
    1e0e:	8e 7f       	andi	r24, 0xFE	; 254
    1e10:	8f bd       	out	0x2f, r24	; 47
    1e12:	8f b5       	in	r24, 0x2f	; 47
    1e14:	8d 7f       	andi	r24, 0xFD	; 253
    1e16:	8f bd       	out	0x2f, r24	; 47
    1e18:	8e b5       	in	r24, 0x2e	; 46
    1e1a:	88 60       	ori	r24, 0x08	; 8
    1e1c:	8e bd       	out	0x2e, r24	; 46
    1e1e:	8e b5       	in	r24, 0x2e	; 46
    1e20:	8f 7e       	andi	r24, 0xEF	; 239
    1e22:	8e bd       	out	0x2e, r24	; 46
    1e24:	19 c0       	rjmp	.+50     	; 0x1e58 <TIMER1_Init+0x7a>
    1e26:	8f b5       	in	r24, 0x2f	; 47
    1e28:	8e 7f       	andi	r24, 0xFE	; 254
    1e2a:	8f bd       	out	0x2f, r24	; 47
    1e2c:	8f b5       	in	r24, 0x2f	; 47
    1e2e:	82 60       	ori	r24, 0x02	; 2
    1e30:	8f bd       	out	0x2f, r24	; 47
    1e32:	8e b5       	in	r24, 0x2e	; 46
    1e34:	88 60       	ori	r24, 0x08	; 8
    1e36:	8e bd       	out	0x2e, r24	; 46
    1e38:	8e b5       	in	r24, 0x2e	; 46
    1e3a:	80 61       	ori	r24, 0x10	; 16
    1e3c:	8e bd       	out	0x2e, r24	; 46
    1e3e:	0c c0       	rjmp	.+24     	; 0x1e58 <TIMER1_Init+0x7a>
    1e40:	8f b5       	in	r24, 0x2f	; 47
    1e42:	8e 7f       	andi	r24, 0xFE	; 254
    1e44:	8f bd       	out	0x2f, r24	; 47
    1e46:	8f b5       	in	r24, 0x2f	; 47
    1e48:	82 60       	ori	r24, 0x02	; 2
    1e4a:	8f bd       	out	0x2f, r24	; 47
    1e4c:	8e b5       	in	r24, 0x2e	; 46
    1e4e:	87 7f       	andi	r24, 0xF7	; 247
    1e50:	8e bd       	out	0x2e, r24	; 46
    1e52:	8e b5       	in	r24, 0x2e	; 46
    1e54:	80 61       	ori	r24, 0x10	; 16
    1e56:	8e bd       	out	0x2e, r24	; 46
    1e58:	81 81       	ldd	r24, Z+1	; 0x01
    1e5a:	82 30       	cpi	r24, 0x02	; 2
    1e5c:	01 f1       	breq	.+64     	; 0x1e9e <TIMER1_Init+0xc0>
    1e5e:	28 f4       	brcc	.+10     	; 0x1e6a <TIMER1_Init+0x8c>
    1e60:	88 23       	and	r24, r24
    1e62:	49 f0       	breq	.+18     	; 0x1e76 <TIMER1_Init+0x98>
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	89 f0       	breq	.+34     	; 0x1e8a <TIMER1_Init+0xac>
    1e68:	41 c0       	rjmp	.+130    	; 0x1eec <TIMER1_Init+0x10e>
    1e6a:	84 30       	cpi	r24, 0x04	; 4
    1e6c:	61 f1       	breq	.+88     	; 0x1ec6 <TIMER1_Init+0xe8>
    1e6e:	08 f1       	brcs	.+66     	; 0x1eb2 <TIMER1_Init+0xd4>
    1e70:	85 30       	cpi	r24, 0x05	; 5
    1e72:	99 f1       	breq	.+102    	; 0x1eda <TIMER1_Init+0xfc>
    1e74:	3b c0       	rjmp	.+118    	; 0x1eec <TIMER1_Init+0x10e>
    1e76:	8e b5       	in	r24, 0x2e	; 46
    1e78:	8e 7f       	andi	r24, 0xFE	; 254
    1e7a:	8e bd       	out	0x2e, r24	; 46
    1e7c:	8e b5       	in	r24, 0x2e	; 46
    1e7e:	8d 7f       	andi	r24, 0xFD	; 253
    1e80:	8e bd       	out	0x2e, r24	; 46
    1e82:	8e b5       	in	r24, 0x2e	; 46
    1e84:	8b 7f       	andi	r24, 0xFB	; 251
    1e86:	8e bd       	out	0x2e, r24	; 46
    1e88:	31 c0       	rjmp	.+98     	; 0x1eec <TIMER1_Init+0x10e>
    1e8a:	8e b5       	in	r24, 0x2e	; 46
    1e8c:	81 60       	ori	r24, 0x01	; 1
    1e8e:	8e bd       	out	0x2e, r24	; 46
    1e90:	8e b5       	in	r24, 0x2e	; 46
    1e92:	8d 7f       	andi	r24, 0xFD	; 253
    1e94:	8e bd       	out	0x2e, r24	; 46
    1e96:	8e b5       	in	r24, 0x2e	; 46
    1e98:	8b 7f       	andi	r24, 0xFB	; 251
    1e9a:	8e bd       	out	0x2e, r24	; 46
    1e9c:	27 c0       	rjmp	.+78     	; 0x1eec <TIMER1_Init+0x10e>
    1e9e:	8e b5       	in	r24, 0x2e	; 46
    1ea0:	8e 7f       	andi	r24, 0xFE	; 254
    1ea2:	8e bd       	out	0x2e, r24	; 46
    1ea4:	8e b5       	in	r24, 0x2e	; 46
    1ea6:	82 60       	ori	r24, 0x02	; 2
    1ea8:	8e bd       	out	0x2e, r24	; 46
    1eaa:	8e b5       	in	r24, 0x2e	; 46
    1eac:	8b 7f       	andi	r24, 0xFB	; 251
    1eae:	8e bd       	out	0x2e, r24	; 46
    1eb0:	1d c0       	rjmp	.+58     	; 0x1eec <TIMER1_Init+0x10e>
    1eb2:	8e b5       	in	r24, 0x2e	; 46
    1eb4:	81 60       	ori	r24, 0x01	; 1
    1eb6:	8e bd       	out	0x2e, r24	; 46
    1eb8:	8e b5       	in	r24, 0x2e	; 46
    1eba:	82 60       	ori	r24, 0x02	; 2
    1ebc:	8e bd       	out	0x2e, r24	; 46
    1ebe:	8e b5       	in	r24, 0x2e	; 46
    1ec0:	8b 7f       	andi	r24, 0xFB	; 251
    1ec2:	8e bd       	out	0x2e, r24	; 46
    1ec4:	13 c0       	rjmp	.+38     	; 0x1eec <TIMER1_Init+0x10e>
    1ec6:	8e b5       	in	r24, 0x2e	; 46
    1ec8:	8e 7f       	andi	r24, 0xFE	; 254
    1eca:	8e bd       	out	0x2e, r24	; 46
    1ecc:	8e b5       	in	r24, 0x2e	; 46
    1ece:	8d 7f       	andi	r24, 0xFD	; 253
    1ed0:	8e bd       	out	0x2e, r24	; 46
    1ed2:	8e b5       	in	r24, 0x2e	; 46
    1ed4:	84 60       	ori	r24, 0x04	; 4
    1ed6:	8e bd       	out	0x2e, r24	; 46
    1ed8:	09 c0       	rjmp	.+18     	; 0x1eec <TIMER1_Init+0x10e>
    1eda:	8e b5       	in	r24, 0x2e	; 46
    1edc:	81 60       	ori	r24, 0x01	; 1
    1ede:	8e bd       	out	0x2e, r24	; 46
    1ee0:	8e b5       	in	r24, 0x2e	; 46
    1ee2:	8d 7f       	andi	r24, 0xFD	; 253
    1ee4:	8e bd       	out	0x2e, r24	; 46
    1ee6:	8e b5       	in	r24, 0x2e	; 46
    1ee8:	84 60       	ori	r24, 0x04	; 4
    1eea:	8e bd       	out	0x2e, r24	; 46
    1eec:	82 81       	ldd	r24, Z+2	; 0x02
    1eee:	82 30       	cpi	r24, 0x02	; 2
    1ef0:	59 f0       	breq	.+22     	; 0x1f08 <TIMER1_Init+0x12a>
    1ef2:	83 30       	cpi	r24, 0x03	; 3
    1ef4:	81 f0       	breq	.+32     	; 0x1f16 <TIMER1_Init+0x138>
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	14 c0       	rjmp	.+40     	; 0x1f22 <TIMER1_Init+0x144>
    1efa:	8f b5       	in	r24, 0x2f	; 47
    1efc:	8f 7b       	andi	r24, 0xBF	; 191
    1efe:	8f bd       	out	0x2f, r24	; 47
    1f00:	8f b5       	in	r24, 0x2f	; 47
    1f02:	8f 77       	andi	r24, 0x7F	; 127
    1f04:	8f bd       	out	0x2f, r24	; 47
    1f06:	0d c0       	rjmp	.+26     	; 0x1f22 <TIMER1_Init+0x144>
    1f08:	8f b5       	in	r24, 0x2f	; 47
    1f0a:	8f 7b       	andi	r24, 0xBF	; 191
    1f0c:	8f bd       	out	0x2f, r24	; 47
    1f0e:	8f b5       	in	r24, 0x2f	; 47
    1f10:	80 68       	ori	r24, 0x80	; 128
    1f12:	8f bd       	out	0x2f, r24	; 47
    1f14:	06 c0       	rjmp	.+12     	; 0x1f22 <TIMER1_Init+0x144>
    1f16:	8f b5       	in	r24, 0x2f	; 47
    1f18:	8f 7b       	andi	r24, 0xBF	; 191
    1f1a:	8f bd       	out	0x2f, r24	; 47
    1f1c:	8f b5       	in	r24, 0x2f	; 47
    1f1e:	8f 77       	andi	r24, 0x7F	; 127
    1f20:	8f bd       	out	0x2f, r24	; 47
    1f22:	99 b7       	in	r25, 0x39	; 57
    1f24:	87 81       	ldd	r24, Z+7	; 0x07
    1f26:	88 0f       	add	r24, r24
    1f28:	88 0f       	add	r24, r24
    1f2a:	89 2b       	or	r24, r25
    1f2c:	89 bf       	out	0x39, r24	; 57
    1f2e:	08 95       	ret

00001f30 <TIMER1_OCR1A_SetValue>:
    1f30:	9b bd       	out	0x2b, r25	; 43
    1f32:	8a bd       	out	0x2a, r24	; 42
    1f34:	08 95       	ret

00001f36 <TIMER1_ICR_SetValue>:
    1f36:	97 bd       	out	0x27, r25	; 39
    1f38:	86 bd       	out	0x26, r24	; 38
    1f3a:	08 95       	ret

00001f3c <__vector_7>:
    1f3c:	1f 92       	push	r1
    1f3e:	0f 92       	push	r0
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	0f 92       	push	r0
    1f44:	11 24       	eor	r1, r1
    1f46:	2f 93       	push	r18
    1f48:	3f 93       	push	r19
    1f4a:	4f 93       	push	r20
    1f4c:	5f 93       	push	r21
    1f4e:	6f 93       	push	r22
    1f50:	7f 93       	push	r23
    1f52:	8f 93       	push	r24
    1f54:	9f 93       	push	r25
    1f56:	af 93       	push	r26
    1f58:	bf 93       	push	r27
    1f5a:	ef 93       	push	r30
    1f5c:	ff 93       	push	r31
    1f5e:	e0 91 be 07 	lds	r30, 0x07BE	; 0x8007be <Timer1Oc1aIntFunPtr>
    1f62:	f0 91 bf 07 	lds	r31, 0x07BF	; 0x8007bf <Timer1Oc1aIntFunPtr+0x1>
    1f66:	09 95       	icall
    1f68:	ff 91       	pop	r31
    1f6a:	ef 91       	pop	r30
    1f6c:	bf 91       	pop	r27
    1f6e:	af 91       	pop	r26
    1f70:	9f 91       	pop	r25
    1f72:	8f 91       	pop	r24
    1f74:	7f 91       	pop	r23
    1f76:	6f 91       	pop	r22
    1f78:	5f 91       	pop	r21
    1f7a:	4f 91       	pop	r20
    1f7c:	3f 91       	pop	r19
    1f7e:	2f 91       	pop	r18
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__vector_8>:
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	2f 93       	push	r18
    1f96:	3f 93       	push	r19
    1f98:	4f 93       	push	r20
    1f9a:	5f 93       	push	r21
    1f9c:	6f 93       	push	r22
    1f9e:	7f 93       	push	r23
    1fa0:	8f 93       	push	r24
    1fa2:	9f 93       	push	r25
    1fa4:	af 93       	push	r26
    1fa6:	bf 93       	push	r27
    1fa8:	ef 93       	push	r30
    1faa:	ff 93       	push	r31
    1fac:	e0 91 bc 07 	lds	r30, 0x07BC	; 0x8007bc <Timer1Oc1bIntFunPtr>
    1fb0:	f0 91 bd 07 	lds	r31, 0x07BD	; 0x8007bd <Timer1Oc1bIntFunPtr+0x1>
    1fb4:	09 95       	icall
    1fb6:	ff 91       	pop	r31
    1fb8:	ef 91       	pop	r30
    1fba:	bf 91       	pop	r27
    1fbc:	af 91       	pop	r26
    1fbe:	9f 91       	pop	r25
    1fc0:	8f 91       	pop	r24
    1fc2:	7f 91       	pop	r23
    1fc4:	6f 91       	pop	r22
    1fc6:	5f 91       	pop	r21
    1fc8:	4f 91       	pop	r20
    1fca:	3f 91       	pop	r19
    1fcc:	2f 91       	pop	r18
    1fce:	0f 90       	pop	r0
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	0f 90       	pop	r0
    1fd4:	1f 90       	pop	r1
    1fd6:	18 95       	reti

00001fd8 <__vector_9>:
    1fd8:	1f 92       	push	r1
    1fda:	0f 92       	push	r0
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	0f 92       	push	r0
    1fe0:	11 24       	eor	r1, r1
    1fe2:	2f 93       	push	r18
    1fe4:	3f 93       	push	r19
    1fe6:	4f 93       	push	r20
    1fe8:	5f 93       	push	r21
    1fea:	6f 93       	push	r22
    1fec:	7f 93       	push	r23
    1fee:	8f 93       	push	r24
    1ff0:	9f 93       	push	r25
    1ff2:	af 93       	push	r26
    1ff4:	bf 93       	push	r27
    1ff6:	ef 93       	push	r30
    1ff8:	ff 93       	push	r31
    1ffa:	e0 91 ba 07 	lds	r30, 0x07BA	; 0x8007ba <Timer1TovIntFunPtr>
    1ffe:	f0 91 bb 07 	lds	r31, 0x07BB	; 0x8007bb <Timer1TovIntFunPtr+0x1>
    2002:	09 95       	icall
    2004:	ff 91       	pop	r31
    2006:	ef 91       	pop	r30
    2008:	bf 91       	pop	r27
    200a:	af 91       	pop	r26
    200c:	9f 91       	pop	r25
    200e:	8f 91       	pop	r24
    2010:	7f 91       	pop	r23
    2012:	6f 91       	pop	r22
    2014:	5f 91       	pop	r21
    2016:	4f 91       	pop	r20
    2018:	3f 91       	pop	r19
    201a:	2f 91       	pop	r18
    201c:	0f 90       	pop	r0
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	0f 90       	pop	r0
    2022:	1f 90       	pop	r1
    2024:	18 95       	reti

00002026 <TWI_Init>:
    2026:	82 b9       	out	0x02, r24	; 2
    2028:	8e e0       	ldi	r24, 0x0E	; 14
    202a:	80 b9       	out	0x00, r24	; 0
    202c:	08 95       	ret

0000202e <TWI_Start>:
    202e:	86 b7       	in	r24, 0x36	; 54
    2030:	80 62       	ori	r24, 0x20	; 32
    2032:	86 bf       	out	0x36, r24	; 54
    2034:	86 b7       	in	r24, 0x36	; 54
    2036:	8f 7e       	andi	r24, 0xEF	; 239
    2038:	86 bf       	out	0x36, r24	; 54
    203a:	86 b7       	in	r24, 0x36	; 54
    203c:	8f 7b       	andi	r24, 0xBF	; 191
    203e:	86 bf       	out	0x36, r24	; 54
    2040:	86 b7       	in	r24, 0x36	; 54
    2042:	84 60       	ori	r24, 0x04	; 4
    2044:	86 bf       	out	0x36, r24	; 54
    2046:	86 b7       	in	r24, 0x36	; 54
    2048:	80 68       	ori	r24, 0x80	; 128
    204a:	86 bf       	out	0x36, r24	; 54
    204c:	06 b6       	in	r0, 0x36	; 54
    204e:	07 fe       	sbrs	r0, 7
    2050:	fd cf       	rjmp	.-6      	; 0x204c <TWI_Start+0x1e>
    2052:	81 b1       	in	r24, 0x01	; 1
    2054:	88 7f       	andi	r24, 0xF8	; 248
    2056:	08 95       	ret

00002058 <TWI_Send>:
    2058:	83 b9       	out	0x03, r24	; 3
    205a:	86 b7       	in	r24, 0x36	; 54
    205c:	8f 7d       	andi	r24, 0xDF	; 223
    205e:	86 bf       	out	0x36, r24	; 54
    2060:	86 b7       	in	r24, 0x36	; 54
    2062:	8f 7e       	andi	r24, 0xEF	; 239
    2064:	86 bf       	out	0x36, r24	; 54
    2066:	86 b7       	in	r24, 0x36	; 54
    2068:	8f 7b       	andi	r24, 0xBF	; 191
    206a:	86 bf       	out	0x36, r24	; 54
    206c:	86 b7       	in	r24, 0x36	; 54
    206e:	84 60       	ori	r24, 0x04	; 4
    2070:	86 bf       	out	0x36, r24	; 54
    2072:	86 b7       	in	r24, 0x36	; 54
    2074:	80 68       	ori	r24, 0x80	; 128
    2076:	86 bf       	out	0x36, r24	; 54
    2078:	06 b6       	in	r0, 0x36	; 54
    207a:	07 fe       	sbrs	r0, 7
    207c:	fd cf       	rjmp	.-6      	; 0x2078 <TWI_Send+0x20>
    207e:	81 b1       	in	r24, 0x01	; 1
    2080:	88 7f       	andi	r24, 0xF8	; 248
    2082:	08 95       	ret

00002084 <TWI_Read_NAck>:
    2084:	fc 01       	movw	r30, r24
    2086:	96 b7       	in	r25, 0x36	; 54
    2088:	9f 7d       	andi	r25, 0xDF	; 223
    208a:	96 bf       	out	0x36, r25	; 54
    208c:	96 b7       	in	r25, 0x36	; 54
    208e:	9f 7e       	andi	r25, 0xEF	; 239
    2090:	96 bf       	out	0x36, r25	; 54
    2092:	96 b7       	in	r25, 0x36	; 54
    2094:	9f 7b       	andi	r25, 0xBF	; 191
    2096:	96 bf       	out	0x36, r25	; 54
    2098:	96 b7       	in	r25, 0x36	; 54
    209a:	94 60       	ori	r25, 0x04	; 4
    209c:	96 bf       	out	0x36, r25	; 54
    209e:	96 b7       	in	r25, 0x36	; 54
    20a0:	90 68       	ori	r25, 0x80	; 128
    20a2:	96 bf       	out	0x36, r25	; 54
    20a4:	06 b6       	in	r0, 0x36	; 54
    20a6:	07 fe       	sbrs	r0, 7
    20a8:	fd cf       	rjmp	.-6      	; 0x20a4 <TWI_Read_NAck+0x20>
    20aa:	83 b1       	in	r24, 0x03	; 3
    20ac:	80 83       	st	Z, r24
    20ae:	81 b1       	in	r24, 0x01	; 1
    20b0:	88 7f       	andi	r24, 0xF8	; 248
    20b2:	08 95       	ret

000020b4 <TWI_Stop>:
    20b4:	86 b7       	in	r24, 0x36	; 54
    20b6:	8f 7d       	andi	r24, 0xDF	; 223
    20b8:	86 bf       	out	0x36, r24	; 54
    20ba:	86 b7       	in	r24, 0x36	; 54
    20bc:	80 61       	ori	r24, 0x10	; 16
    20be:	86 bf       	out	0x36, r24	; 54
    20c0:	86 b7       	in	r24, 0x36	; 54
    20c2:	8f 7b       	andi	r24, 0xBF	; 191
    20c4:	86 bf       	out	0x36, r24	; 54
    20c6:	86 b7       	in	r24, 0x36	; 54
    20c8:	84 60       	ori	r24, 0x04	; 4
    20ca:	86 bf       	out	0x36, r24	; 54
    20cc:	86 b7       	in	r24, 0x36	; 54
    20ce:	80 68       	ori	r24, 0x80	; 128
    20d0:	86 bf       	out	0x36, r24	; 54
    20d2:	08 95       	ret

000020d4 <UART_Init>:
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	ec 01       	movw	r28, r24
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	e9 f4       	brne	.+58     	; 0x211a <UART_Init+0x46>
    20e0:	59 9a       	sbi	0x0b, 1	; 11
    20e2:	28 81       	ld	r18, Y
    20e4:	39 81       	ldd	r19, Y+1	; 0x01
    20e6:	c9 01       	movw	r24, r18
    20e8:	a0 e0       	ldi	r26, 0x00	; 0
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	aa 1f       	adc	r26, r26
    20f2:	bb 1f       	adc	r27, r27
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	aa 1f       	adc	r26, r26
    20fa:	bb 1f       	adc	r27, r27
    20fc:	9c 01       	movw	r18, r24
    20fe:	ad 01       	movw	r20, r26
    2100:	22 0f       	add	r18, r18
    2102:	33 1f       	adc	r19, r19
    2104:	44 1f       	adc	r20, r20
    2106:	55 1f       	adc	r21, r21
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	74 e2       	ldi	r23, 0x24	; 36
    210c:	84 ef       	ldi	r24, 0xF4	; 244
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 93 12 	call	0x2526	; 0x2526 <__udivmodsi4>
    2114:	21 50       	subi	r18, 0x01	; 1
    2116:	31 09       	sbc	r19, r1
    2118:	20 c0       	rjmp	.+64     	; 0x215a <UART_Init+0x86>
    211a:	59 98       	cbi	0x0b, 1	; 11
    211c:	28 81       	ld	r18, Y
    211e:	39 81       	ldd	r19, Y+1	; 0x01
    2120:	c9 01       	movw	r24, r18
    2122:	a0 e0       	ldi	r26, 0x00	; 0
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	aa 1f       	adc	r26, r26
    212c:	bb 1f       	adc	r27, r27
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	aa 1f       	adc	r26, r26
    2134:	bb 1f       	adc	r27, r27
    2136:	9c 01       	movw	r18, r24
    2138:	ad 01       	movw	r20, r26
    213a:	22 0f       	add	r18, r18
    213c:	33 1f       	adc	r19, r19
    213e:	44 1f       	adc	r20, r20
    2140:	55 1f       	adc	r21, r21
    2142:	22 0f       	add	r18, r18
    2144:	33 1f       	adc	r19, r19
    2146:	44 1f       	adc	r20, r20
    2148:	55 1f       	adc	r21, r21
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	74 e2       	ldi	r23, 0x24	; 36
    214e:	84 ef       	ldi	r24, 0xF4	; 244
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 93 12 	call	0x2526	; 0x2526 <__udivmodsi4>
    2156:	21 50       	subi	r18, 0x01	; 1
    2158:	31 09       	sbc	r19, r1
    215a:	29 b9       	out	0x09, r18	; 9
    215c:	30 bd       	out	0x20, r19	; 32
    215e:	9b 81       	ldd	r25, Y+3	; 0x03
    2160:	97 30       	cpi	r25, 0x07	; 7
    2162:	41 f4       	brne	.+16     	; 0x2174 <UART_Init+0xa0>
    2164:	80 b5       	in	r24, 0x20	; 32
    2166:	82 60       	ori	r24, 0x02	; 2
    2168:	80 bd       	out	0x20, r24	; 32
    216a:	80 b5       	in	r24, 0x20	; 32
    216c:	84 60       	ori	r24, 0x04	; 4
    216e:	80 bd       	out	0x20, r24	; 32
    2170:	52 9a       	sbi	0x0a, 2	; 10
    2172:	05 c0       	rjmp	.+10     	; 0x217e <UART_Init+0xaa>
    2174:	80 b5       	in	r24, 0x20	; 32
    2176:	99 0f       	add	r25, r25
    2178:	80 68       	ori	r24, 0x80	; 128
    217a:	89 2b       	or	r24, r25
    217c:	80 bd       	out	0x20, r24	; 32
    217e:	80 b5       	in	r24, 0x20	; 32
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	99 0f       	add	r25, r25
    2184:	99 0f       	add	r25, r25
    2186:	99 0f       	add	r25, r25
    2188:	80 68       	ori	r24, 0x80	; 128
    218a:	89 2b       	or	r24, r25
    218c:	80 bd       	out	0x20, r24	; 32
    218e:	20 b5       	in	r18, 0x20	; 32
    2190:	9d 81       	ldd	r25, Y+5	; 0x05
    2192:	30 e1       	ldi	r19, 0x10	; 16
    2194:	93 9f       	mul	r25, r19
    2196:	c0 01       	movw	r24, r0
    2198:	11 24       	eor	r1, r1
    219a:	92 2f       	mov	r25, r18
    219c:	90 68       	ori	r25, 0x80	; 128
    219e:	89 2b       	or	r24, r25
    21a0:	80 bd       	out	0x20, r24	; 32
    21a2:	8e 81       	ldd	r24, Y+6	; 0x06
    21a4:	80 fd       	sbrc	r24, 0
    21a6:	53 9a       	sbi	0x0a, 3	; 10
    21a8:	80 ff       	sbrs	r24, 0
    21aa:	53 98       	cbi	0x0a, 3	; 10
    21ac:	8f 81       	ldd	r24, Y+7	; 0x07
    21ae:	80 fd       	sbrc	r24, 0
    21b0:	54 9a       	sbi	0x0a, 4	; 10
    21b2:	80 ff       	sbrs	r24, 0
    21b4:	54 98       	cbi	0x0a, 4	; 10
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <UART_Transmait>:
    21bc:	5d 9b       	sbis	0x0b, 5	; 11
    21be:	fe cf       	rjmp	.-4      	; 0x21bc <UART_Transmait>
    21c0:	8c b9       	out	0x0c, r24	; 12
    21c2:	08 95       	ret

000021c4 <UART_TransmaitString>:
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	fc 01       	movw	r30, r24
    21cc:	80 81       	ld	r24, Z
    21ce:	88 23       	and	r24, r24
    21d0:	59 f0       	breq	.+22     	; 0x21e8 <UART_TransmaitString+0x24>
    21d2:	8f 01       	movw	r16, r30
    21d4:	c0 e0       	ldi	r28, 0x00	; 0
    21d6:	0e 94 de 10 	call	0x21bc	; 0x21bc <UART_Transmait>
    21da:	cf 5f       	subi	r28, 0xFF	; 255
    21dc:	f8 01       	movw	r30, r16
    21de:	ec 0f       	add	r30, r28
    21e0:	f1 1d       	adc	r31, r1
    21e2:	80 81       	ld	r24, Z
    21e4:	81 11       	cpse	r24, r1
    21e6:	f7 cf       	rjmp	.-18     	; 0x21d6 <UART_TransmaitString+0x12>
    21e8:	cf 91       	pop	r28
    21ea:	1f 91       	pop	r17
    21ec:	0f 91       	pop	r16
    21ee:	08 95       	ret

000021f0 <UART_Receive>:
    21f0:	5f 9b       	sbis	0x0b, 7	; 11
    21f2:	fe cf       	rjmp	.-4      	; 0x21f0 <UART_Receive>
    21f4:	8c b1       	in	r24, 0x0c	; 12
    21f6:	08 95       	ret

000021f8 <__subsf3>:
    21f8:	50 58       	subi	r21, 0x80	; 128

000021fa <__addsf3>:
    21fa:	bb 27       	eor	r27, r27
    21fc:	aa 27       	eor	r26, r26
    21fe:	0e 94 14 11 	call	0x2228	; 0x2228 <__addsf3x>
    2202:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__fp_round>
    2206:	0e 94 de 11 	call	0x23bc	; 0x23bc <__fp_pscA>
    220a:	38 f0       	brcs	.+14     	; 0x221a <__addsf3+0x20>
    220c:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__fp_pscB>
    2210:	20 f0       	brcs	.+8      	; 0x221a <__addsf3+0x20>
    2212:	39 f4       	brne	.+14     	; 0x2222 <__addsf3+0x28>
    2214:	9f 3f       	cpi	r25, 0xFF	; 255
    2216:	19 f4       	brne	.+6      	; 0x221e <__addsf3+0x24>
    2218:	26 f4       	brtc	.+8      	; 0x2222 <__addsf3+0x28>
    221a:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__fp_nan>
    221e:	0e f4       	brtc	.+2      	; 0x2222 <__addsf3+0x28>
    2220:	e0 95       	com	r30
    2222:	e7 fb       	bst	r30, 7
    2224:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__fp_inf>

00002228 <__addsf3x>:
    2228:	e9 2f       	mov	r30, r25
    222a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__fp_split3>
    222e:	58 f3       	brcs	.-42     	; 0x2206 <__addsf3+0xc>
    2230:	ba 17       	cp	r27, r26
    2232:	62 07       	cpc	r22, r18
    2234:	73 07       	cpc	r23, r19
    2236:	84 07       	cpc	r24, r20
    2238:	95 07       	cpc	r25, r21
    223a:	20 f0       	brcs	.+8      	; 0x2244 <__addsf3x+0x1c>
    223c:	79 f4       	brne	.+30     	; 0x225c <__addsf3x+0x34>
    223e:	a6 f5       	brtc	.+104    	; 0x22a8 <__addsf3x+0x80>
    2240:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__fp_zero>
    2244:	0e f4       	brtc	.+2      	; 0x2248 <__addsf3x+0x20>
    2246:	e0 95       	com	r30
    2248:	0b 2e       	mov	r0, r27
    224a:	ba 2f       	mov	r27, r26
    224c:	a0 2d       	mov	r26, r0
    224e:	0b 01       	movw	r0, r22
    2250:	b9 01       	movw	r22, r18
    2252:	90 01       	movw	r18, r0
    2254:	0c 01       	movw	r0, r24
    2256:	ca 01       	movw	r24, r20
    2258:	a0 01       	movw	r20, r0
    225a:	11 24       	eor	r1, r1
    225c:	ff 27       	eor	r31, r31
    225e:	59 1b       	sub	r21, r25
    2260:	99 f0       	breq	.+38     	; 0x2288 <__addsf3x+0x60>
    2262:	59 3f       	cpi	r21, 0xF9	; 249
    2264:	50 f4       	brcc	.+20     	; 0x227a <__addsf3x+0x52>
    2266:	50 3e       	cpi	r21, 0xE0	; 224
    2268:	68 f1       	brcs	.+90     	; 0x22c4 <__addsf3x+0x9c>
    226a:	1a 16       	cp	r1, r26
    226c:	f0 40       	sbci	r31, 0x00	; 0
    226e:	a2 2f       	mov	r26, r18
    2270:	23 2f       	mov	r18, r19
    2272:	34 2f       	mov	r19, r20
    2274:	44 27       	eor	r20, r20
    2276:	58 5f       	subi	r21, 0xF8	; 248
    2278:	f3 cf       	rjmp	.-26     	; 0x2260 <__addsf3x+0x38>
    227a:	46 95       	lsr	r20
    227c:	37 95       	ror	r19
    227e:	27 95       	ror	r18
    2280:	a7 95       	ror	r26
    2282:	f0 40       	sbci	r31, 0x00	; 0
    2284:	53 95       	inc	r21
    2286:	c9 f7       	brne	.-14     	; 0x227a <__addsf3x+0x52>
    2288:	7e f4       	brtc	.+30     	; 0x22a8 <__addsf3x+0x80>
    228a:	1f 16       	cp	r1, r31
    228c:	ba 0b       	sbc	r27, r26
    228e:	62 0b       	sbc	r22, r18
    2290:	73 0b       	sbc	r23, r19
    2292:	84 0b       	sbc	r24, r20
    2294:	ba f0       	brmi	.+46     	; 0x22c4 <__addsf3x+0x9c>
    2296:	91 50       	subi	r25, 0x01	; 1
    2298:	a1 f0       	breq	.+40     	; 0x22c2 <__addsf3x+0x9a>
    229a:	ff 0f       	add	r31, r31
    229c:	bb 1f       	adc	r27, r27
    229e:	66 1f       	adc	r22, r22
    22a0:	77 1f       	adc	r23, r23
    22a2:	88 1f       	adc	r24, r24
    22a4:	c2 f7       	brpl	.-16     	; 0x2296 <__addsf3x+0x6e>
    22a6:	0e c0       	rjmp	.+28     	; 0x22c4 <__addsf3x+0x9c>
    22a8:	ba 0f       	add	r27, r26
    22aa:	62 1f       	adc	r22, r18
    22ac:	73 1f       	adc	r23, r19
    22ae:	84 1f       	adc	r24, r20
    22b0:	48 f4       	brcc	.+18     	; 0x22c4 <__addsf3x+0x9c>
    22b2:	87 95       	ror	r24
    22b4:	77 95       	ror	r23
    22b6:	67 95       	ror	r22
    22b8:	b7 95       	ror	r27
    22ba:	f7 95       	ror	r31
    22bc:	9e 3f       	cpi	r25, 0xFE	; 254
    22be:	08 f0       	brcs	.+2      	; 0x22c2 <__addsf3x+0x9a>
    22c0:	b0 cf       	rjmp	.-160    	; 0x2222 <__addsf3+0x28>
    22c2:	93 95       	inc	r25
    22c4:	88 0f       	add	r24, r24
    22c6:	08 f0       	brcs	.+2      	; 0x22ca <__addsf3x+0xa2>
    22c8:	99 27       	eor	r25, r25
    22ca:	ee 0f       	add	r30, r30
    22cc:	97 95       	ror	r25
    22ce:	87 95       	ror	r24
    22d0:	08 95       	ret

000022d2 <__fixunssfsi>:
    22d2:	0e 94 05 12 	call	0x240a	; 0x240a <__fp_splitA>
    22d6:	88 f0       	brcs	.+34     	; 0x22fa <__fixunssfsi+0x28>
    22d8:	9f 57       	subi	r25, 0x7F	; 127
    22da:	98 f0       	brcs	.+38     	; 0x2302 <__fixunssfsi+0x30>
    22dc:	b9 2f       	mov	r27, r25
    22de:	99 27       	eor	r25, r25
    22e0:	b7 51       	subi	r27, 0x17	; 23
    22e2:	b0 f0       	brcs	.+44     	; 0x2310 <__fixunssfsi+0x3e>
    22e4:	e1 f0       	breq	.+56     	; 0x231e <__fixunssfsi+0x4c>
    22e6:	66 0f       	add	r22, r22
    22e8:	77 1f       	adc	r23, r23
    22ea:	88 1f       	adc	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	1a f0       	brmi	.+6      	; 0x22f6 <__fixunssfsi+0x24>
    22f0:	ba 95       	dec	r27
    22f2:	c9 f7       	brne	.-14     	; 0x22e6 <__fixunssfsi+0x14>
    22f4:	14 c0       	rjmp	.+40     	; 0x231e <__fixunssfsi+0x4c>
    22f6:	b1 30       	cpi	r27, 0x01	; 1
    22f8:	91 f0       	breq	.+36     	; 0x231e <__fixunssfsi+0x4c>
    22fa:	0e 94 1f 12 	call	0x243e	; 0x243e <__fp_zero>
    22fe:	b1 e0       	ldi	r27, 0x01	; 1
    2300:	08 95       	ret
    2302:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__fp_zero>
    2306:	67 2f       	mov	r22, r23
    2308:	78 2f       	mov	r23, r24
    230a:	88 27       	eor	r24, r24
    230c:	b8 5f       	subi	r27, 0xF8	; 248
    230e:	39 f0       	breq	.+14     	; 0x231e <__fixunssfsi+0x4c>
    2310:	b9 3f       	cpi	r27, 0xF9	; 249
    2312:	cc f3       	brlt	.-14     	; 0x2306 <__fixunssfsi+0x34>
    2314:	86 95       	lsr	r24
    2316:	77 95       	ror	r23
    2318:	67 95       	ror	r22
    231a:	b3 95       	inc	r27
    231c:	d9 f7       	brne	.-10     	; 0x2314 <__fixunssfsi+0x42>
    231e:	3e f4       	brtc	.+14     	; 0x232e <__fixunssfsi+0x5c>
    2320:	90 95       	com	r25
    2322:	80 95       	com	r24
    2324:	70 95       	com	r23
    2326:	61 95       	neg	r22
    2328:	7f 4f       	sbci	r23, 0xFF	; 255
    232a:	8f 4f       	sbci	r24, 0xFF	; 255
    232c:	9f 4f       	sbci	r25, 0xFF	; 255
    232e:	08 95       	ret

00002330 <__floatunsisf>:
    2330:	e8 94       	clt
    2332:	09 c0       	rjmp	.+18     	; 0x2346 <__floatsisf+0x12>

00002334 <__floatsisf>:
    2334:	97 fb       	bst	r25, 7
    2336:	3e f4       	brtc	.+14     	; 0x2346 <__floatsisf+0x12>
    2338:	90 95       	com	r25
    233a:	80 95       	com	r24
    233c:	70 95       	com	r23
    233e:	61 95       	neg	r22
    2340:	7f 4f       	sbci	r23, 0xFF	; 255
    2342:	8f 4f       	sbci	r24, 0xFF	; 255
    2344:	9f 4f       	sbci	r25, 0xFF	; 255
    2346:	99 23       	and	r25, r25
    2348:	a9 f0       	breq	.+42     	; 0x2374 <__floatsisf+0x40>
    234a:	f9 2f       	mov	r31, r25
    234c:	96 e9       	ldi	r25, 0x96	; 150
    234e:	bb 27       	eor	r27, r27
    2350:	93 95       	inc	r25
    2352:	f6 95       	lsr	r31
    2354:	87 95       	ror	r24
    2356:	77 95       	ror	r23
    2358:	67 95       	ror	r22
    235a:	b7 95       	ror	r27
    235c:	f1 11       	cpse	r31, r1
    235e:	f8 cf       	rjmp	.-16     	; 0x2350 <__floatsisf+0x1c>
    2360:	fa f4       	brpl	.+62     	; 0x23a0 <__floatsisf+0x6c>
    2362:	bb 0f       	add	r27, r27
    2364:	11 f4       	brne	.+4      	; 0x236a <__floatsisf+0x36>
    2366:	60 ff       	sbrs	r22, 0
    2368:	1b c0       	rjmp	.+54     	; 0x23a0 <__floatsisf+0x6c>
    236a:	6f 5f       	subi	r22, 0xFF	; 255
    236c:	7f 4f       	sbci	r23, 0xFF	; 255
    236e:	8f 4f       	sbci	r24, 0xFF	; 255
    2370:	9f 4f       	sbci	r25, 0xFF	; 255
    2372:	16 c0       	rjmp	.+44     	; 0x23a0 <__floatsisf+0x6c>
    2374:	88 23       	and	r24, r24
    2376:	11 f0       	breq	.+4      	; 0x237c <__floatsisf+0x48>
    2378:	96 e9       	ldi	r25, 0x96	; 150
    237a:	11 c0       	rjmp	.+34     	; 0x239e <__floatsisf+0x6a>
    237c:	77 23       	and	r23, r23
    237e:	21 f0       	breq	.+8      	; 0x2388 <__floatsisf+0x54>
    2380:	9e e8       	ldi	r25, 0x8E	; 142
    2382:	87 2f       	mov	r24, r23
    2384:	76 2f       	mov	r23, r22
    2386:	05 c0       	rjmp	.+10     	; 0x2392 <__floatsisf+0x5e>
    2388:	66 23       	and	r22, r22
    238a:	71 f0       	breq	.+28     	; 0x23a8 <__floatsisf+0x74>
    238c:	96 e8       	ldi	r25, 0x86	; 134
    238e:	86 2f       	mov	r24, r22
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	2a f0       	brmi	.+10     	; 0x23a0 <__floatsisf+0x6c>
    2396:	9a 95       	dec	r25
    2398:	66 0f       	add	r22, r22
    239a:	77 1f       	adc	r23, r23
    239c:	88 1f       	adc	r24, r24
    239e:	da f7       	brpl	.-10     	; 0x2396 <__floatsisf+0x62>
    23a0:	88 0f       	add	r24, r24
    23a2:	96 95       	lsr	r25
    23a4:	87 95       	ror	r24
    23a6:	97 f9       	bld	r25, 7
    23a8:	08 95       	ret

000023aa <__fp_inf>:
    23aa:	97 f9       	bld	r25, 7
    23ac:	9f 67       	ori	r25, 0x7F	; 127
    23ae:	80 e8       	ldi	r24, 0x80	; 128
    23b0:	70 e0       	ldi	r23, 0x00	; 0
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	08 95       	ret

000023b6 <__fp_nan>:
    23b6:	9f ef       	ldi	r25, 0xFF	; 255
    23b8:	80 ec       	ldi	r24, 0xC0	; 192
    23ba:	08 95       	ret

000023bc <__fp_pscA>:
    23bc:	00 24       	eor	r0, r0
    23be:	0a 94       	dec	r0
    23c0:	16 16       	cp	r1, r22
    23c2:	17 06       	cpc	r1, r23
    23c4:	18 06       	cpc	r1, r24
    23c6:	09 06       	cpc	r0, r25
    23c8:	08 95       	ret

000023ca <__fp_pscB>:
    23ca:	00 24       	eor	r0, r0
    23cc:	0a 94       	dec	r0
    23ce:	12 16       	cp	r1, r18
    23d0:	13 06       	cpc	r1, r19
    23d2:	14 06       	cpc	r1, r20
    23d4:	05 06       	cpc	r0, r21
    23d6:	08 95       	ret

000023d8 <__fp_round>:
    23d8:	09 2e       	mov	r0, r25
    23da:	03 94       	inc	r0
    23dc:	00 0c       	add	r0, r0
    23de:	11 f4       	brne	.+4      	; 0x23e4 <__fp_round+0xc>
    23e0:	88 23       	and	r24, r24
    23e2:	52 f0       	brmi	.+20     	; 0x23f8 <__fp_round+0x20>
    23e4:	bb 0f       	add	r27, r27
    23e6:	40 f4       	brcc	.+16     	; 0x23f8 <__fp_round+0x20>
    23e8:	bf 2b       	or	r27, r31
    23ea:	11 f4       	brne	.+4      	; 0x23f0 <__fp_round+0x18>
    23ec:	60 ff       	sbrs	r22, 0
    23ee:	04 c0       	rjmp	.+8      	; 0x23f8 <__fp_round+0x20>
    23f0:	6f 5f       	subi	r22, 0xFF	; 255
    23f2:	7f 4f       	sbci	r23, 0xFF	; 255
    23f4:	8f 4f       	sbci	r24, 0xFF	; 255
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	08 95       	ret

000023fa <__fp_split3>:
    23fa:	57 fd       	sbrc	r21, 7
    23fc:	90 58       	subi	r25, 0x80	; 128
    23fe:	44 0f       	add	r20, r20
    2400:	55 1f       	adc	r21, r21
    2402:	59 f0       	breq	.+22     	; 0x241a <__fp_splitA+0x10>
    2404:	5f 3f       	cpi	r21, 0xFF	; 255
    2406:	71 f0       	breq	.+28     	; 0x2424 <__fp_splitA+0x1a>
    2408:	47 95       	ror	r20

0000240a <__fp_splitA>:
    240a:	88 0f       	add	r24, r24
    240c:	97 fb       	bst	r25, 7
    240e:	99 1f       	adc	r25, r25
    2410:	61 f0       	breq	.+24     	; 0x242a <__fp_splitA+0x20>
    2412:	9f 3f       	cpi	r25, 0xFF	; 255
    2414:	79 f0       	breq	.+30     	; 0x2434 <__fp_splitA+0x2a>
    2416:	87 95       	ror	r24
    2418:	08 95       	ret
    241a:	12 16       	cp	r1, r18
    241c:	13 06       	cpc	r1, r19
    241e:	14 06       	cpc	r1, r20
    2420:	55 1f       	adc	r21, r21
    2422:	f2 cf       	rjmp	.-28     	; 0x2408 <__fp_split3+0xe>
    2424:	46 95       	lsr	r20
    2426:	f1 df       	rcall	.-30     	; 0x240a <__fp_splitA>
    2428:	08 c0       	rjmp	.+16     	; 0x243a <__fp_splitA+0x30>
    242a:	16 16       	cp	r1, r22
    242c:	17 06       	cpc	r1, r23
    242e:	18 06       	cpc	r1, r24
    2430:	99 1f       	adc	r25, r25
    2432:	f1 cf       	rjmp	.-30     	; 0x2416 <__fp_splitA+0xc>
    2434:	86 95       	lsr	r24
    2436:	71 05       	cpc	r23, r1
    2438:	61 05       	cpc	r22, r1
    243a:	08 94       	sec
    243c:	08 95       	ret

0000243e <__fp_zero>:
    243e:	e8 94       	clt

00002440 <__fp_szero>:
    2440:	bb 27       	eor	r27, r27
    2442:	66 27       	eor	r22, r22
    2444:	77 27       	eor	r23, r23
    2446:	cb 01       	movw	r24, r22
    2448:	97 f9       	bld	r25, 7
    244a:	08 95       	ret

0000244c <__mulsf3>:
    244c:	0e 94 39 12 	call	0x2472	; 0x2472 <__mulsf3x>
    2450:	0c 94 ec 11 	jmp	0x23d8	; 0x23d8 <__fp_round>
    2454:	0e 94 de 11 	call	0x23bc	; 0x23bc <__fp_pscA>
    2458:	38 f0       	brcs	.+14     	; 0x2468 <__mulsf3+0x1c>
    245a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <__fp_pscB>
    245e:	20 f0       	brcs	.+8      	; 0x2468 <__mulsf3+0x1c>
    2460:	95 23       	and	r25, r21
    2462:	11 f0       	breq	.+4      	; 0x2468 <__mulsf3+0x1c>
    2464:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__fp_inf>
    2468:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__fp_nan>
    246c:	11 24       	eor	r1, r1
    246e:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__fp_szero>

00002472 <__mulsf3x>:
    2472:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__fp_split3>
    2476:	70 f3       	brcs	.-36     	; 0x2454 <__mulsf3+0x8>

00002478 <__mulsf3_pse>:
    2478:	95 9f       	mul	r25, r21
    247a:	c1 f3       	breq	.-16     	; 0x246c <__mulsf3+0x20>
    247c:	95 0f       	add	r25, r21
    247e:	50 e0       	ldi	r21, 0x00	; 0
    2480:	55 1f       	adc	r21, r21
    2482:	62 9f       	mul	r22, r18
    2484:	f0 01       	movw	r30, r0
    2486:	72 9f       	mul	r23, r18
    2488:	bb 27       	eor	r27, r27
    248a:	f0 0d       	add	r31, r0
    248c:	b1 1d       	adc	r27, r1
    248e:	63 9f       	mul	r22, r19
    2490:	aa 27       	eor	r26, r26
    2492:	f0 0d       	add	r31, r0
    2494:	b1 1d       	adc	r27, r1
    2496:	aa 1f       	adc	r26, r26
    2498:	64 9f       	mul	r22, r20
    249a:	66 27       	eor	r22, r22
    249c:	b0 0d       	add	r27, r0
    249e:	a1 1d       	adc	r26, r1
    24a0:	66 1f       	adc	r22, r22
    24a2:	82 9f       	mul	r24, r18
    24a4:	22 27       	eor	r18, r18
    24a6:	b0 0d       	add	r27, r0
    24a8:	a1 1d       	adc	r26, r1
    24aa:	62 1f       	adc	r22, r18
    24ac:	73 9f       	mul	r23, r19
    24ae:	b0 0d       	add	r27, r0
    24b0:	a1 1d       	adc	r26, r1
    24b2:	62 1f       	adc	r22, r18
    24b4:	83 9f       	mul	r24, r19
    24b6:	a0 0d       	add	r26, r0
    24b8:	61 1d       	adc	r22, r1
    24ba:	22 1f       	adc	r18, r18
    24bc:	74 9f       	mul	r23, r20
    24be:	33 27       	eor	r19, r19
    24c0:	a0 0d       	add	r26, r0
    24c2:	61 1d       	adc	r22, r1
    24c4:	23 1f       	adc	r18, r19
    24c6:	84 9f       	mul	r24, r20
    24c8:	60 0d       	add	r22, r0
    24ca:	21 1d       	adc	r18, r1
    24cc:	82 2f       	mov	r24, r18
    24ce:	76 2f       	mov	r23, r22
    24d0:	6a 2f       	mov	r22, r26
    24d2:	11 24       	eor	r1, r1
    24d4:	9f 57       	subi	r25, 0x7F	; 127
    24d6:	50 40       	sbci	r21, 0x00	; 0
    24d8:	9a f0       	brmi	.+38     	; 0x2500 <__mulsf3_pse+0x88>
    24da:	f1 f0       	breq	.+60     	; 0x2518 <__mulsf3_pse+0xa0>
    24dc:	88 23       	and	r24, r24
    24de:	4a f0       	brmi	.+18     	; 0x24f2 <__mulsf3_pse+0x7a>
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	bb 1f       	adc	r27, r27
    24e6:	66 1f       	adc	r22, r22
    24e8:	77 1f       	adc	r23, r23
    24ea:	88 1f       	adc	r24, r24
    24ec:	91 50       	subi	r25, 0x01	; 1
    24ee:	50 40       	sbci	r21, 0x00	; 0
    24f0:	a9 f7       	brne	.-22     	; 0x24dc <__mulsf3_pse+0x64>
    24f2:	9e 3f       	cpi	r25, 0xFE	; 254
    24f4:	51 05       	cpc	r21, r1
    24f6:	80 f0       	brcs	.+32     	; 0x2518 <__mulsf3_pse+0xa0>
    24f8:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <__fp_inf>
    24fc:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__fp_szero>
    2500:	5f 3f       	cpi	r21, 0xFF	; 255
    2502:	e4 f3       	brlt	.-8      	; 0x24fc <__mulsf3_pse+0x84>
    2504:	98 3e       	cpi	r25, 0xE8	; 232
    2506:	d4 f3       	brlt	.-12     	; 0x24fc <__mulsf3_pse+0x84>
    2508:	86 95       	lsr	r24
    250a:	77 95       	ror	r23
    250c:	67 95       	ror	r22
    250e:	b7 95       	ror	r27
    2510:	f7 95       	ror	r31
    2512:	e7 95       	ror	r30
    2514:	9f 5f       	subi	r25, 0xFF	; 255
    2516:	c1 f7       	brne	.-16     	; 0x2508 <__mulsf3_pse+0x90>
    2518:	fe 2b       	or	r31, r30
    251a:	88 0f       	add	r24, r24
    251c:	91 1d       	adc	r25, r1
    251e:	96 95       	lsr	r25
    2520:	87 95       	ror	r24
    2522:	97 f9       	bld	r25, 7
    2524:	08 95       	ret

00002526 <__udivmodsi4>:
    2526:	a1 e2       	ldi	r26, 0x21	; 33
    2528:	1a 2e       	mov	r1, r26
    252a:	aa 1b       	sub	r26, r26
    252c:	bb 1b       	sub	r27, r27
    252e:	fd 01       	movw	r30, r26
    2530:	0d c0       	rjmp	.+26     	; 0x254c <__udivmodsi4_ep>

00002532 <__udivmodsi4_loop>:
    2532:	aa 1f       	adc	r26, r26
    2534:	bb 1f       	adc	r27, r27
    2536:	ee 1f       	adc	r30, r30
    2538:	ff 1f       	adc	r31, r31
    253a:	a2 17       	cp	r26, r18
    253c:	b3 07       	cpc	r27, r19
    253e:	e4 07       	cpc	r30, r20
    2540:	f5 07       	cpc	r31, r21
    2542:	20 f0       	brcs	.+8      	; 0x254c <__udivmodsi4_ep>
    2544:	a2 1b       	sub	r26, r18
    2546:	b3 0b       	sbc	r27, r19
    2548:	e4 0b       	sbc	r30, r20
    254a:	f5 0b       	sbc	r31, r21

0000254c <__udivmodsi4_ep>:
    254c:	66 1f       	adc	r22, r22
    254e:	77 1f       	adc	r23, r23
    2550:	88 1f       	adc	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	1a 94       	dec	r1
    2556:	69 f7       	brne	.-38     	; 0x2532 <__udivmodsi4_loop>
    2558:	60 95       	com	r22
    255a:	70 95       	com	r23
    255c:	80 95       	com	r24
    255e:	90 95       	com	r25
    2560:	9b 01       	movw	r18, r22
    2562:	ac 01       	movw	r20, r24
    2564:	bd 01       	movw	r22, r26
    2566:	cf 01       	movw	r24, r30
    2568:	08 95       	ret

0000256a <__tablejump2__>:
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	05 90       	lpm	r0, Z+
    2570:	f4 91       	lpm	r31, Z
    2572:	e0 2d       	mov	r30, r0
    2574:	09 94       	ijmp

00002576 <_exit>:
    2576:	f8 94       	cli

00002578 <__stop_program>:
    2578:	ff cf       	rjmp	.-2      	; 0x2578 <__stop_program>
